alluxio.worker.allocator.class:
  'The strategy that a worker uses to allocate space among storage directories in certain storage layer. Valid options include: `alluxio.worker.block.allocator.MaxFreeAllocator`, `alluxio.worker.block.allocator.GreedyAllocator`, `alluxio.worker.block.allocator.RoundRobinAllocator`.'
alluxio.worker.bind.host:
  'The hostname Alluxio''s worker node binds to.'
alluxio.worker.block.annotator.class:
  'The strategy that a worker uses to annotate blocks in order to have an ordered view of them during internalmanagement tasks such as eviction and promotion/demotion.  Valid options include: `alluxio.worker.block.annotator.LRFUAnnotator`, `alluxio.worker.block.annotator.LRUAnnotator`, '
alluxio.worker.block.annotator.lrfu.attenuation.factor:
  'A attenuation factor in [2, INF) to control the behavior of LRFU annotator.'
alluxio.worker.block.annotator.lrfu.step.factor:
  'A factor in [0, 1] to control the behavior of LRFU: smaller value makes LRFU more similar to LFU; and larger value makes LRFU closer to LRU.'
alluxio.worker.block.heartbeat.interval:
  'The interval between block workers'' heartbeats to update block status, storage health and other workers'' information to Alluxio Master.'
alluxio.worker.block.heartbeat.timeout:
  'The timeout value of block workers'' heartbeats. If the worker can''t connect to master before this interval expires, the worker will exit.'
alluxio.worker.block.master.client.pool.size:
  'The block master client pool size on the Alluxio workers.'
alluxio.worker.container.hostname:
  'The container hostname if worker is running in a container.'
alluxio.worker.data.folder:
  'A relative path within each storage directory used as the data folder for Alluxio worker to put data for tiered store.'
alluxio.worker.data.folder.permissions:
  'The permission set for the worker data folder. If short circuit is used this folder should be accessible by all users (rwxrwxrwx).'
alluxio.worker.data.folder.tmp:
  'A relative path in alluxio.worker.data.folder used to store the temporary data for uncommitted files.'
alluxio.worker.data.server.class:
  'Selects the networking stack to run the worker with. Valid options are: `alluxio.worker.grpc.GrpcDataServer`.'
alluxio.worker.data.server.domain.socket.address:
  'The path to the domain socket. Short-circuit reads make use of a UNIX domain socket when this is set (non-empty). This is a special path in the file system that allows the client and the AlluxioWorker to communicate. You will need to set a path to this socket. The AlluxioWorker needs to be able to create the path. If alluxio.worker.data.server.domain.socket.as.uuid is set, the path should be the home directory for the domain socket. The full path for the domain socket with be {path}/{uuid}.'
alluxio.worker.data.server.domain.socket.as.uuid:
  'If true, the property alluxio.worker.data.server.domain.socket.addressis the path to the home directory for the domain socket and a unique identifier is used as the domain socket name. If false, the property is the absolute path to the UNIX domain socket.'
alluxio.worker.data.tmp.subdir.max:
  'The maximum number of sub-directories allowed to be created in ${alluxio.worker.data.tmp.folder}.'
alluxio.worker.evictor.class:
  'The strategy that a worker uses to evict block files when a storage layer runs out of space. Valid options include `alluxio.worker.block.evictor.LRFUEvictor`, `alluxio.worker.block.evictor.GreedyEvictor`, `alluxio.worker.block.evictor.LRUEvictor`, `alluxio.worker.block.evictor.PartialLRUEvictor`.'
alluxio.worker.file.buffer.size:
  'The buffer size for worker to write data into the tiered storage.'
alluxio.worker.free.space.timeout:
  'The duration for which a worker will wait for eviction to make space available for a client write request.'
alluxio.worker.hostname:
  'The hostname of Alluxio worker.'
alluxio.worker.jvm.monitor.enabled:
  'Whether to enable start JVM monitor thread on the worker. This will start a thread to detect JVM-wide pauses induced by GC or other reasons.'
alluxio.worker.keytab.file:
  'Kerberos keytab file for Alluxio worker.'
alluxio.worker.management.backoff.strategy:
  'Defines the backoff scope respected by background tasks. Supported values are ANY / DIRECTORY. ANY: Management tasks will backoff from worker when there is any user I/O.This mode will ensure low management task overhead in order to favor immediate user I/O performance. However, making progress on management tasks will require quite periods on the worker.DIRECTORY: Management tasks will backoff from directories with ongoing user I/O.This mode will give better chance of making progress on management tasks.However, immediate user I/O throughput might be reduced due to increased management task activity.'
alluxio.worker.management.block.transfer.concurrency.limit:
  'Puts a limit to how many block transfers are executed concurrently during management.'
alluxio.worker.management.load.detection.cool.down.time:
  'Management tasks will not run for this long after load detected. Any user I/O will still register as a load for this period of time after it is finished. Short durations might cause interference between user I/O and background tier management tasks. Long durations might cause starvation for background tasks.'
alluxio.worker.management.task.thread.count:
  'The number of threads for management task executor'
alluxio.worker.management.tier.align.enabled:
  'Whether to align tiers based on access pattern.'
alluxio.worker.management.tier.align.range:
  'Maximum number of blocks to consider from one tier for a single alignment task.'
alluxio.worker.management.tier.align.reserved.bytes:
  'The amount of space that is reserved from each storage directory for internal management tasks.'
alluxio.worker.management.tier.promote.enabled:
  'Whether to promote blocks to higher tiers.'
alluxio.worker.management.tier.promote.quota.percent:
  'Max percentage of each tier that could be used for promotions. Promotions will be stopped to a tier once its used space go over this value. (0 means never promote, and, 100 means always promote.'
alluxio.worker.management.tier.promote.range:
  'Maximum number of blocks to consider from one tier for a single promote task.'
alluxio.worker.management.tier.swap.restore.enabled:
  'Whether to run management swap-restore task when tier alignment cannot make progress.'
alluxio.worker.master.connect.retry.timeout:
  'Retry period before workers give up on connecting to master and exit.'
alluxio.worker.master.periodical.rpc.timeout:
  'Timeout for periodical RPC between workers and the leading master. This property is added to prevent workers from hanging in periodical RPCs with previous leading master during flaky network situations. If the timeout is too short, periodical RPCs may not have enough time to get response from the leading master during heavy cluster load and high network latency.'
alluxio.worker.network.async.cache.manager.queue.max:
  'The maximum number of outstanding async caching requests to cache blocks in each data server'
alluxio.worker.network.async.cache.manager.threads.max:
  'The maximum number of threads used to cache blocks asynchronously in the data server.'
alluxio.worker.network.block.reader.threads.max:
  'The maximum number of threads used to read blocks in the data server.'
alluxio.worker.network.block.writer.threads.max:
  'The maximum number of threads used to write blocks in the data server.'
alluxio.worker.network.flowcontrol.window:
  'The HTTP2 flow control window used by worker gRPC connections. Larger value will allow more data to be buffered but will use more memory.'
alluxio.worker.network.keepalive.time:
  'The amount of time for data server (for block reads and block writes) to wait for a response before pinging the client to see if it is still alive.'
alluxio.worker.network.keepalive.timeout:
  'The maximum time for a data server (for block reads and block writes) to wait for a keepalive response before closing the connection.'
alluxio.worker.network.max.inbound.message.size:
  'The max inbound message size used by worker gRPC connections.'
alluxio.worker.network.netty.boss.threads:
  'How many threads to use for accepting new requests.'
alluxio.worker.network.netty.channel:
  'Netty channel type: NIO or EPOLL. If EPOLL is not available, this will automatically fall back to NIO.'
alluxio.worker.network.netty.shutdown.quiet.period:
  'The quiet period. When the netty server is shutting down, it will ensure that no RPCs occur during the quiet period. If an RPC occurs, then the quiet period will restart before shutting down the netty server.'
alluxio.worker.network.netty.watermark.high:
  'Determines how many bytes can be in the write queue before switching to non-writable.'
alluxio.worker.network.netty.watermark.low:
  'Once the high watermark limit is reached, the queue must be flushed down to the low watermark before switching back to writable.'
alluxio.worker.network.netty.worker.threads:
  'How many threads to use for processing requests. Zero defaults to #cpuCores * 2.'
alluxio.worker.network.reader.buffer.size:
  'When a client reads from a remote worker, the maximum amount of data not received by client allowed before the worker pauses sending more data. If this value is lower than read chunk size, read performance may be impacted as worker waits more often for buffer to free up. Higher value will increase the memory consumed by each read request.'
alluxio.worker.network.reader.max.chunk.size.bytes:
  'When a client read from a remote worker, the maximum chunk size.'
alluxio.worker.network.shutdown.timeout:
  'Maximum amount of time to wait until the worker gRPC server is shutdown (regardless of the quiet period).'
alluxio.worker.network.writer.buffer.size.messages:
  'When a client writes to a remote worker, the maximum number of data messages to buffer by the server for each request.'
alluxio.worker.network.zerocopy.enabled:
  'Whether zero copy is enabled on worker when processing data streams.'
alluxio.worker.principal:
  'Kerberos principal for Alluxio worker.'
alluxio.worker.ramdisk.size:
  'Memory capacity of each worker node. It is recommended to set this value explicitly.'
alluxio.worker.remote.io.slow.threshold:
  'The time threshold for when a worker remote IO (read or write) of a single buffer is considered slow. When slow IO occurs, it is logged by a sampling logger.'
alluxio.worker.reviewer.class:
  '(Experimental) The API is subject to change in the future.The strategy that a worker uses to review space allocation in the Allocator. Each time a block allocation decision is made by the Allocator, the Reviewer will review the decision and rejects it,if the allocation does not meet certain criteria of the Reviewer.The Reviewer prevents the worker to make a bad block allocation decision.Valid options include:`alluxio.worker.block.reviewer.ProbabilisticBufferReviewer`.'
alluxio.worker.reviewer.probabilistic.hardlimit.bytes:
  'This is used by the `alluxio.worker.block.reviewer.ProbabilisticBufferReviewer`. When the free space in a storage dir falls below this hard limit, the ProbabilisticBufferReviewer will stop accepting new blocks into it.This is because we may load more data into existing blocks in the directory and their sizes may expand.'
alluxio.worker.reviewer.probabilistic.softlimit.bytes:
  'This is used by the `alluxio.worker.block.reviewer.ProbabilisticBufferReviewer`. We attempt to leave a buffer in each storage directory. When the free space in a certain storage directory on the worker falls below this soft limit, the chance that the Reviewer accepts new blocks into this directory goes down. This chance keeps falling linearly until it reaches 0, when the available space reaches the hard limit.'
alluxio.worker.rpc.port:
  'The port for Alluxio worker''s RPC service.'
alluxio.worker.session.timeout:
  'Timeout between worker and client connection indicating a lost session connection.'
alluxio.worker.storage.checker.enabled:
  'Whether periodic storage health checker is enabled on Alluxio workers.'
alluxio.worker.tieredstore.block.lock.readers:
  'The max number of concurrent readers for a block lock.'
alluxio.worker.tieredstore.block.locks:
  'Total number of block locks for an Alluxio block worker. Larger value leads to finer locking granularity, but uses more space.'
alluxio.worker.tieredstore.free.ahead.bytes:
  'Amount to free ahead when worker storage is full. Higher values will help decrease CPU utilization under peak storage. Lower values will increase storage utilization.'
alluxio.worker.tieredstore.level0.alias:
  'The alias of the top storage tier on this worker. It must match one of the global storage tiers from the master configuration. We disable placing an alias lower in the global hierarchy before an alias with a higher position on the worker hierarchy. So by default, SSD cannot come before MEM on any worker.'
alluxio.worker.tieredstore.level0.dirs.mediumtype:
  'A list of media types (e.g., &quot;MEM,SSD,SSD&quot;) for each storage directory on the top storage tier specified by alluxio.worker.tieredstore.level0.dirs.path.'
alluxio.worker.tieredstore.level0.dirs.path:
  'The path of storage directory for the top storage tier. Note for MacOS the value should be `/Volumes/`.'
alluxio.worker.tieredstore.level0.dirs.quota:
  'The capacity of the top storage tier.'
alluxio.worker.tieredstore.level0.watermark.high.ratio:
  'The high watermark of the space in the top storage tier (a value between 0 and 1).'
alluxio.worker.tieredstore.level0.watermark.low.ratio:
  'The low watermark of the space in the top storage tier (a value between 0 and 1).'
alluxio.worker.tieredstore.level1.alias:
  'The alias of the second storage tier on this worker.'
alluxio.worker.tieredstore.level1.dirs.mediumtype:
  'A list of media types (e.g., &quot;MEM,SSD,SSD&quot;) for each storage directory on the second storage tier specified by alluxio.worker.tieredstore.level1.dirs.path.'
alluxio.worker.tieredstore.level1.dirs.path:
  'The path of storage directory for the second storage tier.'
alluxio.worker.tieredstore.level1.dirs.quota:
  'The capacity of the second storage tier.'
alluxio.worker.tieredstore.level1.watermark.high.ratio:
  'The high watermark of the space in the second storage tier (a value between 0 and 1).'
alluxio.worker.tieredstore.level1.watermark.low.ratio:
  'The low watermark of the space in the second storage tier (a value between 0 and 1).'
alluxio.worker.tieredstore.level2.alias:
  'The alias of the third storage tier on this worker.'
alluxio.worker.tieredstore.level2.dirs.mediumtype:
  'A list of media types (e.g., &quot;MEM,SSD,SSD&quot;) for each storage directory on the third storage tier specified by alluxio.worker.tieredstore.level2.dirs.path.'
alluxio.worker.tieredstore.level2.dirs.path:
  'The path of storage directory for the third storage tier.'
alluxio.worker.tieredstore.level2.dirs.quota:
  'The capacity of the third storage tier.'
alluxio.worker.tieredstore.level2.watermark.high.ratio:
  'The high watermark of the space in the third storage tier (a value between 0 and 1).'
alluxio.worker.tieredstore.level2.watermark.low.ratio:
  'The low watermark of the space in the third storage tier (a value between 0 and 1).'
alluxio.worker.tieredstore.levels:
  'The number of storage tiers on the worker.'
alluxio.worker.ufs.block.open.timeout:
  'Timeout to open a block from UFS.'
alluxio.worker.ufs.instream.cache.enabled:
  'Enable caching for seekable under storage input stream, so that subsequent seek operations on the same file will reuse the cached input stream. This will improve position read performance as the open operations of some under file system would be expensive. The cached input stream would be stale, when the UFS file is modified without notifying alluxio. '
alluxio.worker.ufs.instream.cache.expiration.time:
  'Cached UFS instream expiration time.'
alluxio.worker.ufs.instream.cache.max.size:
  'The max entries in the UFS instream cache.'
alluxio.worker.web.bind.host:
  'The hostname Alluxio worker''s web server binds to.'
alluxio.worker.web.hostname:
  'The hostname Alluxio worker''s web UI binds to.'
alluxio.worker.web.port:
  'The port Alluxio worker''s web UI runs on.'
