alluxio.user.app.id:
  'The custom id to use for labeling this client''s info, such as metrics. If unset, a random long will be used. This value is displayed in the client logs on initialization. Note that using the same app id will cause client info to be aggregated, so different applications must set their own ids or leave this value unset to use a randomly generated id.'
alluxio.user.block.avoid.eviction.policy.reserved.size.bytes:
  'The portion of space reserved in a worker when using the LocalFirstAvoidEvictionPolicy class as block location policy.'
alluxio.user.block.master.client.threads:
  'The number of threads used by a block master client pool to talk to the block master.'
alluxio.user.block.remote.read.buffer.size.bytes:
  'The size of the file buffer to read data from remote Alluxio worker.'
alluxio.user.block.size.bytes.default:
  'Default block size for Alluxio files.'
alluxio.user.block.worker.client.pool.gc.threshold:
  'A block worker client is closed if it has been idle for more than this threshold.'
alluxio.user.block.worker.client.pool.size:
  'The maximum number of block worker clients cached in the block worker client pool.'
alluxio.user.block.worker.client.read.retry:
  'The maximum number of workers to retry before the client gives up on reading a block'
alluxio.user.block.write.location.policy.class:
  'The default location policy for choosing workers for writing a file''s blocks.'
alluxio.user.conf.cluster.default.enabled:
  'When this property is true, an Alluxio client will load the default values of configuration properties set by Alluxio master.'
alluxio.user.conf.sync.interval:
  'The time period of client master heartbeat to update the configuration if necessary from meta master.'
alluxio.user.date.format.pattern:
  'Display formatted date in cli command and web UI by given date format pattern.'
alluxio.user.file.buffer.bytes:
  'The size of the file buffer to use for file system reads/writes.'
alluxio.user.file.copyfromlocal.block.location.policy.class:
  'The default location policy for choosing workers for writing a file''s blocks using copyFromLocal command.'
alluxio.user.file.create.ttl:
  'Time to live for files created by a user, no ttl by default.'
alluxio.user.file.create.ttl.action:
  'When file''s ttl is expired, the action performs on it. Options: DELETE (default) or FREE'
alluxio.user.file.delete.unchecked:
  'Whether to check if the UFS contents are in sync with Alluxio before attempting to delete persisted directories recursively.'
alluxio.user.file.master.client.threads:
  'The number of threads used by a file master client to talk to the file master.'
alluxio.user.file.metadata.load.type:
  'The behavior of loading metadata from UFS. When information about a path is requested and the path does not exist in Alluxio, metadata can be loaded from the UFS. Valid options are `ALWAYS`, `NEVER`, and `ONCE`. `ALWAYS` will always access UFS to see if the path exists in the UFS. `NEVER` will never consult the UFS. `ONCE` will access the UFS the "first" time (according to a cache), but not after that. This parameter is ignored if a metadata sync is performed, via the parameter "alluxio.user.file.metadata.sync.interval"'
alluxio.user.file.metadata.sync.interval:
  'The interval for syncing UFS metadata before invoking an operation on a path. -1 means no sync will occur. 0 means Alluxio will always sync the metadata of the path before an operation. If you specify a time interval, Alluxio will (best effort) not re-sync a path within that time interval. Syncing the metadata for a path must interact with the UFS, so it is an expensive operation. If a sync is performed for an operation, the configuration of "alluxio.user.file.metadata.load.type" will be ignored.'
alluxio.user.file.passive.cache.enabled:
  'Whether to cache files to local Alluxio workers when the files are read from remote workers (not UFS).'
alluxio.user.file.persist.on.rename:
  'Whether or not to asynchronously persist any files which have been renamed. This is helpful when working with compute frameworks which use rename to commit results.'
alluxio.user.file.persistence.initial.wait.time:
  'Time to wait before starting the persistence job. When the value is set to -1, the file will be persisted by rename operation or persist CLI but will not be automatically persisted in other cases. This is to avoid the heavy object copy in rename operation when alluxio.user.file.writetype.default is set to ASYNC_THROUGH. This value should be smaller than the value of alluxio.master.persistence.max.total.wait.time'
alluxio.user.file.readtype.default:
  'Default read type when creating Alluxio files. Valid options are `CACHE_PROMOTE` (move data to highest tier if already in Alluxio storage, write data into highest tier of local Alluxio if data needs to be read from under storage), `CACHE` (write data into highest tier of local Alluxio if data needs to be read from under storage), `NO_CACHE` (no data interaction with Alluxio, if the read is from Alluxio data migration or eviction will not occur).'
alluxio.user.file.replication.durable:
  'The target replication level of a file created by ASYNC_THROUGH writesbefore this file is persisted.'
alluxio.user.file.replication.max:
  'The target max replication level of a file in Alluxio space. Setting this property to a negative value means no upper limit.'
alluxio.user.file.replication.min:
  'The target min replication level of a file in Alluxio space.'
alluxio.user.file.ufs.tier.enabled:
  'When workers run out of available memory, whether the client can skip writing data to Alluxio but fallback to write to UFS without stopping the application. This property only works when the write type is ASYNC_THROUGH.'
alluxio.user.file.waitcompleted.poll:
  'The time interval to poll a file for its completion status when using waitCompleted.'
alluxio.user.file.write.tier.default:
  'The default tier for choosing a where to write a block. Valid option is any integer. Non-negative values identify tiers starting from top going down (0 identifies the first tier, 1 identifies the second tier, and so on). If the provided value is greater than the number of tiers, it identifies the last tier. Negative values identify tiers starting from the bottom going up (-1 identifies the last tier, -2 identifies the second to last tier, and so on). If the absolute value of the provided value is greater than the number of tiers, it identifies the first tier.'
alluxio.user.file.writetype.default:
  'Default write type when creating Alluxio files. Valid options are `MUST_CACHE` (write will only go to Alluxio and must be stored in Alluxio), `CACHE_THROUGH` (try to cache, write to UnderFS synchronously), `THROUGH` (no cache, write to UnderFS synchronously), `ASYNC_THROUGH` (write to cache, write to UnderFS asynchronously, replicated alluxio.user.file.replication.durable times in Alluxio before data is persisted.'
alluxio.user.local.reader.chunk.size.bytes:
  'When a client reads from a local worker, the maximum data chunk size.'
alluxio.user.local.writer.chunk.size.bytes:
  'When a client writes to a local worker, the maximum data chunk size.'
alluxio.user.logs.dir:
  'The path to store logs of Alluxio shell. To change its value, one can  set environment variable $ALLUXIO_USER_LOGS_DIR. Note: overwriting this property will only work when it is passed as a JVM system property (e.g., appending "-Dalluxio.user.logs.dir"=<NEW_VALUE>" to $ALLUXIO_JAVA_OPTS). Setting it in alluxio-site.properties will not work.'
alluxio.user.metrics.collection.enabled:
  'Enable collecting the client-side metrics and heartbeat them to master'
alluxio.user.metrics.heartbeat.interval:
  'The time period of client master heartbeat to send the client-side metrics.'
alluxio.user.network.data.timeout:
  'The maximum time for an Alluxio client to wait for a data response (e.g. block reads and block writes) from Alluxio worker.'
alluxio.user.network.flowcontrol.window:
  'The HTTP2 flow control window used by user gRPC connections. Larger value will allow more data to be buffered but will use more memory.'
alluxio.user.network.keepalive.time:
  'The amount of time for a gRPC client (for block reads and block writes) to wait for a response before pinging the server to see if it is still alive.'
alluxio.user.network.keepalive.timeout:
  'The maximum time for a gRPC client (for block reads and block writes) to wait for a keepalive response before closing the connection.'
alluxio.user.network.max.inbound.message.size:
  'The max inbound message size used by user gRPC connections.'
alluxio.user.network.netty.channel:
  'Type of netty channels. If EPOLL is not available, this will automatically fall back to NIO.'
alluxio.user.network.netty.worker.threads:
  'How many threads to use for remote block worker client to read from remote block workers.'
alluxio.user.network.reader.buffer.size.messages:
  'When a client reads from a remote worker, the maximum number of messages to buffer by the client. A message can be either a command response, a data chunk, or a gRPC stream event such as complete or error.'
alluxio.user.network.reader.chunk.size.bytes:
  'When a client reads from a remote worker, the maximum chunk size.'
alluxio.user.network.writer.buffer.size.messages:
  'When a client writes to a remote worker, the maximum number of messages to buffer by the client. A message can be either a command response, a data chunk, or a gRPC stream event such as complete or error.'
alluxio.user.network.writer.chunk.size.bytes:
  'When a client writes to a remote worker, the maximum chunk size.'
alluxio.user.network.writer.close.timeout:
  'The timeout to close a writer client.'
alluxio.user.network.writer.flush.timeout:
  'The timeout to wait for flush to finish in a data writer.'
alluxio.user.network.zerocopy.enabled:
  'Whether zero copy is enabled on client when processing data streams.'
alluxio.user.rpc.retry.base.sleep:
  'Alluxio client RPCs automatically retry for transient errors with an exponential backoff. This property determines the base time in the exponential backoff.'
alluxio.user.rpc.retry.max.duration:
  'Alluxio client RPCs automatically retry for transient errors with an exponential backoff. This property determines the maximum duration to retry for before giving up. Note that, this value is set to 5s for fs and fsadmin CLIs.'
alluxio.user.rpc.retry.max.sleep:
  'Alluxio client RPCs automatically retry for transient errors with an exponential backoff. This property determines the maximum wait time in the backoff.'
alluxio.user.short.circuit.enabled:
  'The short circuit read/write which allows the clients to read/write data without going through Alluxio workers if the data is local is enabled if set to true.'
alluxio.user.ufs.block.location.all.fallback.enabled:
  'Whether to return all workers as block location if ufs block locations are not co-located with any Alluxio workers or is empty.'
alluxio.user.ufs.block.read.concurrency.max:
  'The maximum concurrent readers for one UFS block on one Block Worker.'
alluxio.user.ufs.block.read.location.policy:
  'When an Alluxio client reads a file from the UFS, it delegates the read to an Alluxio worker. The client uses this policy to choose which worker to read through. Built-in choices: [<a href="https://docs.alluxio.io/os/javadoc/edge/alluxio/client/block/policy/DeterministicHashPolicy.html">alluxio.client.block.policy.DeterministicHashPolicy</a>, <a href="https://docs.alluxio.io/os/javadoc/edge/alluxio/client/block/policy/LocalFirstAvoidEvictionPolicy.html">alluxio.client.block.policy.LocalFirstAvoidEvictionPolicy</a>, <a href="https://docs.alluxio.io/os/javadoc/edge/alluxio/client/block/policy/LocalFirstPolicy.html">alluxio.client.block.policy.LocalFirstPolicy</a>, <a href="https://docs.alluxio.io/os/javadoc/edge/alluxio/client/block/policy/MostAvailableFirstPolicy.html">alluxio.client.block.policy.MostAvailableFirstPolicy</a>, <a href="https://docs.alluxio.io/os/javadoc/edge/alluxio/client/block/policy/RoundRobinPolicy.html">alluxio.client.block.policy.RoundRobinPolicy</a>, <a href="https://docs.alluxio.io/os/javadoc/edge/alluxio/client/block/policy/SpecificHostPolicy.html">alluxio.client.block.policy.SpecificHostPolicy</a>].'
alluxio.user.ufs.block.read.location.policy.deterministic.hash.shards:
  'When alluxio.user.ufs.block.read.location.policy is set to alluxio.client.block.policy.DeterministicHashPolicy, this specifies the number of hash shards.'
alluxio.user.worker.list.refresh.interval:
  'The interval used to refresh the live worker list on the client'
