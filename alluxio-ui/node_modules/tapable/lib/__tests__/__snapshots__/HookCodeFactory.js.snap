// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HookCodeFactory callTap (no args, no intercept) async with onResult 1`] = `
"var _fn1 = _x[1];
_fn1((_err1, _result1) => {
if(_err1) {
onError(_err1);
} else {
onResult(_result1);
}
});
"
`;

exports[`HookCodeFactory callTap (no args, no intercept) async without onResult 1`] = `
"var _fn1 = _x[1];
_fn1(_err1 => {
if(_err1) {
onError(_err1);
} else {
onDone();
}
});
"
`;

exports[`HookCodeFactory callTap (no args, no intercept) promise with onResult 1`] = `
"var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2();
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
onResult(_result2);
}, _err2 => {
if(_hasResult2) throw _err2;
onError(_err2);
});
"
`;

exports[`HookCodeFactory callTap (no args, no intercept) promise without onResult 1`] = `
"var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2();
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
onDone();
}, _err2 => {
if(_hasResult2) throw _err2;
onError(_err2);
});
"
`;

exports[`HookCodeFactory callTap (no args, no intercept) sync with onResult 1`] = `
"var _fn0 = _x[0];
var _hasError0 = false;
try {
var _result0 = _fn0();
} catch(_err) {
_hasError0 = true;
onError(_err);
}
if(!_hasError0) {
onResult(_result0);
}
"
`;

exports[`HookCodeFactory callTap (no args, no intercept) sync without onResult 1`] = `
"var _fn0 = _x[0];
var _hasError0 = false;
try {
_fn0();
} catch(_err) {
_hasError0 = true;
onError(_err);
}
if(!_hasError0) {
onDone();
}
"
`;

exports[`HookCodeFactory callTap (with args, no intercept) async with onResult 1`] = `
"var _fn1 = _x[1];
_fn1(a, b, c, (_err1, _result1) => {
if(_err1) {
onError(_err1);
} else {
onResult(_result1);
}
});
"
`;

exports[`HookCodeFactory callTap (with args, no intercept) async without onResult 1`] = `
"var _fn1 = _x[1];
_fn1(a, b, c, _err1 => {
if(_err1) {
onError(_err1);
} else {
onDone();
}
});
"
`;

exports[`HookCodeFactory callTap (with args, no intercept) promise with onResult 1`] = `
"var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2(a, b, c);
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
onResult(_result2);
}, _err2 => {
if(_hasResult2) throw _err2;
onError(_err2);
});
"
`;

exports[`HookCodeFactory callTap (with args, no intercept) promise without onResult 1`] = `
"var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2(a, b, c);
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
onDone();
}, _err2 => {
if(_hasResult2) throw _err2;
onError(_err2);
});
"
`;

exports[`HookCodeFactory callTap (with args, no intercept) sync with onResult 1`] = `
"var _fn0 = _x[0];
var _hasError0 = false;
try {
var _result0 = _fn0(a, b, c);
} catch(_err) {
_hasError0 = true;
onError(_err);
}
if(!_hasError0) {
onResult(_result0);
}
"
`;

exports[`HookCodeFactory callTap (with args, no intercept) sync without onResult 1`] = `
"var _fn0 = _x[0];
var _hasError0 = false;
try {
_fn0(a, b, c);
} catch(_err) {
_hasError0 = true;
onError(_err);
}
if(!_hasError0) {
onDone();
}
"
`;

exports[`HookCodeFactory callTap (with args, with intercept) async with onResult 1`] = `
"var _tap1 = _taps[1];
_interceptors[0].tap(_tap1);
_interceptors[1].tap(_tap1);
var _fn1 = _x[1];
_fn1(a, b, c, (_err1, _result1) => {
if(_err1) {
onError(_err1);
} else {
onResult(_result1);
}
});
"
`;

exports[`HookCodeFactory callTap (with args, with intercept) async without onResult 1`] = `
"var _tap1 = _taps[1];
_interceptors[0].tap(_tap1);
_interceptors[1].tap(_tap1);
var _fn1 = _x[1];
_fn1(a, b, c, _err1 => {
if(_err1) {
onError(_err1);
} else {
onDone();
}
});
"
`;

exports[`HookCodeFactory callTap (with args, with intercept) promise with onResult 1`] = `
"var _tap2 = _taps[2];
_interceptors[0].tap(_tap2);
_interceptors[1].tap(_tap2);
var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2(a, b, c);
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
onResult(_result2);
}, _err2 => {
if(_hasResult2) throw _err2;
onError(_err2);
});
"
`;

exports[`HookCodeFactory callTap (with args, with intercept) promise without onResult 1`] = `
"var _tap2 = _taps[2];
_interceptors[0].tap(_tap2);
_interceptors[1].tap(_tap2);
var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2(a, b, c);
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
onDone();
}, _err2 => {
if(_hasResult2) throw _err2;
onError(_err2);
});
"
`;

exports[`HookCodeFactory callTap (with args, with intercept) sync with onResult 1`] = `
"var _tap0 = _taps[0];
_interceptors[0].tap(_tap0);
_interceptors[1].tap(_tap0);
var _fn0 = _x[0];
var _hasError0 = false;
try {
var _result0 = _fn0(a, b, c);
} catch(_err) {
_hasError0 = true;
onError(_err);
}
if(!_hasError0) {
onResult(_result0);
}
"
`;

exports[`HookCodeFactory callTap (with args, with intercept) sync without onResult 1`] = `
"var _tap0 = _taps[0];
_interceptors[0].tap(_tap0);
_interceptors[1].tap(_tap0);
var _fn0 = _x[0];
var _hasError0 = false;
try {
_fn0(a, b, c);
} catch(_err) {
_hasError0 = true;
onError(_err);
}
if(!_hasError0) {
onDone();
}
"
`;

exports[`HookCodeFactory taps (mixed) callTapsLooping 1`] = `
"var _looper = () => {
var _loopAsync = false;
var _loop;
do {
_loop = false;
var _fn0 = _x[0];
var _hasError0 = false;
try {
var _result0 = _fn0(a, b, c);
} catch(_err) {
_hasError0 = true;
onError(0, _err);
}
if(!_hasError0) {
if(_result0 !== undefined) {
_loop = true;
if(_loopAsync) _looper();
} else {
var _fn1 = _x[1];
_fn1(a, b, c, (_err1, _result1) => {
if(_err1) {
onError(1, _err1);
} else {
if(_result1 !== undefined) {
_loop = true;
if(_loopAsync) _looper();
} else {
var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2(a, b, c);
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
if(_result2 !== undefined) {
_loop = true;
if(_loopAsync) _looper();
} else {
if(!_loop) {
onDone();
}
}
}, _err2 => {
if(_hasResult2) throw _err2;
onError(2, _err2);
});
}
}
});
}
}
} while(_loop);
_loopAsync = true;
};
_looper();
"
`;

exports[`HookCodeFactory taps (mixed) callTapsParallel 1`] = `
"do {
var _counter = 3;
var _done = () => {
onDone();
};
if(_counter <= 0) break;
var _fn0 = _x[0];
var _result0 = _fn0(a, b, c);
if(_counter > 0) {
onResult(0, _result0, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
if(_counter <= 0) break;
var _fn1 = _x[1];
_fn1(a, b, c, (_err1, _result1) => {
if(_err1) {
if(_counter > 0) {
onError(1, _err1);
}
} else {
if(_counter > 0) {
onResult(1, _result1, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
}
});
if(_counter <= 0) break;
var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2(a, b, c);
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
if(_counter > 0) {
onResult(2, _result2, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
}, _err2 => {
if(_hasResult2) throw _err2;
if(_counter > 0) {
onError(2, _err2);
}
});
} while(false);
"
`;

exports[`HookCodeFactory taps (mixed) callTapsSeries 1`] = `
"var _fn0 = _x[0];
var _result0 = _fn0(a, b, c);
onResult(0, _result0, () => {
var _fn1 = _x[1];
_fn1(a, b, c, (_err1, _result1) => {
if(_err1) {
onError(1, _err1);
} else {
onResult(1, _result1, () => {
var _fn2 = _x[2];
var _hasResult2 = false;
var _promise2 = _fn2(a, b, c);
if (!_promise2 || !_promise2.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise2 + ')');
_promise2.then(_result2 => {
_hasResult2 = true;
onResult(2, _result2, () => {
onDone();
}, () => {
onDone();
});
}, _err2 => {
if(_hasResult2) throw _err2;
onError(2, _err2);
});
}, () => {
onDone();
});
}
});
}, () => {
onDone();
});
"
`;

exports[`HookCodeFactory taps (mixed2) callTapsLooping 1`] = `
"var _looper = () => {
var _loopAsync = false;
var _loop;
do {
_loop = false;
var _fn0 = _x[0];
_fn0(a, b, c, (_err0, _result0) => {
if(_err0) {
onError(0, _err0);
} else {
if(_result0 !== undefined) {
_loop = true;
if(_loopAsync) _looper();
} else {
var _fn1 = _x[1];
var _hasResult1 = false;
var _promise1 = _fn1(a, b, c);
if (!_promise1 || !_promise1.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise1 + ')');
_promise1.then(_result1 => {
_hasResult1 = true;
if(_result1 !== undefined) {
_loop = true;
if(_loopAsync) _looper();
} else {
var _fn2 = _x[2];
var _hasError2 = false;
try {
var _result2 = _fn2(a, b, c);
} catch(_err) {
_hasError2 = true;
onError(2, _err);
}
if(!_hasError2) {
if(_result2 !== undefined) {
_loop = true;
if(_loopAsync) _looper();
} else {
if(!_loop) {
onDone();
}
}
}
}
}, _err1 => {
if(_hasResult1) throw _err1;
onError(1, _err1);
});
}
}
});
} while(_loop);
_loopAsync = true;
};
_looper();
"
`;

exports[`HookCodeFactory taps (mixed2) callTapsParallel 1`] = `
"do {
var _counter = 3;
var _done = () => {
onDone();
};
if(_counter <= 0) break;
var _fn0 = _x[0];
_fn0(a, b, c, (_err0, _result0) => {
if(_err0) {
if(_counter > 0) {
onError(0, _err0);
}
} else {
if(_counter > 0) {
onResult(0, _result0, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
}
});
if(_counter <= 0) break;
var _fn1 = _x[1];
var _hasResult1 = false;
var _promise1 = _fn1(a, b, c);
if (!_promise1 || !_promise1.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise1 + ')');
_promise1.then(_result1 => {
_hasResult1 = true;
if(_counter > 0) {
onResult(1, _result1, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
}, _err1 => {
if(_hasResult1) throw _err1;
if(_counter > 0) {
onError(1, _err1);
}
});
if(_counter <= 0) break;
var _fn2 = _x[2];
var _result2 = _fn2(a, b, c);
if(_counter > 0) {
onResult(2, _result2, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
} while(false);
"
`;

exports[`HookCodeFactory taps (mixed2) callTapsSeries 1`] = `
"var _fn0 = _x[0];
_fn0(a, b, c, (_err0, _result0) => {
if(_err0) {
onError(0, _err0);
} else {
onResult(0, _result0, () => {
var _fn1 = _x[1];
var _hasResult1 = false;
var _promise1 = _fn1(a, b, c);
if (!_promise1 || !_promise1.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise1 + ')');
_promise1.then(_result1 => {
_hasResult1 = true;
onResult(1, _result1, () => {
var _fn2 = _x[2];
var _hasError2 = false;
try {
var _result2 = _fn2(a, b, c);
} catch(_err) {
_hasError2 = true;
onError(2, _err);
}
if(!_hasError2) {
onResult(2, _result2, () => {
onDone();
}, () => {
onDone();
});
}
}, () => {
onDone();
});
}, _err1 => {
if(_hasResult1) throw _err1;
onError(1, _err1);
});
}, () => {
onDone();
});
}
});
"
`;

exports[`HookCodeFactory taps (multiple sync) callTapsLooping 1`] = `
"var _loop;
do {
_loop = false;
var _fn0 = _x[0];
var _result0 = _fn0(a, b, c);
if(_result0 !== undefined) {
_loop = true;
} else {
var _fn1 = _x[1];
var _result1 = _fn1(a, b, c);
if(_result1 !== undefined) {
_loop = true;
} else {
var _fn2 = _x[2];
var _result2 = _fn2(a, b, c);
if(_result2 !== undefined) {
_loop = true;
} else {
if(!_loop) {
onDone();
}
}
}
}
} while(_loop);
"
`;

exports[`HookCodeFactory taps (multiple sync) callTapsParallel 1`] = `
"do {
var _counter = 3;
var _done = () => {
onDone();
};
if(_counter <= 0) break;
var _fn0 = _x[0];
var _result0 = _fn0(a, b, c);
if(_counter > 0) {
onResult(0, _result0, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
if(_counter <= 0) break;
var _fn1 = _x[1];
var _result1 = _fn1(a, b, c);
if(_counter > 0) {
onResult(1, _result1, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
if(_counter <= 0) break;
var _fn2 = _x[2];
var _result2 = _fn2(a, b, c);
if(_counter > 0) {
onResult(2, _result2, () => {
if(--_counter === 0) _done();
}, () => {
_counter = 0;
_done();
});
}
} while(false);
"
`;

exports[`HookCodeFactory taps (multiple sync) callTapsSeries 1`] = `
"var _fn0 = _x[0];
var _result0 = _fn0(a, b, c);
onResult(0, _result0, () => {
var _fn1 = _x[1];
var _result1 = _fn1(a, b, c);
onResult(1, _result1, () => {
var _fn2 = _x[2];
var _result2 = _fn2(a, b, c);
onResult(2, _result2, () => {
onDone();
}, () => {
onDone();
});
}, () => {
onDone();
});
}, () => {
onDone();
});
"
`;

exports[`HookCodeFactory taps (none) callTapsLooping 1`] = `
"onDone();
"
`;

exports[`HookCodeFactory taps (none) callTapsParallel 1`] = `
"onDone();
"
`;

exports[`HookCodeFactory taps (none) callTapsSeries 1`] = `
"onDone();
"
`;

exports[`HookCodeFactory taps (single async) callTapsLooping 1`] = `
"var _looper = () => {
var _loopAsync = false;
var _loop;
do {
_loop = false;
var _fn0 = _x[0];
_fn0(a, b, c, (_err0, _result0) => {
if(_err0) {
onError(0, _err0);
} else {
if(_result0 !== undefined) {
_loop = true;
if(_loopAsync) _looper();
} else {
if(!_loop) {
onDone();
}
}
}
});
} while(_loop);
_loopAsync = true;
};
_looper();
"
`;

exports[`HookCodeFactory taps (single async) callTapsParallel 1`] = `
"var _fn0 = _x[0];
_fn0(a, b, c, (_err0, _result0) => {
if(_err0) {
onError(0, _err0);
} else {
onResult(0, _result0, () => {
onDone();
}, () => {
onDone();
});
}
});
"
`;

exports[`HookCodeFactory taps (single async) callTapsSeries 1`] = `
"var _fn0 = _x[0];
_fn0(a, b, c, (_err0, _result0) => {
if(_err0) {
onError(0, _err0);
} else {
onResult(0, _result0, () => {
onDone();
}, () => {
onDone();
});
}
});
"
`;

exports[`HookCodeFactory taps (single promise) callTapsLooping 1`] = `
"var _looper = () => {
var _loopAsync = false;
var _loop;
do {
_loop = false;
var _fn0 = _x[0];
var _hasResult0 = false;
var _promise0 = _fn0(a, b, c);
if (!_promise0 || !_promise0.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise0 + ')');
_promise0.then(_result0 => {
_hasResult0 = true;
if(_result0 !== undefined) {
_loop = true;
if(_loopAsync) _looper();
} else {
if(!_loop) {
onDone();
}
}
}, _err0 => {
if(_hasResult0) throw _err0;
onError(0, _err0);
});
} while(_loop);
_loopAsync = true;
};
_looper();
"
`;

exports[`HookCodeFactory taps (single promise) callTapsParallel 1`] = `
"var _fn0 = _x[0];
var _hasResult0 = false;
var _promise0 = _fn0(a, b, c);
if (!_promise0 || !_promise0.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise0 + ')');
_promise0.then(_result0 => {
_hasResult0 = true;
onResult(0, _result0, () => {
onDone();
}, () => {
onDone();
});
}, _err0 => {
if(_hasResult0) throw _err0;
onError(0, _err0);
});
"
`;

exports[`HookCodeFactory taps (single promise) callTapsSeries 1`] = `
"var _fn0 = _x[0];
var _hasResult0 = false;
var _promise0 = _fn0(a, b, c);
if (!_promise0 || !_promise0.then)
  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise0 + ')');
_promise0.then(_result0 => {
_hasResult0 = true;
onResult(0, _result0, () => {
onDone();
}, () => {
onDone();
});
}, _err0 => {
if(_hasResult0) throw _err0;
onError(0, _err0);
});
"
`;

exports[`HookCodeFactory taps (single sync) callTapsLooping 1`] = `
"var _loop;
do {
_loop = false;
var _fn0 = _x[0];
var _result0 = _fn0(a, b, c);
if(_result0 !== undefined) {
_loop = true;
} else {
if(!_loop) {
onDone();
}
}
} while(_loop);
"
`;

exports[`HookCodeFactory taps (single sync) callTapsParallel 1`] = `
"var _fn0 = _x[0];
var _result0 = _fn0(a, b, c);
onResult(0, _result0, () => {
onDone();
}, () => {
onDone();
});
"
`;

exports[`HookCodeFactory taps (single sync) callTapsSeries 1`] = `
"var _fn0 = _x[0];
var _result0 = _fn0(a, b, c);
onResult(0, _result0, () => {
onDone();
}, () => {
onDone();
});
"
`;
