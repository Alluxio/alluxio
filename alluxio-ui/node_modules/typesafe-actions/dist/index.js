'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function action(type, payload, meta) {
    return { type: type, payload: payload, meta: meta };
}

function validateActionType(arg, idx) {
    if (idx === void 0) { idx = 1; }
    if (arg == null) {
        throw new Error("Argument (#" + idx + ") is missing");
    }
    else {
        if (typeof arg !== 'string' && typeof arg !== 'symbol') {
            throw new Error("Argument (#" + idx + ") should be of type: string | symbol");
        }
    }
}

function createAction(actionType, actionResolverHandler) {
    validateActionType(actionType);
    var actionCreator = actionResolverHandler == null
        ? (function () { return action(actionType); })
        : actionResolverHandler(action.bind(null, actionType));
    return Object.assign(actionCreator, {
        getType: function () { return actionType; },
        toString: function () { return actionType; },
    });
}

function createCustomAction(type, actionCreatorHandler) {
    var actionCreator = actionCreatorHandler != null
        ? actionCreatorHandler(type)
        : (function () { return ({ type: type }); });
    return Object.assign(actionCreator, {
        getType: function () { return type; },
        toString: function () { return type; },
    });
}

function createStandardAction(actionType) {
    validateActionType(actionType);
    function constructor() {
        return createCustomAction(actionType, function (type) { return function (payload, meta) { return ({
            type: type,
            payload: payload,
            meta: meta,
        }); }; });
    }
    function map(fn) {
        return createCustomAction(actionType, function (type) { return function (payload, meta) {
            return Object.assign(fn(payload, meta), { type: type });
        }; });
    }
    return Object.assign(constructor, { map: map });
}

function createAsyncAction(requestType, successType, failureType) {
    [requestType, successType, failureType].forEach(function (arg, idx) {
        validateActionType(arg, idx + 1);
    });
    function constructor() {
        return {
            request: createCustomAction(requestType, function (type) { return function (payload) { return ({
                type: requestType,
                payload: payload,
            }); }; }),
            success: createCustomAction(successType, function (type) { return function (payload) { return ({
                type: successType,
                payload: payload,
            }); }; }),
            failure: createCustomAction(failureType, function (type) { return function (payload) { return ({
                type: failureType,
                payload: payload,
            }); }; }),
        };
    }
    return Object.assign(constructor, {});
}

function getType(creator) {
    if (creator == null) {
        throw new Error('first argument is missing');
    }
    if (creator.getType == null) {
        throw new Error('first argument is not an instance of "typesafe-actions"');
    }
    return creator.getType();
}

function isOfType(actionType, actionOrNil) {
    Array.isArray(actionType)
        ? actionType.forEach(function (type) { return validateActionType(type); })
        : validateActionType(actionType);
    var assertFn = Array.isArray(actionType)
        ? function (action) { return actionType.includes(action.type); }
        : function (action) { return action.type === actionType; };
    if (actionOrNil == null) {
        return assertFn;
    }
    return assertFn(actionOrNil);
}

function isActionOf(creatorOrCreators, actionOrNil) {
    if (creatorOrCreators == null) {
        throw new Error('first argument is missing');
    }
    if (Array.isArray(creatorOrCreators)) {
        creatorOrCreators.forEach(function (actionCreator, index) {
            if (actionCreator.getType == null) {
                throw new Error("first argument contains element\n        that is not created with \"typesafe-actions\" at index [" + index + "]");
            }
        });
    }
    else {
        if (creatorOrCreators.getType == null) {
            throw new Error('first argument is not created with "typesafe-actions"');
        }
    }
    var assertFn = function (action) {
        var actionCreators = Array.isArray(creatorOrCreators)
            ? creatorOrCreators
            : [creatorOrCreators];
        return actionCreators.some(function (actionCreator, index) {
            return actionCreator.getType() === action.type;
        });
    };
    if (actionOrNil == null) {
        return assertFn;
    }
    return assertFn(actionOrNil);
}

function createActionDeprecated(actionType, creatorFunction) {
    var actionCreator;
    if (creatorFunction != null) {
        if (typeof creatorFunction !== 'function') {
            throw new Error('second argument is not a function');
        }
        actionCreator = creatorFunction;
    }
    else {
        actionCreator = (function () { return ({ type: actionType }); });
    }
    if (actionType != null) {
        if (typeof actionType !== 'string' && typeof actionType !== 'symbol') {
            throw new Error('first argument should be type of: string | symbol');
        }
    }
    else {
        throw new Error('first argument is missing');
    }
    return actionCreator;
}

exports.action = action;
exports.createAction = createAction;
exports.createStandardAction = createStandardAction;
exports.createCustomAction = createCustomAction;
exports.createAsyncAction = createAsyncAction;
exports.getType = getType;
exports.isOfType = isOfType;
exports.isActionOf = isActionOf;
exports.createActionDeprecated = createActionDeprecated;
