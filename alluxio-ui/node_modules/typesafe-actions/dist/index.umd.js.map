{"version":3,"file":"index.umd.js","sources":["../src/action.ts","../src/utils/utils.ts","../src/create-custom-action.ts","../src/create-action.ts","../src/create-standard-action.ts","../src/create-async-action.ts","../src/get-type.ts","../src/is-of-type.ts","../src/is-action-of.ts","../src/create-action-deprecated.ts"],"sourcesContent":["import {\n  StringType,\n  EmptyAction,\n  PayloadAction,\n  PayloadMetaAction,\n} from './types';\n\nexport function action<T extends StringType>(type: T): EmptyAction<T>;\n\nexport function action<T extends StringType, P = undefined>(\n  type: T,\n  payload: P\n): PayloadAction<T, P>;\n\nexport function action<T extends StringType, P = undefined, M = undefined>(\n  type: T,\n  payload: P,\n  meta: M\n): PayloadMetaAction<T, P, M>;\n\n/**\n * @description flux standard action factory\n * @example\n * ```\n * const add = (amount: number, meta?: MetaShape) => action('INCREMENT', amount, meta);\n * ```\n */\nexport function action<T extends StringType, P = undefined, M = undefined>(\n  type: T,\n  payload?: P,\n  meta?: M\n) {\n  return { type, payload, meta } as any;\n}\n","/** @internal */\nexport function validateActionType(arg: any, idx: number = 1): void {\n  if (arg == null) {\n    throw new Error(`Argument (#${idx}) is missing`);\n  } else {\n    if (typeof arg !== 'string' && typeof arg !== 'symbol') {\n      throw new Error(`Argument (#${idx}) should be of type: string | symbol`);\n    }\n  }\n}\n","import { ActionCreator, StringOrSymbol } from './types';\n\n/**\n * @description create custom action-creator using constructor function with injected type argument\n */\nexport function createCustomAction<\n  T extends StringOrSymbol,\n  AC extends ActionCreator<T> = () => { type: T }\n>(type: T, actionCreatorHandler?: (type: T) => AC): AC {\n  const actionCreator: AC =\n    actionCreatorHandler != null\n      ? actionCreatorHandler(type)\n      : ((() => ({ type })) as AC);\n\n  return Object.assign(actionCreator, {\n    getType: () => type,\n    // redux-actions compatibility\n    toString: () => type,\n  });\n}\n","import { StringType, ActionCreator } from './types';\nimport { validateActionType } from './utils/utils';\nimport { action } from './action';\n\nexport type PayloadMetaAction<T extends StringType, P, M> = P extends undefined\n  ? M extends undefined\n    ? { type: T }\n    : { type: T; meta: M }\n  : M extends undefined\n  ? { type: T; payload: P }\n  : { type: T; payload: P; meta: M };\n\n/**\n * @description typesafe action-creator factory\n */\nexport function createAction<\n  T extends StringType,\n  AC extends ActionCreator<T> = () => { type: T }\n>(\n  actionType: T,\n  actionResolverHandler?: (\n    resolve: <P = undefined, M = undefined>(\n      payload?: P,\n      meta?: M\n    ) => PayloadMetaAction<T, P, M>\n  ) => AC\n): AC {\n  validateActionType(actionType);\n\n  const actionCreator: AC =\n    actionResolverHandler == null\n      ? ((() => action(actionType)) as AC)\n      : actionResolverHandler(action.bind(null, actionType) as Parameters<\n          typeof actionResolverHandler\n        >[0]);\n\n  return Object.assign(actionCreator, {\n    getType: () => actionType,\n    // redux-actions compatibility\n    toString: () => actionType,\n  });\n}\n","import { StringType, Box, FsaBuilder, FsaMapBuilder } from './types';\nimport { createCustomAction } from './create-custom-action';\nimport { validateActionType } from './utils/utils';\n\nexport interface CreateStandardAction<T extends StringType> {\n  <P = void, M = void>(): FsaBuilder<T, Box<P>, Box<M>>;\n  map<R, P = void, M = void>(\n    fn: (payload: P, meta: M) => R\n  ): FsaMapBuilder<T, Box<R>, Box<P>, Box<M>>;\n}\n\n/**\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createStandardAction<T extends StringType>(\n  actionType: T\n): CreateStandardAction<T> {\n  validateActionType(actionType);\n\n  function constructor<P, M = void>(): FsaBuilder<T, Box<P>, Box<M>> {\n    return createCustomAction(actionType, type => (payload: P, meta: M) => ({\n      type,\n      payload,\n      meta,\n    })) as FsaBuilder<T, Box<P>, Box<M>>;\n  }\n\n  function map<R, P, M>(\n    fn: (payload: P, meta: M) => R\n  ): FsaMapBuilder<T, Box<R>, Box<P>, Box<M>> {\n    return createCustomAction(actionType, type => (payload: P, meta: M) =>\n      Object.assign(fn(payload, meta), { type })\n    ) as FsaMapBuilder<T, Box<R>, Box<P>, Box<M>>;\n  }\n\n  return Object.assign(constructor, { map });\n}\n","import { StringType, Box, FsaMapBuilder, FsaBuilder } from './types';\nimport { createCustomAction } from './create-custom-action';\nimport { validateActionType } from './utils/utils';\n\nexport interface CreateAsyncAction<\n  T1 extends StringType,\n  T2 extends StringType,\n  T3 extends StringType\n> {\n  // tslint:disable-next-line:callable-types\n  <P1, P2, P3>(): AsyncActionBuilder<T1, T2, T3, P1, P2, P3>;\n  // withMappers<A1 = void, P1 = void, A2 = void, P2 = void, A3 = void, P3 = void>(\n  //   requestMapper: (a?: A1) => P1,\n  //   successMapper: (a?: A2) => P2,\n  //   failureMapper: (a?: A3) => P3\n  // ): AsyncActionWithMappers<T1, T2, T3, A1, P1, A2, P2, A3, P3>;\n}\n\nexport type AsyncActionBuilder<\n  T1 extends StringType,\n  T2 extends StringType,\n  T3 extends StringType,\n  P1,\n  P2,\n  P3\n> = {\n  request: FsaBuilder<T1, Box<P1>>;\n  success: FsaBuilder<T2, Box<P2>>;\n  failure: FsaBuilder<T3, Box<P3>>;\n};\n\nexport type AsyncActionWithMappers<\n  T1 extends StringType,\n  T2 extends StringType,\n  T3 extends StringType,\n  A1 = void,\n  P1 = void,\n  A2 = void,\n  P2 = void,\n  A3 = void,\n  P3 = void\n> = {\n  request: FsaMapBuilder<T1, Box<A1>, Box<P1>>;\n  success: FsaMapBuilder<T2, Box<A2>, Box<P2>>;\n  failure: FsaMapBuilder<T3, Box<A3>, Box<P3>>;\n};\n\n/** implementation */\nexport function createAsyncAction<\n  T1 extends StringType,\n  T2 extends StringType,\n  T3 extends StringType\n>(\n  requestType: T1,\n  successType: T2,\n  failureType: T3\n): CreateAsyncAction<T1, T2, T3> {\n  [requestType, successType, failureType].forEach((arg, idx) => {\n    validateActionType(arg, idx + 1);\n  });\n\n  function constructor<P1, P2, P3>(): AsyncActionBuilder<\n    T1,\n    T2,\n    T3,\n    P1,\n    P2,\n    P3\n  > {\n    return {\n      request: createCustomAction(requestType, type => (payload?: P1) => ({\n        type: requestType,\n        payload,\n      })) as FsaBuilder<T1, Box<P1>>,\n      success: createCustomAction(successType, type => (payload?: P2) => ({\n        type: successType,\n        payload,\n      })) as FsaBuilder<T2, Box<P2>>,\n      failure: createCustomAction(failureType, type => (payload?: P3) => ({\n        type: failureType,\n        payload,\n      })) as FsaBuilder<T3, Box<P3>>,\n    };\n  }\n\n  // function withMappers<A1, P1, A2, P2, A3, P3>(\n  //   requestMapper: (a?: A1) => P1,\n  //   successMapper: (a?: A2) => P2,\n  //   failureMapper: (a?: A3) => P3\n  // ): AsyncActionWithMappers<T1, T2, T3, A1, P1, A2, P2, A3, P3> {\n  //   return {\n  //     request: createCustomAction(requestType, type => (payload?: A1) => ({\n  //       type,\n  //       payload: requestMapper != null ? requestMapper(payload) : undefined,\n  //     })) as MapBuilder<T1, B<A1>, B<P1>>,\n  //     success: createCustomAction(successType, type => (payload?: A2) => ({\n  //       type,\n  //       payload: successMapper != null ? successMapper(payload) : undefined,\n  //     })) as MapBuilder<T2, B<A2>, B<P2>>,\n  //     failure: createCustomAction(failureType, type => (payload?: A3) => ({\n  //       type,\n  //       payload: failureMapper != null ? failureMapper(payload) : undefined,\n  //     })) as MapBuilder<T3, B<A3>, B<P3>>,\n  //   };\n  // }\n\n  return Object.assign(constructor, {});\n}\n","import { StringType, ActionCreator, TypeMeta } from './types';\n\n/**\n * @description get the \"type literal\" of a given action-creator\n */\nexport function getType<T extends StringType>(\n  creator: ActionCreator<T> & TypeMeta<T>\n): T {\n  if (creator == null) {\n    throw new Error('first argument is missing');\n  }\n\n  if (creator.getType == null) {\n    throw new Error('first argument is not an instance of \"typesafe-actions\"');\n  }\n\n  return creator.getType();\n}\n","import { StringType } from './types';\nimport { validateActionType } from './utils/utils';\n/**\n * @description (curried assert function) check if action type is equal given type-constant\n * @description it works with discriminated union types\n */\nexport function isOfType<T extends StringType, A extends { type: StringType }>(\n  type: T,\n  action: A\n): action is A extends { type: T } ? A : never;\n\n/**\n * @description (curried assert function) check if action type is equal given type-constant\n * @description it works with discriminated union types\n */\nexport function isOfType<\n  T extends K[],\n  K extends StringType,\n  A extends { type: StringType }\n>(type: T, action: A): action is A extends { type: T[number] } ? A : never;\n\n/**\n * @description (curried assert function) check if action type is equal given type-constant\n * @description it works with discriminated union types\n */\nexport function isOfType<T extends StringType>(\n  type: T\n): <A extends { type: StringType }>(\n  action: A\n) => action is A extends { type: T } ? A : never;\n\n/**\n * @description (curried assert function) check if action type is equal given type-constant\n * @description it works with discriminated union types\n */\nexport function isOfType<T extends K[], K extends StringType>(\n  type: T\n): <A extends { type: StringType }>(\n  action: A\n) => action is A extends { type: T[number] } ? A : never;\n\n/** implementation */\nexport function isOfType<\n  T extends StringType | StringType[],\n  A extends { type: StringType }\n>(actionType: T, actionOrNil?: A) {\n  Array.isArray(actionType)\n    ? actionType.forEach(type => validateActionType(type))\n    : validateActionType(actionType);\n\n  const assertFn = Array.isArray(actionType)\n    ? (action: A) => actionType.includes(action.type)\n    : (action: A) => action.type === actionType;\n\n  // with 1 arg return assertFn\n  if (actionOrNil == null) {\n    return assertFn;\n  }\n  // with 2 args invoke assertFn and return the result\n  return assertFn(actionOrNil);\n}\n","import { TypeMeta } from './types';\n\nexport type ActionCreator<T extends { type: string }> = ((\n  ...args: any[]\n) => T) &\n  TypeMeta<T['type']>;\n\n/**\n * @description (curried assert function) check if an action is the instance of given action-creator(s)\n * @description it works with discriminated union types\n */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  actionCreator: AC | AC[],\n  action: { type: string }\n): action is ReturnType<AC>;\n\n/**\n * @description (curried assert function) check if an action is the instance of given action-creator(s)\n * @description it works with discriminated union types\n */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  actionCreator: AC | AC[]\n): (action: { type: string }) => action is ReturnType<AC>;\n\n/** implementation */\nexport function isActionOf<AC extends ActionCreator<{ type: string }>>(\n  creatorOrCreators: AC | AC[],\n  actionOrNil?: { type: string }\n) {\n  if (creatorOrCreators == null) {\n    throw new Error('first argument is missing');\n  }\n\n  if (Array.isArray(creatorOrCreators)) {\n    (creatorOrCreators as any[]).forEach((actionCreator, index) => {\n      if (actionCreator.getType == null) {\n        throw new Error(`first argument contains element\n        that is not created with \"typesafe-actions\" at index [${index}]`);\n      }\n    });\n  } else {\n    if (creatorOrCreators.getType == null) {\n      throw new Error('first argument is not created with \"typesafe-actions\"');\n    }\n  }\n\n  const assertFn = (action: { type: string }) => {\n    const actionCreators: any[] = Array.isArray(creatorOrCreators)\n      ? creatorOrCreators\n      : [creatorOrCreators];\n\n    return actionCreators.some((actionCreator, index) => {\n      return actionCreator.getType() === action.type;\n    });\n  };\n\n  // with 1 arg return assertFn\n  if (actionOrNil == null) {\n    return assertFn;\n  }\n  // with 2 args invoke assertFn and return the result\n  return assertFn(actionOrNil);\n}\n","import { StringOrSymbol } from './types';\n\nexport interface FSA<T extends StringOrSymbol, P = {}, M = {}, E = boolean> {\n  type: T;\n  payload?: P;\n  meta?: M;\n  error?: E;\n}\n\n/**\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createActionDeprecated<\n  T extends StringOrSymbol,\n  AC extends (...args: any[]) => FSA<T>\n>(actionType: T, creatorFunction: AC): AC;\n\n/**\n * @description create an action-creator of a given function that contains hidden \"type\" metadata\n */\nexport function createActionDeprecated<\n  T extends StringOrSymbol,\n  AC extends () => { type: T }\n>(actionType: T): AC;\n\n/**\n *  implementation\n */\nexport function createActionDeprecated<\n  T extends StringOrSymbol,\n  AC extends (...args: any[]) => FSA<T>\n>(actionType: T, creatorFunction?: AC): AC {\n  let actionCreator: AC;\n\n  if (creatorFunction != null) {\n    if (typeof creatorFunction !== 'function') {\n      throw new Error('second argument is not a function');\n    }\n\n    actionCreator = creatorFunction as AC;\n  } else {\n    actionCreator = (() => ({ type: actionType })) as AC;\n  }\n\n  if (actionType != null) {\n    if (typeof actionType !== 'string' && typeof actionType !== 'symbol') {\n      throw new Error('first argument should be type of: string | symbol');\n    }\n  } else {\n    throw new Error('first argument is missing');\n  }\n\n  return actionCreator;\n}\n"],"names":["action","type","payload","meta","validateActionType","arg","idx","Error","createCustomAction","actionCreatorHandler","actionCreator","Object","assign","getType","toString","actionType","actionResolverHandler","bind","map","fn","requestType","successType","failureType","forEach","request","success","failure","creator","actionOrNil","Array","isArray","assertFn","includes","creatorOrCreators","index","some","creatorFunction"],"mappings":"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"}