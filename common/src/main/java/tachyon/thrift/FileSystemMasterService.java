/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-29")
public class FileSystemMasterService {

  public interface Iface {

    public Set<Long> workerGetPinIdList() throws org.apache.thrift.TException;

    public long getFileId(String path) throws InvalidPathException, org.apache.thrift.TException;

    public FileInfo getFileInfo(long fileId) throws FileDoesNotExistException, org.apache.thrift.TException;

    public List<FileInfo> getFileInfoList(long fileId) throws FileDoesNotExistException, org.apache.thrift.TException;

    public FileBlockInfo getFileBlockInfo(long fileId, int fileBlockIndex) throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException;

    public List<FileBlockInfo> getFileBlockInfoList(long fileId) throws FileDoesNotExistException, org.apache.thrift.TException;

    public long getNewBlockIdForFile(long fileId) throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException;

    public String getUfsAddress() throws org.apache.thrift.TException;

    public long createFile(String path, long blockSizeBytes, boolean recursive, long ttl) throws FileAlreadyExistException, BlockInfoException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException;

    public void completeFile(long fileId) throws BlockInfoException, FileDoesNotExistException, InvalidPathException, org.apache.thrift.TException;

    public boolean deleteFile(long fileId, boolean recursive) throws TachyonException, org.apache.thrift.TException;

    public boolean renameFile(long fileId, String dstPath) throws FileAlreadyExistException, FileDoesNotExistException, InvalidPathException, org.apache.thrift.TException;

    public void setPinned(long fileId, boolean pinned) throws FileDoesNotExistException, org.apache.thrift.TException;

    public boolean createDirectory(String path, boolean recursive) throws FileAlreadyExistException, InvalidPathException, org.apache.thrift.TException;

    public boolean free(long fileId, boolean recursive) throws FileDoesNotExistException, org.apache.thrift.TException;

    public boolean persistFile(long fileId, long length) throws FileDoesNotExistException, SuspectedFileSizeException, BlockInfoException, org.apache.thrift.TException;

    /**
     * Loads metadata for the file identified by the given Tachyon path from UFS into Tachyon.
     * 
     * @param ufsPath
     * @param recursive
     */
    public long loadFileInfoFromUfs(String ufsPath, boolean recursive) throws BlockInfoException, FileDoesNotExistException, FileAlreadyExistException, InvalidPathException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException;

    /**
     * Creates a new "mount point", mounts the given UFS path in the Tachyon namespace at the given
     * path. The path should not exist and should not be nested under any existing mount point.
     * 
     * @param tachyonPath
     * @param ufsPath
     */
    public boolean mount(String tachyonPath, String ufsPath) throws TachyonException, org.apache.thrift.TException;

    /**
     * Deletes an existing "mount point", voiding the Tachyon namespace at the given path. The path
     * should correspond to an existing mount point. Any files in its subtree that are backed by UFS
     * will be persisted before they are removed from the Tachyon namespace.
     * 
     * @param tachyonPath
     */
    public boolean unmount(String tachyonPath) throws TachyonException, org.apache.thrift.TException;

    public void reportLostFile(long fileId) throws FileDoesNotExistException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void workerGetPinIdList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFileId(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFileInfo(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFileInfoList(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFileBlockInfo(long fileId, int fileBlockIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFileBlockInfoList(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewBlockIdForFile(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUfsAddress(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createFile(String path, long blockSizeBytes, boolean recursive, long ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void completeFile(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFile(long fileId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void renameFile(long fileId, String dstPath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setPinned(long fileId, boolean pinned, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createDirectory(String path, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void free(long fileId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void persistFile(long fileId, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadFileInfoFromUfs(String ufsPath, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void mount(String tachyonPath, String ufsPath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unmount(String tachyonPath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reportLostFile(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Set<Long> workerGetPinIdList() throws org.apache.thrift.TException
    {
      send_workerGetPinIdList();
      return recv_workerGetPinIdList();
    }

    public void send_workerGetPinIdList() throws org.apache.thrift.TException
    {
      workerGetPinIdList_args args = new workerGetPinIdList_args();
      sendBase("workerGetPinIdList", args);
    }

    public Set<Long> recv_workerGetPinIdList() throws org.apache.thrift.TException
    {
      workerGetPinIdList_result result = new workerGetPinIdList_result();
      receiveBase(result, "workerGetPinIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "workerGetPinIdList failed: unknown result");
    }

    public long getFileId(String path) throws InvalidPathException, org.apache.thrift.TException
    {
      send_getFileId(path);
      return recv_getFileId();
    }

    public void send_getFileId(String path) throws org.apache.thrift.TException
    {
      getFileId_args args = new getFileId_args();
      args.setPath(path);
      sendBase("getFileId", args);
    }

    public long recv_getFileId() throws InvalidPathException, org.apache.thrift.TException
    {
      getFileId_result result = new getFileId_result();
      receiveBase(result, "getFileId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileId failed: unknown result");
    }

    public FileInfo getFileInfo(long fileId) throws FileDoesNotExistException, org.apache.thrift.TException
    {
      send_getFileInfo(fileId);
      return recv_getFileInfo();
    }

    public void send_getFileInfo(long fileId) throws org.apache.thrift.TException
    {
      getFileInfo_args args = new getFileInfo_args();
      args.setFileId(fileId);
      sendBase("getFileInfo", args);
    }

    public FileInfo recv_getFileInfo() throws FileDoesNotExistException, org.apache.thrift.TException
    {
      getFileInfo_result result = new getFileInfo_result();
      receiveBase(result, "getFileInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileInfo failed: unknown result");
    }

    public List<FileInfo> getFileInfoList(long fileId) throws FileDoesNotExistException, org.apache.thrift.TException
    {
      send_getFileInfoList(fileId);
      return recv_getFileInfoList();
    }

    public void send_getFileInfoList(long fileId) throws org.apache.thrift.TException
    {
      getFileInfoList_args args = new getFileInfoList_args();
      args.setFileId(fileId);
      sendBase("getFileInfoList", args);
    }

    public List<FileInfo> recv_getFileInfoList() throws FileDoesNotExistException, org.apache.thrift.TException
    {
      getFileInfoList_result result = new getFileInfoList_result();
      receiveBase(result, "getFileInfoList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileInfoList failed: unknown result");
    }

    public FileBlockInfo getFileBlockInfo(long fileId, int fileBlockIndex) throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException
    {
      send_getFileBlockInfo(fileId, fileBlockIndex);
      return recv_getFileBlockInfo();
    }

    public void send_getFileBlockInfo(long fileId, int fileBlockIndex) throws org.apache.thrift.TException
    {
      getFileBlockInfo_args args = new getFileBlockInfo_args();
      args.setFileId(fileId);
      args.setFileBlockIndex(fileBlockIndex);
      sendBase("getFileBlockInfo", args);
    }

    public FileBlockInfo recv_getFileBlockInfo() throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException
    {
      getFileBlockInfo_result result = new getFileBlockInfo_result();
      receiveBase(result, "getFileBlockInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      if (result.bie != null) {
        throw result.bie;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileBlockInfo failed: unknown result");
    }

    public List<FileBlockInfo> getFileBlockInfoList(long fileId) throws FileDoesNotExistException, org.apache.thrift.TException
    {
      send_getFileBlockInfoList(fileId);
      return recv_getFileBlockInfoList();
    }

    public void send_getFileBlockInfoList(long fileId) throws org.apache.thrift.TException
    {
      getFileBlockInfoList_args args = new getFileBlockInfoList_args();
      args.setFileId(fileId);
      sendBase("getFileBlockInfoList", args);
    }

    public List<FileBlockInfo> recv_getFileBlockInfoList() throws FileDoesNotExistException, org.apache.thrift.TException
    {
      getFileBlockInfoList_result result = new getFileBlockInfoList_result();
      receiveBase(result, "getFileBlockInfoList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileBlockInfoList failed: unknown result");
    }

    public long getNewBlockIdForFile(long fileId) throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException
    {
      send_getNewBlockIdForFile(fileId);
      return recv_getNewBlockIdForFile();
    }

    public void send_getNewBlockIdForFile(long fileId) throws org.apache.thrift.TException
    {
      getNewBlockIdForFile_args args = new getNewBlockIdForFile_args();
      args.setFileId(fileId);
      sendBase("getNewBlockIdForFile", args);
    }

    public long recv_getNewBlockIdForFile() throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException
    {
      getNewBlockIdForFile_result result = new getNewBlockIdForFile_result();
      receiveBase(result, "getNewBlockIdForFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      if (result.bie != null) {
        throw result.bie;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewBlockIdForFile failed: unknown result");
    }

    public String getUfsAddress() throws org.apache.thrift.TException
    {
      send_getUfsAddress();
      return recv_getUfsAddress();
    }

    public void send_getUfsAddress() throws org.apache.thrift.TException
    {
      getUfsAddress_args args = new getUfsAddress_args();
      sendBase("getUfsAddress", args);
    }

    public String recv_getUfsAddress() throws org.apache.thrift.TException
    {
      getUfsAddress_result result = new getUfsAddress_result();
      receiveBase(result, "getUfsAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUfsAddress failed: unknown result");
    }

    public long createFile(String path, long blockSizeBytes, boolean recursive, long ttl) throws FileAlreadyExistException, BlockInfoException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException
    {
      send_createFile(path, blockSizeBytes, recursive, ttl);
      return recv_createFile();
    }

    public void send_createFile(String path, long blockSizeBytes, boolean recursive, long ttl) throws org.apache.thrift.TException
    {
      createFile_args args = new createFile_args();
      args.setPath(path);
      args.setBlockSizeBytes(blockSizeBytes);
      args.setRecursive(recursive);
      args.setTtl(ttl);
      sendBase("createFile", args);
    }

    public long recv_createFile() throws FileAlreadyExistException, BlockInfoException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException
    {
      createFile_result result = new createFile_result();
      receiveBase(result, "createFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.faee != null) {
        throw result.faee;
      }
      if (result.bie != null) {
        throw result.bie;
      }
      if (result.sfse != null) {
        throw result.sfse;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createFile failed: unknown result");
    }

    public void completeFile(long fileId) throws BlockInfoException, FileDoesNotExistException, InvalidPathException, org.apache.thrift.TException
    {
      send_completeFile(fileId);
      recv_completeFile();
    }

    public void send_completeFile(long fileId) throws org.apache.thrift.TException
    {
      completeFile_args args = new completeFile_args();
      args.setFileId(fileId);
      sendBase("completeFile", args);
    }

    public void recv_completeFile() throws BlockInfoException, FileDoesNotExistException, InvalidPathException, org.apache.thrift.TException
    {
      completeFile_result result = new completeFile_result();
      receiveBase(result, "completeFile");
      if (result.bie != null) {
        throw result.bie;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      return;
    }

    public boolean deleteFile(long fileId, boolean recursive) throws TachyonException, org.apache.thrift.TException
    {
      send_deleteFile(fileId, recursive);
      return recv_deleteFile();
    }

    public void send_deleteFile(long fileId, boolean recursive) throws org.apache.thrift.TException
    {
      deleteFile_args args = new deleteFile_args();
      args.setFileId(fileId);
      args.setRecursive(recursive);
      sendBase("deleteFile", args);
    }

    public boolean recv_deleteFile() throws TachyonException, org.apache.thrift.TException
    {
      deleteFile_result result = new deleteFile_result();
      receiveBase(result, "deleteFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFile failed: unknown result");
    }

    public boolean renameFile(long fileId, String dstPath) throws FileAlreadyExistException, FileDoesNotExistException, InvalidPathException, org.apache.thrift.TException
    {
      send_renameFile(fileId, dstPath);
      return recv_renameFile();
    }

    public void send_renameFile(long fileId, String dstPath) throws org.apache.thrift.TException
    {
      renameFile_args args = new renameFile_args();
      args.setFileId(fileId);
      args.setDstPath(dstPath);
      sendBase("renameFile", args);
    }

    public boolean recv_renameFile() throws FileAlreadyExistException, FileDoesNotExistException, InvalidPathException, org.apache.thrift.TException
    {
      renameFile_result result = new renameFile_result();
      receiveBase(result, "renameFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.faee != null) {
        throw result.faee;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "renameFile failed: unknown result");
    }

    public void setPinned(long fileId, boolean pinned) throws FileDoesNotExistException, org.apache.thrift.TException
    {
      send_setPinned(fileId, pinned);
      recv_setPinned();
    }

    public void send_setPinned(long fileId, boolean pinned) throws org.apache.thrift.TException
    {
      setPinned_args args = new setPinned_args();
      args.setFileId(fileId);
      args.setPinned(pinned);
      sendBase("setPinned", args);
    }

    public void recv_setPinned() throws FileDoesNotExistException, org.apache.thrift.TException
    {
      setPinned_result result = new setPinned_result();
      receiveBase(result, "setPinned");
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      return;
    }

    public boolean createDirectory(String path, boolean recursive) throws FileAlreadyExistException, InvalidPathException, org.apache.thrift.TException
    {
      send_createDirectory(path, recursive);
      return recv_createDirectory();
    }

    public void send_createDirectory(String path, boolean recursive) throws org.apache.thrift.TException
    {
      createDirectory_args args = new createDirectory_args();
      args.setPath(path);
      args.setRecursive(recursive);
      sendBase("createDirectory", args);
    }

    public boolean recv_createDirectory() throws FileAlreadyExistException, InvalidPathException, org.apache.thrift.TException
    {
      createDirectory_result result = new createDirectory_result();
      receiveBase(result, "createDirectory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.faee != null) {
        throw result.faee;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createDirectory failed: unknown result");
    }

    public boolean free(long fileId, boolean recursive) throws FileDoesNotExistException, org.apache.thrift.TException
    {
      send_free(fileId, recursive);
      return recv_free();
    }

    public void send_free(long fileId, boolean recursive) throws org.apache.thrift.TException
    {
      free_args args = new free_args();
      args.setFileId(fileId);
      args.setRecursive(recursive);
      sendBase("free", args);
    }

    public boolean recv_free() throws FileDoesNotExistException, org.apache.thrift.TException
    {
      free_result result = new free_result();
      receiveBase(result, "free");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "free failed: unknown result");
    }

    public boolean persistFile(long fileId, long length) throws FileDoesNotExistException, SuspectedFileSizeException, BlockInfoException, org.apache.thrift.TException
    {
      send_persistFile(fileId, length);
      return recv_persistFile();
    }

    public void send_persistFile(long fileId, long length) throws org.apache.thrift.TException
    {
      persistFile_args args = new persistFile_args();
      args.setFileId(fileId);
      args.setLength(length);
      sendBase("persistFile", args);
    }

    public boolean recv_persistFile() throws FileDoesNotExistException, SuspectedFileSizeException, BlockInfoException, org.apache.thrift.TException
    {
      persistFile_result result = new persistFile_result();
      receiveBase(result, "persistFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eP != null) {
        throw result.eP;
      }
      if (result.eS != null) {
        throw result.eS;
      }
      if (result.eB != null) {
        throw result.eB;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "persistFile failed: unknown result");
    }

    public long loadFileInfoFromUfs(String ufsPath, boolean recursive) throws BlockInfoException, FileDoesNotExistException, FileAlreadyExistException, InvalidPathException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException
    {
      send_loadFileInfoFromUfs(ufsPath, recursive);
      return recv_loadFileInfoFromUfs();
    }

    public void send_loadFileInfoFromUfs(String ufsPath, boolean recursive) throws org.apache.thrift.TException
    {
      loadFileInfoFromUfs_args args = new loadFileInfoFromUfs_args();
      args.setUfsPath(ufsPath);
      args.setRecursive(recursive);
      sendBase("loadFileInfoFromUfs", args);
    }

    public long recv_loadFileInfoFromUfs() throws BlockInfoException, FileDoesNotExistException, FileAlreadyExistException, InvalidPathException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException
    {
      loadFileInfoFromUfs_result result = new loadFileInfoFromUfs_result();
      receiveBase(result, "loadFileInfoFromUfs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bie != null) {
        throw result.bie;
      }
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      if (result.faee != null) {
        throw result.faee;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      if (result.sfse != null) {
        throw result.sfse;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadFileInfoFromUfs failed: unknown result");
    }

    public boolean mount(String tachyonPath, String ufsPath) throws TachyonException, org.apache.thrift.TException
    {
      send_mount(tachyonPath, ufsPath);
      return recv_mount();
    }

    public void send_mount(String tachyonPath, String ufsPath) throws org.apache.thrift.TException
    {
      mount_args args = new mount_args();
      args.setTachyonPath(tachyonPath);
      args.setUfsPath(ufsPath);
      sendBase("mount", args);
    }

    public boolean recv_mount() throws TachyonException, org.apache.thrift.TException
    {
      mount_result result = new mount_result();
      receiveBase(result, "mount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mount failed: unknown result");
    }

    public boolean unmount(String tachyonPath) throws TachyonException, org.apache.thrift.TException
    {
      send_unmount(tachyonPath);
      return recv_unmount();
    }

    public void send_unmount(String tachyonPath) throws org.apache.thrift.TException
    {
      unmount_args args = new unmount_args();
      args.setTachyonPath(tachyonPath);
      sendBase("unmount", args);
    }

    public boolean recv_unmount() throws TachyonException, org.apache.thrift.TException
    {
      unmount_result result = new unmount_result();
      receiveBase(result, "unmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unmount failed: unknown result");
    }

    public void reportLostFile(long fileId) throws FileDoesNotExistException, org.apache.thrift.TException
    {
      send_reportLostFile(fileId);
      recv_reportLostFile();
    }

    public void send_reportLostFile(long fileId) throws org.apache.thrift.TException
    {
      reportLostFile_args args = new reportLostFile_args();
      args.setFileId(fileId);
      sendBase("reportLostFile", args);
    }

    public void recv_reportLostFile() throws FileDoesNotExistException, org.apache.thrift.TException
    {
      reportLostFile_result result = new reportLostFile_result();
      receiveBase(result, "reportLostFile");
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void workerGetPinIdList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      workerGetPinIdList_call method_call = new workerGetPinIdList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class workerGetPinIdList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public workerGetPinIdList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("workerGetPinIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        workerGetPinIdList_args args = new workerGetPinIdList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_workerGetPinIdList();
      }
    }

    public void getFileId(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFileId_call method_call = new getFileId_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFileId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      public getFileId_call(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFileId_args args = new getFileId_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws InvalidPathException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFileId();
      }
    }

    public void getFileInfo(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFileInfo_call method_call = new getFileInfo_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFileInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public getFileInfo_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFileInfo_args args = new getFileInfo_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileInfo getResult() throws FileDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFileInfo();
      }
    }

    public void getFileInfoList(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFileInfoList_call method_call = new getFileInfoList_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFileInfoList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public getFileInfoList_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileInfoList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFileInfoList_args args = new getFileInfoList_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FileInfo> getResult() throws FileDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFileInfoList();
      }
    }

    public void getFileBlockInfo(long fileId, int fileBlockIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFileBlockInfo_call method_call = new getFileBlockInfo_call(fileId, fileBlockIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFileBlockInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private int fileBlockIndex;
      public getFileBlockInfo_call(long fileId, int fileBlockIndex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.fileBlockIndex = fileBlockIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileBlockInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFileBlockInfo_args args = new getFileBlockInfo_args();
        args.setFileId(fileId);
        args.setFileBlockIndex(fileBlockIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FileBlockInfo getResult() throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFileBlockInfo();
      }
    }

    public void getFileBlockInfoList(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFileBlockInfoList_call method_call = new getFileBlockInfoList_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFileBlockInfoList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public getFileBlockInfoList_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileBlockInfoList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFileBlockInfoList_args args = new getFileBlockInfoList_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FileBlockInfo> getResult() throws FileDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFileBlockInfoList();
      }
    }

    public void getNewBlockIdForFile(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewBlockIdForFile_call method_call = new getNewBlockIdForFile_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewBlockIdForFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public getNewBlockIdForFile_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewBlockIdForFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewBlockIdForFile_args args = new getNewBlockIdForFile_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNewBlockIdForFile();
      }
    }

    public void getUfsAddress(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUfsAddress_call method_call = new getUfsAddress_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUfsAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUfsAddress_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUfsAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUfsAddress_args args = new getUfsAddress_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUfsAddress();
      }
    }

    public void createFile(String path, long blockSizeBytes, boolean recursive, long ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createFile_call method_call = new createFile_call(path, blockSizeBytes, recursive, ttl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      private long blockSizeBytes;
      private boolean recursive;
      private long ttl;
      public createFile_call(String path, long blockSizeBytes, boolean recursive, long ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.blockSizeBytes = blockSizeBytes;
        this.recursive = recursive;
        this.ttl = ttl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createFile_args args = new createFile_args();
        args.setPath(path);
        args.setBlockSizeBytes(blockSizeBytes);
        args.setRecursive(recursive);
        args.setTtl(ttl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws FileAlreadyExistException, BlockInfoException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createFile();
      }
    }

    public void completeFile(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      completeFile_call method_call = new completeFile_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class completeFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public completeFile_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("completeFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        completeFile_args args = new completeFile_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlockInfoException, FileDoesNotExistException, InvalidPathException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_completeFile();
      }
    }

    public void deleteFile(long fileId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFile_call method_call = new deleteFile_call(fileId, recursive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private boolean recursive;
      public deleteFile_call(long fileId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.recursive = recursive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFile_args args = new deleteFile_args();
        args.setFileId(fileId);
        args.setRecursive(recursive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TachyonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFile();
      }
    }

    public void renameFile(long fileId, String dstPath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renameFile_call method_call = new renameFile_call(fileId, dstPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renameFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private String dstPath;
      public renameFile_call(long fileId, String dstPath, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.dstPath = dstPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renameFile_args args = new renameFile_args();
        args.setFileId(fileId);
        args.setDstPath(dstPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws FileAlreadyExistException, FileDoesNotExistException, InvalidPathException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_renameFile();
      }
    }

    public void setPinned(long fileId, boolean pinned, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPinned_call method_call = new setPinned_call(fileId, pinned, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPinned_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private boolean pinned;
      public setPinned_call(long fileId, boolean pinned, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.pinned = pinned;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPinned", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPinned_args args = new setPinned_args();
        args.setFileId(fileId);
        args.setPinned(pinned);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FileDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setPinned();
      }
    }

    public void createDirectory(String path, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createDirectory_call method_call = new createDirectory_call(path, recursive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createDirectory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      private boolean recursive;
      public createDirectory_call(String path, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.recursive = recursive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createDirectory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createDirectory_args args = new createDirectory_args();
        args.setPath(path);
        args.setRecursive(recursive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws FileAlreadyExistException, InvalidPathException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createDirectory();
      }
    }

    public void free(long fileId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      free_call method_call = new free_call(fileId, recursive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class free_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private boolean recursive;
      public free_call(long fileId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.recursive = recursive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("free", org.apache.thrift.protocol.TMessageType.CALL, 0));
        free_args args = new free_args();
        args.setFileId(fileId);
        args.setRecursive(recursive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws FileDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_free();
      }
    }

    public void persistFile(long fileId, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      persistFile_call method_call = new persistFile_call(fileId, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class persistFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private long length;
      public persistFile_call(long fileId, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("persistFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        persistFile_args args = new persistFile_args();
        args.setFileId(fileId);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws FileDoesNotExistException, SuspectedFileSizeException, BlockInfoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_persistFile();
      }
    }

    public void loadFileInfoFromUfs(String ufsPath, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadFileInfoFromUfs_call method_call = new loadFileInfoFromUfs_call(ufsPath, recursive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadFileInfoFromUfs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ufsPath;
      private boolean recursive;
      public loadFileInfoFromUfs_call(String ufsPath, boolean recursive, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ufsPath = ufsPath;
        this.recursive = recursive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadFileInfoFromUfs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadFileInfoFromUfs_args args = new loadFileInfoFromUfs_args();
        args.setUfsPath(ufsPath);
        args.setRecursive(recursive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws BlockInfoException, FileDoesNotExistException, FileAlreadyExistException, InvalidPathException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadFileInfoFromUfs();
      }
    }

    public void mount(String tachyonPath, String ufsPath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mount_call method_call = new mount_call(tachyonPath, ufsPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tachyonPath;
      private String ufsPath;
      public mount_call(String tachyonPath, String ufsPath, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tachyonPath = tachyonPath;
        this.ufsPath = ufsPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mount_args args = new mount_args();
        args.setTachyonPath(tachyonPath);
        args.setUfsPath(ufsPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TachyonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mount();
      }
    }

    public void unmount(String tachyonPath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unmount_call method_call = new unmount_call(tachyonPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tachyonPath;
      public unmount_call(String tachyonPath, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tachyonPath = tachyonPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unmount_args args = new unmount_args();
        args.setTachyonPath(tachyonPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TachyonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unmount();
      }
    }

    public void reportLostFile(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportLostFile_call method_call = new reportLostFile_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportLostFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public reportLostFile_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportLostFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportLostFile_args args = new reportLostFile_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FileDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_reportLostFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("workerGetPinIdList", new workerGetPinIdList());
      processMap.put("getFileId", new getFileId());
      processMap.put("getFileInfo", new getFileInfo());
      processMap.put("getFileInfoList", new getFileInfoList());
      processMap.put("getFileBlockInfo", new getFileBlockInfo());
      processMap.put("getFileBlockInfoList", new getFileBlockInfoList());
      processMap.put("getNewBlockIdForFile", new getNewBlockIdForFile());
      processMap.put("getUfsAddress", new getUfsAddress());
      processMap.put("createFile", new createFile());
      processMap.put("completeFile", new completeFile());
      processMap.put("deleteFile", new deleteFile());
      processMap.put("renameFile", new renameFile());
      processMap.put("setPinned", new setPinned());
      processMap.put("createDirectory", new createDirectory());
      processMap.put("free", new free());
      processMap.put("persistFile", new persistFile());
      processMap.put("loadFileInfoFromUfs", new loadFileInfoFromUfs());
      processMap.put("mount", new mount());
      processMap.put("unmount", new unmount());
      processMap.put("reportLostFile", new reportLostFile());
      return processMap;
    }

    public static class workerGetPinIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, workerGetPinIdList_args> {
      public workerGetPinIdList() {
        super("workerGetPinIdList");
      }

      public workerGetPinIdList_args getEmptyArgsInstance() {
        return new workerGetPinIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public workerGetPinIdList_result getResult(I iface, workerGetPinIdList_args args) throws org.apache.thrift.TException {
        workerGetPinIdList_result result = new workerGetPinIdList_result();
        result.success = iface.workerGetPinIdList();
        return result;
      }
    }

    public static class getFileId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileId_args> {
      public getFileId() {
        super("getFileId");
      }

      public getFileId_args getEmptyArgsInstance() {
        return new getFileId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFileId_result getResult(I iface, getFileId_args args) throws org.apache.thrift.TException {
        getFileId_result result = new getFileId_result();
        try {
          result.success = iface.getFileId(args.path);
          result.setSuccessIsSet(true);
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        }
        return result;
      }
    }

    public static class getFileInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileInfo_args> {
      public getFileInfo() {
        super("getFileInfo");
      }

      public getFileInfo_args getEmptyArgsInstance() {
        return new getFileInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFileInfo_result getResult(I iface, getFileInfo_args args) throws org.apache.thrift.TException {
        getFileInfo_result result = new getFileInfo_result();
        try {
          result.success = iface.getFileInfo(args.fileId);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        }
        return result;
      }
    }

    public static class getFileInfoList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileInfoList_args> {
      public getFileInfoList() {
        super("getFileInfoList");
      }

      public getFileInfoList_args getEmptyArgsInstance() {
        return new getFileInfoList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFileInfoList_result getResult(I iface, getFileInfoList_args args) throws org.apache.thrift.TException {
        getFileInfoList_result result = new getFileInfoList_result();
        try {
          result.success = iface.getFileInfoList(args.fileId);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        }
        return result;
      }
    }

    public static class getFileBlockInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileBlockInfo_args> {
      public getFileBlockInfo() {
        super("getFileBlockInfo");
      }

      public getFileBlockInfo_args getEmptyArgsInstance() {
        return new getFileBlockInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFileBlockInfo_result getResult(I iface, getFileBlockInfo_args args) throws org.apache.thrift.TException {
        getFileBlockInfo_result result = new getFileBlockInfo_result();
        try {
          result.success = iface.getFileBlockInfo(args.fileId, args.fileBlockIndex);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        } catch (BlockInfoException bie) {
          result.bie = bie;
        }
        return result;
      }
    }

    public static class getFileBlockInfoList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileBlockInfoList_args> {
      public getFileBlockInfoList() {
        super("getFileBlockInfoList");
      }

      public getFileBlockInfoList_args getEmptyArgsInstance() {
        return new getFileBlockInfoList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFileBlockInfoList_result getResult(I iface, getFileBlockInfoList_args args) throws org.apache.thrift.TException {
        getFileBlockInfoList_result result = new getFileBlockInfoList_result();
        try {
          result.success = iface.getFileBlockInfoList(args.fileId);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        }
        return result;
      }
    }

    public static class getNewBlockIdForFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewBlockIdForFile_args> {
      public getNewBlockIdForFile() {
        super("getNewBlockIdForFile");
      }

      public getNewBlockIdForFile_args getEmptyArgsInstance() {
        return new getNewBlockIdForFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewBlockIdForFile_result getResult(I iface, getNewBlockIdForFile_args args) throws org.apache.thrift.TException {
        getNewBlockIdForFile_result result = new getNewBlockIdForFile_result();
        try {
          result.success = iface.getNewBlockIdForFile(args.fileId);
          result.setSuccessIsSet(true);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        } catch (BlockInfoException bie) {
          result.bie = bie;
        }
        return result;
      }
    }

    public static class getUfsAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUfsAddress_args> {
      public getUfsAddress() {
        super("getUfsAddress");
      }

      public getUfsAddress_args getEmptyArgsInstance() {
        return new getUfsAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUfsAddress_result getResult(I iface, getUfsAddress_args args) throws org.apache.thrift.TException {
        getUfsAddress_result result = new getUfsAddress_result();
        result.success = iface.getUfsAddress();
        return result;
      }
    }

    public static class createFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createFile_args> {
      public createFile() {
        super("createFile");
      }

      public createFile_args getEmptyArgsInstance() {
        return new createFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createFile_result getResult(I iface, createFile_args args) throws org.apache.thrift.TException {
        createFile_result result = new createFile_result();
        try {
          result.success = iface.createFile(args.path, args.blockSizeBytes, args.recursive, args.ttl);
          result.setSuccessIsSet(true);
        } catch (FileAlreadyExistException faee) {
          result.faee = faee;
        } catch (BlockInfoException bie) {
          result.bie = bie;
        } catch (SuspectedFileSizeException sfse) {
          result.sfse = sfse;
        } catch (TachyonException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class completeFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, completeFile_args> {
      public completeFile() {
        super("completeFile");
      }

      public completeFile_args getEmptyArgsInstance() {
        return new completeFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public completeFile_result getResult(I iface, completeFile_args args) throws org.apache.thrift.TException {
        completeFile_result result = new completeFile_result();
        try {
          iface.completeFile(args.fileId);
        } catch (BlockInfoException bie) {
          result.bie = bie;
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        }
        return result;
      }
    }

    public static class deleteFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFile_args> {
      public deleteFile() {
        super("deleteFile");
      }

      public deleteFile_args getEmptyArgsInstance() {
        return new deleteFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFile_result getResult(I iface, deleteFile_args args) throws org.apache.thrift.TException {
        deleteFile_result result = new deleteFile_result();
        try {
          result.success = iface.deleteFile(args.fileId, args.recursive);
          result.setSuccessIsSet(true);
        } catch (TachyonException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class renameFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renameFile_args> {
      public renameFile() {
        super("renameFile");
      }

      public renameFile_args getEmptyArgsInstance() {
        return new renameFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public renameFile_result getResult(I iface, renameFile_args args) throws org.apache.thrift.TException {
        renameFile_result result = new renameFile_result();
        try {
          result.success = iface.renameFile(args.fileId, args.dstPath);
          result.setSuccessIsSet(true);
        } catch (FileAlreadyExistException faee) {
          result.faee = faee;
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        }
        return result;
      }
    }

    public static class setPinned<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPinned_args> {
      public setPinned() {
        super("setPinned");
      }

      public setPinned_args getEmptyArgsInstance() {
        return new setPinned_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPinned_result getResult(I iface, setPinned_args args) throws org.apache.thrift.TException {
        setPinned_result result = new setPinned_result();
        try {
          iface.setPinned(args.fileId, args.pinned);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        }
        return result;
      }
    }

    public static class createDirectory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createDirectory_args> {
      public createDirectory() {
        super("createDirectory");
      }

      public createDirectory_args getEmptyArgsInstance() {
        return new createDirectory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createDirectory_result getResult(I iface, createDirectory_args args) throws org.apache.thrift.TException {
        createDirectory_result result = new createDirectory_result();
        try {
          result.success = iface.createDirectory(args.path, args.recursive);
          result.setSuccessIsSet(true);
        } catch (FileAlreadyExistException faee) {
          result.faee = faee;
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        }
        return result;
      }
    }

    public static class free<I extends Iface> extends org.apache.thrift.ProcessFunction<I, free_args> {
      public free() {
        super("free");
      }

      public free_args getEmptyArgsInstance() {
        return new free_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public free_result getResult(I iface, free_args args) throws org.apache.thrift.TException {
        free_result result = new free_result();
        try {
          result.success = iface.free(args.fileId, args.recursive);
          result.setSuccessIsSet(true);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        }
        return result;
      }
    }

    public static class persistFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, persistFile_args> {
      public persistFile() {
        super("persistFile");
      }

      public persistFile_args getEmptyArgsInstance() {
        return new persistFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public persistFile_result getResult(I iface, persistFile_args args) throws org.apache.thrift.TException {
        persistFile_result result = new persistFile_result();
        try {
          result.success = iface.persistFile(args.fileId, args.length);
          result.setSuccessIsSet(true);
        } catch (FileDoesNotExistException eP) {
          result.eP = eP;
        } catch (SuspectedFileSizeException eS) {
          result.eS = eS;
        } catch (BlockInfoException eB) {
          result.eB = eB;
        }
        return result;
      }
    }

    public static class loadFileInfoFromUfs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadFileInfoFromUfs_args> {
      public loadFileInfoFromUfs() {
        super("loadFileInfoFromUfs");
      }

      public loadFileInfoFromUfs_args getEmptyArgsInstance() {
        return new loadFileInfoFromUfs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadFileInfoFromUfs_result getResult(I iface, loadFileInfoFromUfs_args args) throws org.apache.thrift.TException {
        loadFileInfoFromUfs_result result = new loadFileInfoFromUfs_result();
        try {
          result.success = iface.loadFileInfoFromUfs(args.ufsPath, args.recursive);
          result.setSuccessIsSet(true);
        } catch (BlockInfoException bie) {
          result.bie = bie;
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        } catch (FileAlreadyExistException faee) {
          result.faee = faee;
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        } catch (SuspectedFileSizeException sfse) {
          result.sfse = sfse;
        } catch (TachyonException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class mount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mount_args> {
      public mount() {
        super("mount");
      }

      public mount_args getEmptyArgsInstance() {
        return new mount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mount_result getResult(I iface, mount_args args) throws org.apache.thrift.TException {
        mount_result result = new mount_result();
        try {
          result.success = iface.mount(args.tachyonPath, args.ufsPath);
          result.setSuccessIsSet(true);
        } catch (TachyonException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class unmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unmount_args> {
      public unmount() {
        super("unmount");
      }

      public unmount_args getEmptyArgsInstance() {
        return new unmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unmount_result getResult(I iface, unmount_args args) throws org.apache.thrift.TException {
        unmount_result result = new unmount_result();
        try {
          result.success = iface.unmount(args.tachyonPath);
          result.setSuccessIsSet(true);
        } catch (TachyonException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class reportLostFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportLostFile_args> {
      public reportLostFile() {
        super("reportLostFile");
      }

      public reportLostFile_args getEmptyArgsInstance() {
        return new reportLostFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reportLostFile_result getResult(I iface, reportLostFile_args args) throws org.apache.thrift.TException {
        reportLostFile_result result = new reportLostFile_result();
        try {
          iface.reportLostFile(args.fileId);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("workerGetPinIdList", new workerGetPinIdList());
      processMap.put("getFileId", new getFileId());
      processMap.put("getFileInfo", new getFileInfo());
      processMap.put("getFileInfoList", new getFileInfoList());
      processMap.put("getFileBlockInfo", new getFileBlockInfo());
      processMap.put("getFileBlockInfoList", new getFileBlockInfoList());
      processMap.put("getNewBlockIdForFile", new getNewBlockIdForFile());
      processMap.put("getUfsAddress", new getUfsAddress());
      processMap.put("createFile", new createFile());
      processMap.put("completeFile", new completeFile());
      processMap.put("deleteFile", new deleteFile());
      processMap.put("renameFile", new renameFile());
      processMap.put("setPinned", new setPinned());
      processMap.put("createDirectory", new createDirectory());
      processMap.put("free", new free());
      processMap.put("persistFile", new persistFile());
      processMap.put("loadFileInfoFromUfs", new loadFileInfoFromUfs());
      processMap.put("mount", new mount());
      processMap.put("unmount", new unmount());
      processMap.put("reportLostFile", new reportLostFile());
      return processMap;
    }

    public static class workerGetPinIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, workerGetPinIdList_args, Set<Long>> {
      public workerGetPinIdList() {
        super("workerGetPinIdList");
      }

      public workerGetPinIdList_args getEmptyArgsInstance() {
        return new workerGetPinIdList_args();
      }

      public AsyncMethodCallback<Set<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Long>>() { 
          public void onComplete(Set<Long> o) {
            workerGetPinIdList_result result = new workerGetPinIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            workerGetPinIdList_result result = new workerGetPinIdList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, workerGetPinIdList_args args, org.apache.thrift.async.AsyncMethodCallback<Set<Long>> resultHandler) throws TException {
        iface.workerGetPinIdList(resultHandler);
      }
    }

    public static class getFileId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileId_args, Long> {
      public getFileId() {
        super("getFileId");
      }

      public getFileId_args getEmptyArgsInstance() {
        return new getFileId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getFileId_result result = new getFileId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFileId_result result = new getFileId_result();
            if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFileId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getFileId(args.path,resultHandler);
      }
    }

    public static class getFileInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileInfo_args, FileInfo> {
      public getFileInfo() {
        super("getFileInfo");
      }

      public getFileInfo_args getEmptyArgsInstance() {
        return new getFileInfo_args();
      }

      public AsyncMethodCallback<FileInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FileInfo>() { 
          public void onComplete(FileInfo o) {
            getFileInfo_result result = new getFileInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFileInfo_result result = new getFileInfo_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFileInfo_args args, org.apache.thrift.async.AsyncMethodCallback<FileInfo> resultHandler) throws TException {
        iface.getFileInfo(args.fileId,resultHandler);
      }
    }

    public static class getFileInfoList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileInfoList_args, List<FileInfo>> {
      public getFileInfoList() {
        super("getFileInfoList");
      }

      public getFileInfoList_args getEmptyArgsInstance() {
        return new getFileInfoList_args();
      }

      public AsyncMethodCallback<List<FileInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FileInfo>>() { 
          public void onComplete(List<FileInfo> o) {
            getFileInfoList_result result = new getFileInfoList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFileInfoList_result result = new getFileInfoList_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFileInfoList_args args, org.apache.thrift.async.AsyncMethodCallback<List<FileInfo>> resultHandler) throws TException {
        iface.getFileInfoList(args.fileId,resultHandler);
      }
    }

    public static class getFileBlockInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileBlockInfo_args, FileBlockInfo> {
      public getFileBlockInfo() {
        super("getFileBlockInfo");
      }

      public getFileBlockInfo_args getEmptyArgsInstance() {
        return new getFileBlockInfo_args();
      }

      public AsyncMethodCallback<FileBlockInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FileBlockInfo>() { 
          public void onComplete(FileBlockInfo o) {
            getFileBlockInfo_result result = new getFileBlockInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFileBlockInfo_result result = new getFileBlockInfo_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockInfoException) {
                        result.bie = (BlockInfoException) e;
                        result.setBieIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFileBlockInfo_args args, org.apache.thrift.async.AsyncMethodCallback<FileBlockInfo> resultHandler) throws TException {
        iface.getFileBlockInfo(args.fileId, args.fileBlockIndex,resultHandler);
      }
    }

    public static class getFileBlockInfoList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileBlockInfoList_args, List<FileBlockInfo>> {
      public getFileBlockInfoList() {
        super("getFileBlockInfoList");
      }

      public getFileBlockInfoList_args getEmptyArgsInstance() {
        return new getFileBlockInfoList_args();
      }

      public AsyncMethodCallback<List<FileBlockInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FileBlockInfo>>() { 
          public void onComplete(List<FileBlockInfo> o) {
            getFileBlockInfoList_result result = new getFileBlockInfoList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFileBlockInfoList_result result = new getFileBlockInfoList_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFileBlockInfoList_args args, org.apache.thrift.async.AsyncMethodCallback<List<FileBlockInfo>> resultHandler) throws TException {
        iface.getFileBlockInfoList(args.fileId,resultHandler);
      }
    }

    public static class getNewBlockIdForFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewBlockIdForFile_args, Long> {
      public getNewBlockIdForFile() {
        super("getNewBlockIdForFile");
      }

      public getNewBlockIdForFile_args getEmptyArgsInstance() {
        return new getNewBlockIdForFile_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getNewBlockIdForFile_result result = new getNewBlockIdForFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewBlockIdForFile_result result = new getNewBlockIdForFile_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockInfoException) {
                        result.bie = (BlockInfoException) e;
                        result.setBieIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewBlockIdForFile_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getNewBlockIdForFile(args.fileId,resultHandler);
      }
    }

    public static class getUfsAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUfsAddress_args, String> {
      public getUfsAddress() {
        super("getUfsAddress");
      }

      public getUfsAddress_args getEmptyArgsInstance() {
        return new getUfsAddress_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getUfsAddress_result result = new getUfsAddress_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUfsAddress_result result = new getUfsAddress_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUfsAddress_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getUfsAddress(resultHandler);
      }
    }

    public static class createFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createFile_args, Long> {
      public createFile() {
        super("createFile");
      }

      public createFile_args getEmptyArgsInstance() {
        return new createFile_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            createFile_result result = new createFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createFile_result result = new createFile_result();
            if (e instanceof FileAlreadyExistException) {
                        result.faee = (FileAlreadyExistException) e;
                        result.setFaeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockInfoException) {
                        result.bie = (BlockInfoException) e;
                        result.setBieIsSet(true);
                        msg = result;
            }
            else             if (e instanceof SuspectedFileSizeException) {
                        result.sfse = (SuspectedFileSizeException) e;
                        result.setSfseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TachyonException) {
                        result.te = (TachyonException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createFile_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.createFile(args.path, args.blockSizeBytes, args.recursive, args.ttl,resultHandler);
      }
    }

    public static class completeFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, completeFile_args, Void> {
      public completeFile() {
        super("completeFile");
      }

      public completeFile_args getEmptyArgsInstance() {
        return new completeFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            completeFile_result result = new completeFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            completeFile_result result = new completeFile_result();
            if (e instanceof BlockInfoException) {
                        result.bie = (BlockInfoException) e;
                        result.setBieIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, completeFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.completeFile(args.fileId,resultHandler);
      }
    }

    public static class deleteFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFile_args, Boolean> {
      public deleteFile() {
        super("deleteFile");
      }

      public deleteFile_args getEmptyArgsInstance() {
        return new deleteFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteFile_result result = new deleteFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFile_result result = new deleteFile_result();
            if (e instanceof TachyonException) {
                        result.te = (TachyonException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteFile(args.fileId, args.recursive,resultHandler);
      }
    }

    public static class renameFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renameFile_args, Boolean> {
      public renameFile() {
        super("renameFile");
      }

      public renameFile_args getEmptyArgsInstance() {
        return new renameFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            renameFile_result result = new renameFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            renameFile_result result = new renameFile_result();
            if (e instanceof FileAlreadyExistException) {
                        result.faee = (FileAlreadyExistException) e;
                        result.setFaeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, renameFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.renameFile(args.fileId, args.dstPath,resultHandler);
      }
    }

    public static class setPinned<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPinned_args, Void> {
      public setPinned() {
        super("setPinned");
      }

      public setPinned_args getEmptyArgsInstance() {
        return new setPinned_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setPinned_result result = new setPinned_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPinned_result result = new setPinned_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPinned_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setPinned(args.fileId, args.pinned,resultHandler);
      }
    }

    public static class createDirectory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createDirectory_args, Boolean> {
      public createDirectory() {
        super("createDirectory");
      }

      public createDirectory_args getEmptyArgsInstance() {
        return new createDirectory_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createDirectory_result result = new createDirectory_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createDirectory_result result = new createDirectory_result();
            if (e instanceof FileAlreadyExistException) {
                        result.faee = (FileAlreadyExistException) e;
                        result.setFaeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createDirectory_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createDirectory(args.path, args.recursive,resultHandler);
      }
    }

    public static class free<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, free_args, Boolean> {
      public free() {
        super("free");
      }

      public free_args getEmptyArgsInstance() {
        return new free_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            free_result result = new free_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            free_result result = new free_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, free_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.free(args.fileId, args.recursive,resultHandler);
      }
    }

    public static class persistFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, persistFile_args, Boolean> {
      public persistFile() {
        super("persistFile");
      }

      public persistFile_args getEmptyArgsInstance() {
        return new persistFile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            persistFile_result result = new persistFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            persistFile_result result = new persistFile_result();
            if (e instanceof FileDoesNotExistException) {
                        result.eP = (FileDoesNotExistException) e;
                        result.setEPIsSet(true);
                        msg = result;
            }
            else             if (e instanceof SuspectedFileSizeException) {
                        result.eS = (SuspectedFileSizeException) e;
                        result.setESIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockInfoException) {
                        result.eB = (BlockInfoException) e;
                        result.setEBIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, persistFile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.persistFile(args.fileId, args.length,resultHandler);
      }
    }

    public static class loadFileInfoFromUfs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadFileInfoFromUfs_args, Long> {
      public loadFileInfoFromUfs() {
        super("loadFileInfoFromUfs");
      }

      public loadFileInfoFromUfs_args getEmptyArgsInstance() {
        return new loadFileInfoFromUfs_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            loadFileInfoFromUfs_result result = new loadFileInfoFromUfs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadFileInfoFromUfs_result result = new loadFileInfoFromUfs_result();
            if (e instanceof BlockInfoException) {
                        result.bie = (BlockInfoException) e;
                        result.setBieIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileAlreadyExistException) {
                        result.faee = (FileAlreadyExistException) e;
                        result.setFaeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof SuspectedFileSizeException) {
                        result.sfse = (SuspectedFileSizeException) e;
                        result.setSfseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TachyonException) {
                        result.te = (TachyonException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadFileInfoFromUfs_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.loadFileInfoFromUfs(args.ufsPath, args.recursive,resultHandler);
      }
    }

    public static class mount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mount_args, Boolean> {
      public mount() {
        super("mount");
      }

      public mount_args getEmptyArgsInstance() {
        return new mount_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            mount_result result = new mount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mount_result result = new mount_result();
            if (e instanceof TachyonException) {
                        result.te = (TachyonException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mount_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.mount(args.tachyonPath, args.ufsPath,resultHandler);
      }
    }

    public static class unmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unmount_args, Boolean> {
      public unmount() {
        super("unmount");
      }

      public unmount_args getEmptyArgsInstance() {
        return new unmount_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            unmount_result result = new unmount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unmount_result result = new unmount_result();
            if (e instanceof TachyonException) {
                        result.te = (TachyonException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unmount_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.unmount(args.tachyonPath,resultHandler);
      }
    }

    public static class reportLostFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportLostFile_args, Void> {
      public reportLostFile() {
        super("reportLostFile");
      }

      public reportLostFile_args getEmptyArgsInstance() {
        return new reportLostFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            reportLostFile_result result = new reportLostFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reportLostFile_result result = new reportLostFile_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reportLostFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.reportLostFile(args.fileId,resultHandler);
      }
    }

  }

  public static class workerGetPinIdList_args implements org.apache.thrift.TBase<workerGetPinIdList_args, workerGetPinIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<workerGetPinIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerGetPinIdList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerGetPinIdList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerGetPinIdList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerGetPinIdList_args.class, metaDataMap);
    }

    public workerGetPinIdList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerGetPinIdList_args(workerGetPinIdList_args other) {
    }

    public workerGetPinIdList_args deepCopy() {
      return new workerGetPinIdList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerGetPinIdList_args)
        return this.equals((workerGetPinIdList_args)that);
      return false;
    }

    public boolean equals(workerGetPinIdList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(workerGetPinIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerGetPinIdList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerGetPinIdList_argsStandardSchemeFactory implements SchemeFactory {
      public workerGetPinIdList_argsStandardScheme getScheme() {
        return new workerGetPinIdList_argsStandardScheme();
      }
    }

    private static class workerGetPinIdList_argsStandardScheme extends StandardScheme<workerGetPinIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerGetPinIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerGetPinIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerGetPinIdList_argsTupleSchemeFactory implements SchemeFactory {
      public workerGetPinIdList_argsTupleScheme getScheme() {
        return new workerGetPinIdList_argsTupleScheme();
      }
    }

    private static class workerGetPinIdList_argsTupleScheme extends TupleScheme<workerGetPinIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerGetPinIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerGetPinIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class workerGetPinIdList_result implements org.apache.thrift.TBase<workerGetPinIdList_result, workerGetPinIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<workerGetPinIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerGetPinIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerGetPinIdList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerGetPinIdList_resultTupleSchemeFactory());
    }

    public Set<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerGetPinIdList_result.class, metaDataMap);
    }

    public workerGetPinIdList_result() {
    }

    public workerGetPinIdList_result(
      Set<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerGetPinIdList_result(workerGetPinIdList_result other) {
      if (other.isSetSuccess()) {
        Set<Long> __this__success = new HashSet<Long>(other.success);
        this.success = __this__success;
      }
    }

    public workerGetPinIdList_result deepCopy() {
      return new workerGetPinIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new HashSet<Long>();
      }
      this.success.add(elem);
    }

    public Set<Long> getSuccess() {
      return this.success;
    }

    public workerGetPinIdList_result setSuccess(Set<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerGetPinIdList_result)
        return this.equals((workerGetPinIdList_result)that);
      return false;
    }

    public boolean equals(workerGetPinIdList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerGetPinIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerGetPinIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerGetPinIdList_resultStandardSchemeFactory implements SchemeFactory {
      public workerGetPinIdList_resultStandardScheme getScheme() {
        return new workerGetPinIdList_resultStandardScheme();
      }
    }

    private static class workerGetPinIdList_resultStandardScheme extends StandardScheme<workerGetPinIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerGetPinIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set108 = iprot.readSetBegin();
                  struct.success = new HashSet<Long>(2*_set108.size);
                  long _elem109;
                  for (int _i110 = 0; _i110 < _set108.size; ++_i110)
                  {
                    _elem109 = iprot.readI64();
                    struct.success.add(_elem109);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerGetPinIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter111 : struct.success)
            {
              oprot.writeI64(_iter111);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerGetPinIdList_resultTupleSchemeFactory implements SchemeFactory {
      public workerGetPinIdList_resultTupleScheme getScheme() {
        return new workerGetPinIdList_resultTupleScheme();
      }
    }

    private static class workerGetPinIdList_resultTupleScheme extends TupleScheme<workerGetPinIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerGetPinIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter112 : struct.success)
            {
              oprot.writeI64(_iter112);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerGetPinIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set113 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashSet<Long>(2*_set113.size);
            long _elem114;
            for (int _i115 = 0; _i115 < _set113.size; ++_i115)
            {
              _elem114 = iprot.readI64();
              struct.success.add(_elem114);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFileId_args implements org.apache.thrift.TBase<getFileId_args, getFileId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileId_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileId_argsTupleSchemeFactory());
    }

    public String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileId_args.class, metaDataMap);
    }

    public getFileId_args() {
    }

    public getFileId_args(
      String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileId_args(getFileId_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public getFileId_args deepCopy() {
      return new getFileId_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public String getPath() {
      return this.path;
    }

    public getFileId_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileId_args)
        return this.equals((getFileId_args)that);
      return false;
    }

    public boolean equals(getFileId_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_path = true && (isSetPath());
      list.add(present_path);
      if (present_path)
        list.add(path);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileId_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileId_argsStandardSchemeFactory implements SchemeFactory {
      public getFileId_argsStandardScheme getScheme() {
        return new getFileId_argsStandardScheme();
      }
    }

    private static class getFileId_argsStandardScheme extends StandardScheme<getFileId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileId_argsTupleSchemeFactory implements SchemeFactory {
      public getFileId_argsTupleScheme getScheme() {
        return new getFileId_argsTupleScheme();
      }
    }

    private static class getFileId_argsTupleScheme extends TupleScheme<getFileId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

  }

  public static class getFileId_result implements org.apache.thrift.TBase<getFileId_result, getFileId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileId_resultTupleSchemeFactory());
    }

    public long success; // required
    public InvalidPathException ipe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IPE((short)1, "ipe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IPE
            return IPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileId_result.class, metaDataMap);
    }

    public getFileId_result() {
    }

    public getFileId_result(
      long success,
      InvalidPathException ipe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ipe = ipe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileId_result(getFileId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
    }

    public getFileId_result deepCopy() {
      return new getFileId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ipe = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getFileId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public getFileId_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case IPE:
        return getIpe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IPE:
        return isSetIpe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileId_result)
        return this.equals((getFileId_result)that);
      return false;
    }

    public boolean equals(getFileId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileId_resultStandardSchemeFactory implements SchemeFactory {
      public getFileId_resultStandardScheme getScheme() {
        return new getFileId_resultStandardScheme();
      }
    }

    private static class getFileId_resultStandardScheme extends StandardScheme<getFileId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileId_resultTupleSchemeFactory implements SchemeFactory {
      public getFileId_resultTupleScheme getScheme() {
        return new getFileId_resultTupleScheme();
      }
    }

    private static class getFileId_resultTupleScheme extends TupleScheme<getFileId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIpe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
      }
    }

  }

  public static class getFileInfo_args implements org.apache.thrift.TBase<getFileInfo_args, getFileInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileInfo_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileInfo_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileInfo_args.class, metaDataMap);
    }

    public getFileInfo_args() {
    }

    public getFileInfo_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileInfo_args(getFileInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public getFileInfo_args deepCopy() {
      return new getFileInfo_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public getFileInfo_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileInfo_args)
        return this.equals((getFileInfo_args)that);
      return false;
    }

    public boolean equals(getFileInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileInfo_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getFileInfo_argsStandardScheme getScheme() {
        return new getFileInfo_argsStandardScheme();
      }
    }

    private static class getFileInfo_argsStandardScheme extends StandardScheme<getFileInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getFileInfo_argsTupleScheme getScheme() {
        return new getFileInfo_argsTupleScheme();
      }
    }

    private static class getFileInfo_argsTupleScheme extends TupleScheme<getFileInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class getFileInfo_result implements org.apache.thrift.TBase<getFileInfo_result, getFileInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileInfo_resultTupleSchemeFactory());
    }

    public FileInfo success; // required
    public FileDoesNotExistException fdnee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FDNEE((short)1, "fdnee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FDNEE
            return FDNEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileInfo.class)));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileInfo_result.class, metaDataMap);
    }

    public getFileInfo_result() {
    }

    public getFileInfo_result(
      FileInfo success,
      FileDoesNotExistException fdnee)
    {
      this();
      this.success = success;
      this.fdnee = fdnee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileInfo_result(getFileInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileInfo(other.success);
      }
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
    }

    public getFileInfo_result deepCopy() {
      return new getFileInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fdnee = null;
    }

    public FileInfo getSuccess() {
      return this.success;
    }

    public getFileInfo_result setSuccess(FileInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public getFileInfo_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileInfo)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FDNEE:
        return getFdnee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FDNEE:
        return isSetFdnee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileInfo_result)
        return this.equals((getFileInfo_result)that);
      return false;
    }

    public boolean equals(getFileInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getFileInfo_resultStandardScheme getScheme() {
        return new getFileInfo_resultStandardScheme();
      }
    }

    private static class getFileInfo_resultStandardScheme extends StandardScheme<getFileInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getFileInfo_resultTupleScheme getScheme() {
        return new getFileInfo_resultTupleScheme();
      }
    }

    private static class getFileInfo_resultTupleScheme extends TupleScheme<getFileInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFdnee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FileInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
      }
    }

  }

  public static class getFileInfoList_args implements org.apache.thrift.TBase<getFileInfoList_args, getFileInfoList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileInfoList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileInfoList_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileInfoList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileInfoList_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileInfoList_args.class, metaDataMap);
    }

    public getFileInfoList_args() {
    }

    public getFileInfoList_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileInfoList_args(getFileInfoList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public getFileInfoList_args deepCopy() {
      return new getFileInfoList_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public getFileInfoList_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileInfoList_args)
        return this.equals((getFileInfoList_args)that);
      return false;
    }

    public boolean equals(getFileInfoList_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileInfoList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileInfoList_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileInfoList_argsStandardSchemeFactory implements SchemeFactory {
      public getFileInfoList_argsStandardScheme getScheme() {
        return new getFileInfoList_argsStandardScheme();
      }
    }

    private static class getFileInfoList_argsStandardScheme extends StandardScheme<getFileInfoList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileInfoList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileInfoList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileInfoList_argsTupleSchemeFactory implements SchemeFactory {
      public getFileInfoList_argsTupleScheme getScheme() {
        return new getFileInfoList_argsTupleScheme();
      }
    }

    private static class getFileInfoList_argsTupleScheme extends TupleScheme<getFileInfoList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class getFileInfoList_result implements org.apache.thrift.TBase<getFileInfoList_result, getFileInfoList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileInfoList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileInfoList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileInfoList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileInfoList_resultTupleSchemeFactory());
    }

    public List<FileInfo> success; // required
    public FileDoesNotExistException fdnee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FDNEE((short)1, "fdnee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FDNEE
            return FDNEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileInfo.class))));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileInfoList_result.class, metaDataMap);
    }

    public getFileInfoList_result() {
    }

    public getFileInfoList_result(
      List<FileInfo> success,
      FileDoesNotExistException fdnee)
    {
      this();
      this.success = success;
      this.fdnee = fdnee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileInfoList_result(getFileInfoList_result other) {
      if (other.isSetSuccess()) {
        List<FileInfo> __this__success = new ArrayList<FileInfo>(other.success.size());
        for (FileInfo other_element : other.success) {
          __this__success.add(new FileInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
    }

    public getFileInfoList_result deepCopy() {
      return new getFileInfoList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fdnee = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FileInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FileInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<FileInfo>();
      }
      this.success.add(elem);
    }

    public List<FileInfo> getSuccess() {
      return this.success;
    }

    public getFileInfoList_result setSuccess(List<FileInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public getFileInfoList_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FileInfo>)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FDNEE:
        return getFdnee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FDNEE:
        return isSetFdnee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileInfoList_result)
        return this.equals((getFileInfoList_result)that);
      return false;
    }

    public boolean equals(getFileInfoList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileInfoList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileInfoList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileInfoList_resultStandardSchemeFactory implements SchemeFactory {
      public getFileInfoList_resultStandardScheme getScheme() {
        return new getFileInfoList_resultStandardScheme();
      }
    }

    private static class getFileInfoList_resultStandardScheme extends StandardScheme<getFileInfoList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileInfoList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                  struct.success = new ArrayList<FileInfo>(_list116.size);
                  FileInfo _elem117;
                  for (int _i118 = 0; _i118 < _list116.size; ++_i118)
                  {
                    _elem117 = new FileInfo();
                    _elem117.read(iprot);
                    struct.success.add(_elem117);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileInfoList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FileInfo _iter119 : struct.success)
            {
              _iter119.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileInfoList_resultTupleSchemeFactory implements SchemeFactory {
      public getFileInfoList_resultTupleScheme getScheme() {
        return new getFileInfoList_resultTupleScheme();
      }
    }

    private static class getFileInfoList_resultTupleScheme extends TupleScheme<getFileInfoList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFdnee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FileInfo _iter120 : struct.success)
            {
              _iter120.write(oprot);
            }
          }
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FileInfo>(_list121.size);
            FileInfo _elem122;
            for (int _i123 = 0; _i123 < _list121.size; ++_i123)
            {
              _elem122 = new FileInfo();
              _elem122.read(iprot);
              struct.success.add(_elem122);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
      }
    }

  }

  public static class getFileBlockInfo_args implements org.apache.thrift.TBase<getFileBlockInfo_args, getFileBlockInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileBlockInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileBlockInfo_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_BLOCK_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("fileBlockIndex", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileBlockInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileBlockInfo_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public int fileBlockIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      FILE_BLOCK_INDEX((short)2, "fileBlockIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // FILE_BLOCK_INDEX
            return FILE_BLOCK_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private static final int __FILEBLOCKINDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FILE_BLOCK_INDEX, new org.apache.thrift.meta_data.FieldMetaData("fileBlockIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileBlockInfo_args.class, metaDataMap);
    }

    public getFileBlockInfo_args() {
    }

    public getFileBlockInfo_args(
      long fileId,
      int fileBlockIndex)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.fileBlockIndex = fileBlockIndex;
      setFileBlockIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileBlockInfo_args(getFileBlockInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      this.fileBlockIndex = other.fileBlockIndex;
    }

    public getFileBlockInfo_args deepCopy() {
      return new getFileBlockInfo_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      setFileBlockIndexIsSet(false);
      this.fileBlockIndex = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public getFileBlockInfo_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public int getFileBlockIndex() {
      return this.fileBlockIndex;
    }

    public getFileBlockInfo_args setFileBlockIndex(int fileBlockIndex) {
      this.fileBlockIndex = fileBlockIndex;
      setFileBlockIndexIsSet(true);
      return this;
    }

    public void unsetFileBlockIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEBLOCKINDEX_ISSET_ID);
    }

    /** Returns true if field fileBlockIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetFileBlockIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEBLOCKINDEX_ISSET_ID);
    }

    public void setFileBlockIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEBLOCKINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case FILE_BLOCK_INDEX:
        if (value == null) {
          unsetFileBlockIndex();
        } else {
          setFileBlockIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case FILE_BLOCK_INDEX:
        return Integer.valueOf(getFileBlockIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case FILE_BLOCK_INDEX:
        return isSetFileBlockIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileBlockInfo_args)
        return this.equals((getFileBlockInfo_args)that);
      return false;
    }

    public boolean equals(getFileBlockInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_fileBlockIndex = true;
      boolean that_present_fileBlockIndex = true;
      if (this_present_fileBlockIndex || that_present_fileBlockIndex) {
        if (!(this_present_fileBlockIndex && that_present_fileBlockIndex))
          return false;
        if (this.fileBlockIndex != that.fileBlockIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      boolean present_fileBlockIndex = true;
      list.add(present_fileBlockIndex);
      if (present_fileBlockIndex)
        list.add(fileBlockIndex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileBlockInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileBlockIndex()).compareTo(other.isSetFileBlockIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileBlockIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileBlockIndex, other.fileBlockIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileBlockInfo_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileBlockIndex:");
      sb.append(this.fileBlockIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileBlockInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getFileBlockInfo_argsStandardScheme getScheme() {
        return new getFileBlockInfo_argsStandardScheme();
      }
    }

    private static class getFileBlockInfo_argsStandardScheme extends StandardScheme<getFileBlockInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileBlockInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_BLOCK_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileBlockIndex = iprot.readI32();
                struct.setFileBlockIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileBlockInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FILE_BLOCK_INDEX_FIELD_DESC);
        oprot.writeI32(struct.fileBlockIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileBlockInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getFileBlockInfo_argsTupleScheme getScheme() {
        return new getFileBlockInfo_argsTupleScheme();
      }
    }

    private static class getFileBlockInfo_argsTupleScheme extends TupleScheme<getFileBlockInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileBlockInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetFileBlockIndex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetFileBlockIndex()) {
          oprot.writeI32(struct.fileBlockIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileBlockInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileBlockIndex = iprot.readI32();
          struct.setFileBlockIndexIsSet(true);
        }
      }
    }

  }

  public static class getFileBlockInfo_result implements org.apache.thrift.TBase<getFileBlockInfo_result, getFileBlockInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileBlockInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileBlockInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIE_FIELD_DESC = new org.apache.thrift.protocol.TField("bie", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileBlockInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileBlockInfo_resultTupleSchemeFactory());
    }

    public FileBlockInfo success; // required
    public FileDoesNotExistException fdnee; // required
    public BlockInfoException bie; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FDNEE((short)1, "fdnee"),
      BIE((short)2, "bie");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FDNEE
            return FDNEE;
          case 2: // BIE
            return BIE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileBlockInfo.class)));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BIE, new org.apache.thrift.meta_data.FieldMetaData("bie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileBlockInfo_result.class, metaDataMap);
    }

    public getFileBlockInfo_result() {
    }

    public getFileBlockInfo_result(
      FileBlockInfo success,
      FileDoesNotExistException fdnee,
      BlockInfoException bie)
    {
      this();
      this.success = success;
      this.fdnee = fdnee;
      this.bie = bie;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileBlockInfo_result(getFileBlockInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new FileBlockInfo(other.success);
      }
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
      if (other.isSetBie()) {
        this.bie = new BlockInfoException(other.bie);
      }
    }

    public getFileBlockInfo_result deepCopy() {
      return new getFileBlockInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fdnee = null;
      this.bie = null;
    }

    public FileBlockInfo getSuccess() {
      return this.success;
    }

    public getFileBlockInfo_result setSuccess(FileBlockInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public getFileBlockInfo_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public BlockInfoException getBie() {
      return this.bie;
    }

    public getFileBlockInfo_result setBie(BlockInfoException bie) {
      this.bie = bie;
      return this;
    }

    public void unsetBie() {
      this.bie = null;
    }

    /** Returns true if field bie is set (has been assigned a value) and false otherwise */
    public boolean isSetBie() {
      return this.bie != null;
    }

    public void setBieIsSet(boolean value) {
      if (!value) {
        this.bie = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FileBlockInfo)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      case BIE:
        if (value == null) {
          unsetBie();
        } else {
          setBie((BlockInfoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FDNEE:
        return getFdnee();

      case BIE:
        return getBie();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FDNEE:
        return isSetFdnee();
      case BIE:
        return isSetBie();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileBlockInfo_result)
        return this.equals((getFileBlockInfo_result)that);
      return false;
    }

    public boolean equals(getFileBlockInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      boolean this_present_bie = true && this.isSetBie();
      boolean that_present_bie = true && that.isSetBie();
      if (this_present_bie || that_present_bie) {
        if (!(this_present_bie && that_present_bie))
          return false;
        if (!this.bie.equals(that.bie))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      boolean present_bie = true && (isSetBie());
      list.add(present_bie);
      if (present_bie)
        list.add(bie);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileBlockInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBie()).compareTo(other.isSetBie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bie, other.bie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileBlockInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bie:");
      if (this.bie == null) {
        sb.append("null");
      } else {
        sb.append(this.bie);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileBlockInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getFileBlockInfo_resultStandardScheme getScheme() {
        return new getFileBlockInfo_resultStandardScheme();
      }
    }

    private static class getFileBlockInfo_resultStandardScheme extends StandardScheme<getFileBlockInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileBlockInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FileBlockInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bie = new BlockInfoException();
                struct.bie.read(iprot);
                struct.setBieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileBlockInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bie != null) {
          oprot.writeFieldBegin(BIE_FIELD_DESC);
          struct.bie.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileBlockInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getFileBlockInfo_resultTupleScheme getScheme() {
        return new getFileBlockInfo_resultTupleScheme();
      }
    }

    private static class getFileBlockInfo_resultTupleScheme extends TupleScheme<getFileBlockInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileBlockInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFdnee()) {
          optionals.set(1);
        }
        if (struct.isSetBie()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
        if (struct.isSetBie()) {
          struct.bie.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileBlockInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new FileBlockInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bie = new BlockInfoException();
          struct.bie.read(iprot);
          struct.setBieIsSet(true);
        }
      }
    }

  }

  public static class getFileBlockInfoList_args implements org.apache.thrift.TBase<getFileBlockInfoList_args, getFileBlockInfoList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileBlockInfoList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileBlockInfoList_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileBlockInfoList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileBlockInfoList_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileBlockInfoList_args.class, metaDataMap);
    }

    public getFileBlockInfoList_args() {
    }

    public getFileBlockInfoList_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileBlockInfoList_args(getFileBlockInfoList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public getFileBlockInfoList_args deepCopy() {
      return new getFileBlockInfoList_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public getFileBlockInfoList_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileBlockInfoList_args)
        return this.equals((getFileBlockInfoList_args)that);
      return false;
    }

    public boolean equals(getFileBlockInfoList_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileBlockInfoList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileBlockInfoList_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileBlockInfoList_argsStandardSchemeFactory implements SchemeFactory {
      public getFileBlockInfoList_argsStandardScheme getScheme() {
        return new getFileBlockInfoList_argsStandardScheme();
      }
    }

    private static class getFileBlockInfoList_argsStandardScheme extends StandardScheme<getFileBlockInfoList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileBlockInfoList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileBlockInfoList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileBlockInfoList_argsTupleSchemeFactory implements SchemeFactory {
      public getFileBlockInfoList_argsTupleScheme getScheme() {
        return new getFileBlockInfoList_argsTupleScheme();
      }
    }

    private static class getFileBlockInfoList_argsTupleScheme extends TupleScheme<getFileBlockInfoList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileBlockInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileBlockInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class getFileBlockInfoList_result implements org.apache.thrift.TBase<getFileBlockInfoList_result, getFileBlockInfoList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileBlockInfoList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileBlockInfoList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFileBlockInfoList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFileBlockInfoList_resultTupleSchemeFactory());
    }

    public List<FileBlockInfo> success; // required
    public FileDoesNotExistException fdnee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FDNEE((short)1, "fdnee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FDNEE
            return FDNEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileBlockInfo.class))));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileBlockInfoList_result.class, metaDataMap);
    }

    public getFileBlockInfoList_result() {
    }

    public getFileBlockInfoList_result(
      List<FileBlockInfo> success,
      FileDoesNotExistException fdnee)
    {
      this();
      this.success = success;
      this.fdnee = fdnee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFileBlockInfoList_result(getFileBlockInfoList_result other) {
      if (other.isSetSuccess()) {
        List<FileBlockInfo> __this__success = new ArrayList<FileBlockInfo>(other.success.size());
        for (FileBlockInfo other_element : other.success) {
          __this__success.add(new FileBlockInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
    }

    public getFileBlockInfoList_result deepCopy() {
      return new getFileBlockInfoList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fdnee = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FileBlockInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FileBlockInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<FileBlockInfo>();
      }
      this.success.add(elem);
    }

    public List<FileBlockInfo> getSuccess() {
      return this.success;
    }

    public getFileBlockInfoList_result setSuccess(List<FileBlockInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public getFileBlockInfoList_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FileBlockInfo>)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FDNEE:
        return getFdnee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FDNEE:
        return isSetFdnee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFileBlockInfoList_result)
        return this.equals((getFileBlockInfoList_result)that);
      return false;
    }

    public boolean equals(getFileBlockInfoList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFileBlockInfoList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFileBlockInfoList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFileBlockInfoList_resultStandardSchemeFactory implements SchemeFactory {
      public getFileBlockInfoList_resultStandardScheme getScheme() {
        return new getFileBlockInfoList_resultStandardScheme();
      }
    }

    private static class getFileBlockInfoList_resultStandardScheme extends StandardScheme<getFileBlockInfoList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFileBlockInfoList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                  struct.success = new ArrayList<FileBlockInfo>(_list124.size);
                  FileBlockInfo _elem125;
                  for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                  {
                    _elem125 = new FileBlockInfo();
                    _elem125.read(iprot);
                    struct.success.add(_elem125);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFileBlockInfoList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FileBlockInfo _iter127 : struct.success)
            {
              _iter127.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFileBlockInfoList_resultTupleSchemeFactory implements SchemeFactory {
      public getFileBlockInfoList_resultTupleScheme getScheme() {
        return new getFileBlockInfoList_resultTupleScheme();
      }
    }

    private static class getFileBlockInfoList_resultTupleScheme extends TupleScheme<getFileBlockInfoList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFileBlockInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFdnee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FileBlockInfo _iter128 : struct.success)
            {
              _iter128.write(oprot);
            }
          }
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFileBlockInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list129 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FileBlockInfo>(_list129.size);
            FileBlockInfo _elem130;
            for (int _i131 = 0; _i131 < _list129.size; ++_i131)
            {
              _elem130 = new FileBlockInfo();
              _elem130.read(iprot);
              struct.success.add(_elem130);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
      }
    }

  }

  public static class getNewBlockIdForFile_args implements org.apache.thrift.TBase<getNewBlockIdForFile_args, getNewBlockIdForFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewBlockIdForFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewBlockIdForFile_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewBlockIdForFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewBlockIdForFile_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewBlockIdForFile_args.class, metaDataMap);
    }

    public getNewBlockIdForFile_args() {
    }

    public getNewBlockIdForFile_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewBlockIdForFile_args(getNewBlockIdForFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public getNewBlockIdForFile_args deepCopy() {
      return new getNewBlockIdForFile_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public getNewBlockIdForFile_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewBlockIdForFile_args)
        return this.equals((getNewBlockIdForFile_args)that);
      return false;
    }

    public boolean equals(getNewBlockIdForFile_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewBlockIdForFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewBlockIdForFile_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewBlockIdForFile_argsStandardSchemeFactory implements SchemeFactory {
      public getNewBlockIdForFile_argsStandardScheme getScheme() {
        return new getNewBlockIdForFile_argsStandardScheme();
      }
    }

    private static class getNewBlockIdForFile_argsStandardScheme extends StandardScheme<getNewBlockIdForFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewBlockIdForFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewBlockIdForFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewBlockIdForFile_argsTupleSchemeFactory implements SchemeFactory {
      public getNewBlockIdForFile_argsTupleScheme getScheme() {
        return new getNewBlockIdForFile_argsTupleScheme();
      }
    }

    private static class getNewBlockIdForFile_argsTupleScheme extends TupleScheme<getNewBlockIdForFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewBlockIdForFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewBlockIdForFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class getNewBlockIdForFile_result implements org.apache.thrift.TBase<getNewBlockIdForFile_result, getNewBlockIdForFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewBlockIdForFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewBlockIdForFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIE_FIELD_DESC = new org.apache.thrift.protocol.TField("bie", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewBlockIdForFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewBlockIdForFile_resultTupleSchemeFactory());
    }

    public long success; // required
    public FileDoesNotExistException fdnee; // required
    public BlockInfoException bie; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FDNEE((short)1, "fdnee"),
      BIE((short)2, "bie");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FDNEE
            return FDNEE;
          case 2: // BIE
            return BIE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BIE, new org.apache.thrift.meta_data.FieldMetaData("bie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewBlockIdForFile_result.class, metaDataMap);
    }

    public getNewBlockIdForFile_result() {
    }

    public getNewBlockIdForFile_result(
      long success,
      FileDoesNotExistException fdnee,
      BlockInfoException bie)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.fdnee = fdnee;
      this.bie = bie;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewBlockIdForFile_result(getNewBlockIdForFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
      if (other.isSetBie()) {
        this.bie = new BlockInfoException(other.bie);
      }
    }

    public getNewBlockIdForFile_result deepCopy() {
      return new getNewBlockIdForFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.fdnee = null;
      this.bie = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getNewBlockIdForFile_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public getNewBlockIdForFile_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public BlockInfoException getBie() {
      return this.bie;
    }

    public getNewBlockIdForFile_result setBie(BlockInfoException bie) {
      this.bie = bie;
      return this;
    }

    public void unsetBie() {
      this.bie = null;
    }

    /** Returns true if field bie is set (has been assigned a value) and false otherwise */
    public boolean isSetBie() {
      return this.bie != null;
    }

    public void setBieIsSet(boolean value) {
      if (!value) {
        this.bie = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      case BIE:
        if (value == null) {
          unsetBie();
        } else {
          setBie((BlockInfoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case FDNEE:
        return getFdnee();

      case BIE:
        return getBie();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FDNEE:
        return isSetFdnee();
      case BIE:
        return isSetBie();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewBlockIdForFile_result)
        return this.equals((getNewBlockIdForFile_result)that);
      return false;
    }

    public boolean equals(getNewBlockIdForFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      boolean this_present_bie = true && this.isSetBie();
      boolean that_present_bie = true && that.isSetBie();
      if (this_present_bie || that_present_bie) {
        if (!(this_present_bie && that_present_bie))
          return false;
        if (!this.bie.equals(that.bie))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      boolean present_bie = true && (isSetBie());
      list.add(present_bie);
      if (present_bie)
        list.add(bie);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewBlockIdForFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBie()).compareTo(other.isSetBie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bie, other.bie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewBlockIdForFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bie:");
      if (this.bie == null) {
        sb.append("null");
      } else {
        sb.append(this.bie);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewBlockIdForFile_resultStandardSchemeFactory implements SchemeFactory {
      public getNewBlockIdForFile_resultStandardScheme getScheme() {
        return new getNewBlockIdForFile_resultStandardScheme();
      }
    }

    private static class getNewBlockIdForFile_resultStandardScheme extends StandardScheme<getNewBlockIdForFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewBlockIdForFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bie = new BlockInfoException();
                struct.bie.read(iprot);
                struct.setBieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewBlockIdForFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bie != null) {
          oprot.writeFieldBegin(BIE_FIELD_DESC);
          struct.bie.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewBlockIdForFile_resultTupleSchemeFactory implements SchemeFactory {
      public getNewBlockIdForFile_resultTupleScheme getScheme() {
        return new getNewBlockIdForFile_resultTupleScheme();
      }
    }

    private static class getNewBlockIdForFile_resultTupleScheme extends TupleScheme<getNewBlockIdForFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewBlockIdForFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFdnee()) {
          optionals.set(1);
        }
        if (struct.isSetBie()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
        if (struct.isSetBie()) {
          struct.bie.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewBlockIdForFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bie = new BlockInfoException();
          struct.bie.read(iprot);
          struct.setBieIsSet(true);
        }
      }
    }

  }

  public static class getUfsAddress_args implements org.apache.thrift.TBase<getUfsAddress_args, getUfsAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUfsAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUfsAddress_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUfsAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUfsAddress_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUfsAddress_args.class, metaDataMap);
    }

    public getUfsAddress_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUfsAddress_args(getUfsAddress_args other) {
    }

    public getUfsAddress_args deepCopy() {
      return new getUfsAddress_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUfsAddress_args)
        return this.equals((getUfsAddress_args)that);
      return false;
    }

    public boolean equals(getUfsAddress_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getUfsAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUfsAddress_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUfsAddress_argsStandardSchemeFactory implements SchemeFactory {
      public getUfsAddress_argsStandardScheme getScheme() {
        return new getUfsAddress_argsStandardScheme();
      }
    }

    private static class getUfsAddress_argsStandardScheme extends StandardScheme<getUfsAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUfsAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUfsAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUfsAddress_argsTupleSchemeFactory implements SchemeFactory {
      public getUfsAddress_argsTupleScheme getScheme() {
        return new getUfsAddress_argsTupleScheme();
      }
    }

    private static class getUfsAddress_argsTupleScheme extends TupleScheme<getUfsAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUfsAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUfsAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUfsAddress_result implements org.apache.thrift.TBase<getUfsAddress_result, getUfsAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUfsAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUfsAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUfsAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUfsAddress_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUfsAddress_result.class, metaDataMap);
    }

    public getUfsAddress_result() {
    }

    public getUfsAddress_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUfsAddress_result(getUfsAddress_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getUfsAddress_result deepCopy() {
      return new getUfsAddress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getUfsAddress_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUfsAddress_result)
        return this.equals((getUfsAddress_result)that);
      return false;
    }

    public boolean equals(getUfsAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUfsAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUfsAddress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUfsAddress_resultStandardSchemeFactory implements SchemeFactory {
      public getUfsAddress_resultStandardScheme getScheme() {
        return new getUfsAddress_resultStandardScheme();
      }
    }

    private static class getUfsAddress_resultStandardScheme extends StandardScheme<getUfsAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUfsAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUfsAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUfsAddress_resultTupleSchemeFactory implements SchemeFactory {
      public getUfsAddress_resultTupleScheme getScheme() {
        return new getUfsAddress_resultTupleScheme();
      }
    }

    private static class getUfsAddress_resultTupleScheme extends TupleScheme<getUfsAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUfsAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUfsAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createFile_args implements org.apache.thrift.TBase<createFile_args, createFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<createFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createFile_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BLOCK_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSizeBytes", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createFile_argsTupleSchemeFactory());
    }

    public String path; // required
    public long blockSizeBytes; // required
    public boolean recursive; // required
    public long ttl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      BLOCK_SIZE_BYTES((short)2, "blockSizeBytes"),
      RECURSIVE((short)3, "recursive"),
      TTL((short)4, "ttl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // BLOCK_SIZE_BYTES
            return BLOCK_SIZE_BYTES;
          case 3: // RECURSIVE
            return RECURSIVE;
          case 4: // TTL
            return TTL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKSIZEBYTES_ISSET_ID = 0;
    private static final int __RECURSIVE_ISSET_ID = 1;
    private static final int __TTL_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BLOCK_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("blockSizeBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFile_args.class, metaDataMap);
    }

    public createFile_args() {
    }

    public createFile_args(
      String path,
      long blockSizeBytes,
      boolean recursive,
      long ttl)
    {
      this();
      this.path = path;
      this.blockSizeBytes = blockSizeBytes;
      setBlockSizeBytesIsSet(true);
      this.recursive = recursive;
      setRecursiveIsSet(true);
      this.ttl = ttl;
      setTtlIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createFile_args(createFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPath()) {
        this.path = other.path;
      }
      this.blockSizeBytes = other.blockSizeBytes;
      this.recursive = other.recursive;
      this.ttl = other.ttl;
    }

    public createFile_args deepCopy() {
      return new createFile_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      setBlockSizeBytesIsSet(false);
      this.blockSizeBytes = 0;
      setRecursiveIsSet(false);
      this.recursive = false;
      setTtlIsSet(false);
      this.ttl = 0;
    }

    public String getPath() {
      return this.path;
    }

    public createFile_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public long getBlockSizeBytes() {
      return this.blockSizeBytes;
    }

    public createFile_args setBlockSizeBytes(long blockSizeBytes) {
      this.blockSizeBytes = blockSizeBytes;
      setBlockSizeBytesIsSet(true);
      return this;
    }

    public void unsetBlockSizeBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID);
    }

    /** Returns true if field blockSizeBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockSizeBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID);
    }

    public void setBlockSizeBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID, value);
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public createFile_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public long getTtl() {
      return this.ttl;
    }

    public createFile_args setTtl(long ttl) {
      this.ttl = ttl;
      setTtlIsSet(true);
      return this;
    }

    public void unsetTtl() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
    }

    /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
    public boolean isSetTtl() {
      return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
    }

    public void setTtlIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case BLOCK_SIZE_BYTES:
        if (value == null) {
          unsetBlockSizeBytes();
        } else {
          setBlockSizeBytes((Long)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((Boolean)value);
        }
        break;

      case TTL:
        if (value == null) {
          unsetTtl();
        } else {
          setTtl((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case BLOCK_SIZE_BYTES:
        return Long.valueOf(getBlockSizeBytes());

      case RECURSIVE:
        return Boolean.valueOf(isRecursive());

      case TTL:
        return Long.valueOf(getTtl());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case BLOCK_SIZE_BYTES:
        return isSetBlockSizeBytes();
      case RECURSIVE:
        return isSetRecursive();
      case TTL:
        return isSetTtl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createFile_args)
        return this.equals((createFile_args)that);
      return false;
    }

    public boolean equals(createFile_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_blockSizeBytes = true;
      boolean that_present_blockSizeBytes = true;
      if (this_present_blockSizeBytes || that_present_blockSizeBytes) {
        if (!(this_present_blockSizeBytes && that_present_blockSizeBytes))
          return false;
        if (this.blockSizeBytes != that.blockSizeBytes)
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      boolean this_present_ttl = true;
      boolean that_present_ttl = true;
      if (this_present_ttl || that_present_ttl) {
        if (!(this_present_ttl && that_present_ttl))
          return false;
        if (this.ttl != that.ttl)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_path = true && (isSetPath());
      list.add(present_path);
      if (present_path)
        list.add(path);

      boolean present_blockSizeBytes = true;
      list.add(present_blockSizeBytes);
      if (present_blockSizeBytes)
        list.add(blockSizeBytes);

      boolean present_recursive = true;
      list.add(present_recursive);
      if (present_recursive)
        list.add(recursive);

      boolean present_ttl = true;
      list.add(present_ttl);
      if (present_ttl)
        list.add(ttl);

      return list.hashCode();
    }

    @Override
    public int compareTo(createFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockSizeBytes()).compareTo(other.isSetBlockSizeBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockSizeBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSizeBytes, other.blockSizeBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTtl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createFile_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockSizeBytes:");
      sb.append(this.blockSizeBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createFile_argsStandardSchemeFactory implements SchemeFactory {
      public createFile_argsStandardScheme getScheme() {
        return new createFile_argsStandardScheme();
      }
    }

    private static class createFile_argsStandardScheme extends StandardScheme<createFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLOCK_SIZE_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockSizeBytes = iprot.readI64();
                struct.setBlockSizeBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TTL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ttl = iprot.readI64();
                struct.setTtlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BLOCK_SIZE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.blockSizeBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI64(struct.ttl);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createFile_argsTupleSchemeFactory implements SchemeFactory {
      public createFile_argsTupleScheme getScheme() {
        return new createFile_argsTupleScheme();
      }
    }

    private static class createFile_argsTupleScheme extends TupleScheme<createFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetBlockSizeBytes()) {
          optionals.set(1);
        }
        if (struct.isSetRecursive()) {
          optionals.set(2);
        }
        if (struct.isSetTtl()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetBlockSizeBytes()) {
          oprot.writeI64(struct.blockSizeBytes);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
        if (struct.isSetTtl()) {
          oprot.writeI64(struct.ttl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.blockSizeBytes = iprot.readI64();
          struct.setBlockSizeBytesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ttl = iprot.readI64();
          struct.setTtlIsSet(true);
        }
      }
    }

  }

  public static class createFile_result implements org.apache.thrift.TBase<createFile_result, createFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<createFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField FAEE_FIELD_DESC = new org.apache.thrift.protocol.TField("faee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIE_FIELD_DESC = new org.apache.thrift.protocol.TField("bie", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SFSE_FIELD_DESC = new org.apache.thrift.protocol.TField("sfse", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createFile_resultTupleSchemeFactory());
    }

    public long success; // required
    public FileAlreadyExistException faee; // required
    public BlockInfoException bie; // required
    public SuspectedFileSizeException sfse; // required
    public TachyonException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAEE((short)1, "faee"),
      BIE((short)2, "bie"),
      SFSE((short)3, "sfse"),
      TE((short)4, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAEE
            return FAEE;
          case 2: // BIE
            return BIE;
          case 3: // SFSE
            return SFSE;
          case 4: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FAEE, new org.apache.thrift.meta_data.FieldMetaData("faee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BIE, new org.apache.thrift.meta_data.FieldMetaData("bie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SFSE, new org.apache.thrift.meta_data.FieldMetaData("sfse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFile_result.class, metaDataMap);
    }

    public createFile_result() {
    }

    public createFile_result(
      long success,
      FileAlreadyExistException faee,
      BlockInfoException bie,
      SuspectedFileSizeException sfse,
      TachyonException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.faee = faee;
      this.bie = bie;
      this.sfse = sfse;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createFile_result(createFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetFaee()) {
        this.faee = new FileAlreadyExistException(other.faee);
      }
      if (other.isSetBie()) {
        this.bie = new BlockInfoException(other.bie);
      }
      if (other.isSetSfse()) {
        this.sfse = new SuspectedFileSizeException(other.sfse);
      }
      if (other.isSetTe()) {
        this.te = new TachyonException(other.te);
      }
    }

    public createFile_result deepCopy() {
      return new createFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.faee = null;
      this.bie = null;
      this.sfse = null;
      this.te = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public createFile_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FileAlreadyExistException getFaee() {
      return this.faee;
    }

    public createFile_result setFaee(FileAlreadyExistException faee) {
      this.faee = faee;
      return this;
    }

    public void unsetFaee() {
      this.faee = null;
    }

    /** Returns true if field faee is set (has been assigned a value) and false otherwise */
    public boolean isSetFaee() {
      return this.faee != null;
    }

    public void setFaeeIsSet(boolean value) {
      if (!value) {
        this.faee = null;
      }
    }

    public BlockInfoException getBie() {
      return this.bie;
    }

    public createFile_result setBie(BlockInfoException bie) {
      this.bie = bie;
      return this;
    }

    public void unsetBie() {
      this.bie = null;
    }

    /** Returns true if field bie is set (has been assigned a value) and false otherwise */
    public boolean isSetBie() {
      return this.bie != null;
    }

    public void setBieIsSet(boolean value) {
      if (!value) {
        this.bie = null;
      }
    }

    public SuspectedFileSizeException getSfse() {
      return this.sfse;
    }

    public createFile_result setSfse(SuspectedFileSizeException sfse) {
      this.sfse = sfse;
      return this;
    }

    public void unsetSfse() {
      this.sfse = null;
    }

    /** Returns true if field sfse is set (has been assigned a value) and false otherwise */
    public boolean isSetSfse() {
      return this.sfse != null;
    }

    public void setSfseIsSet(boolean value) {
      if (!value) {
        this.sfse = null;
      }
    }

    public TachyonException getTe() {
      return this.te;
    }

    public createFile_result setTe(TachyonException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case FAEE:
        if (value == null) {
          unsetFaee();
        } else {
          setFaee((FileAlreadyExistException)value);
        }
        break;

      case BIE:
        if (value == null) {
          unsetBie();
        } else {
          setBie((BlockInfoException)value);
        }
        break;

      case SFSE:
        if (value == null) {
          unsetSfse();
        } else {
          setSfse((SuspectedFileSizeException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TachyonException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case FAEE:
        return getFaee();

      case BIE:
        return getBie();

      case SFSE:
        return getSfse();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAEE:
        return isSetFaee();
      case BIE:
        return isSetBie();
      case SFSE:
        return isSetSfse();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createFile_result)
        return this.equals((createFile_result)that);
      return false;
    }

    public boolean equals(createFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_faee = true && this.isSetFaee();
      boolean that_present_faee = true && that.isSetFaee();
      if (this_present_faee || that_present_faee) {
        if (!(this_present_faee && that_present_faee))
          return false;
        if (!this.faee.equals(that.faee))
          return false;
      }

      boolean this_present_bie = true && this.isSetBie();
      boolean that_present_bie = true && that.isSetBie();
      if (this_present_bie || that_present_bie) {
        if (!(this_present_bie && that_present_bie))
          return false;
        if (!this.bie.equals(that.bie))
          return false;
      }

      boolean this_present_sfse = true && this.isSetSfse();
      boolean that_present_sfse = true && that.isSetSfse();
      if (this_present_sfse || that_present_sfse) {
        if (!(this_present_sfse && that_present_sfse))
          return false;
        if (!this.sfse.equals(that.sfse))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_faee = true && (isSetFaee());
      list.add(present_faee);
      if (present_faee)
        list.add(faee);

      boolean present_bie = true && (isSetBie());
      list.add(present_bie);
      if (present_bie)
        list.add(bie);

      boolean present_sfse = true && (isSetSfse());
      list.add(present_sfse);
      if (present_sfse)
        list.add(sfse);

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(createFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaee()).compareTo(other.isSetFaee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faee, other.faee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBie()).compareTo(other.isSetBie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bie, other.bie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSfse()).compareTo(other.isSetSfse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSfse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sfse, other.sfse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faee:");
      if (this.faee == null) {
        sb.append("null");
      } else {
        sb.append(this.faee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bie:");
      if (this.bie == null) {
        sb.append("null");
      } else {
        sb.append(this.bie);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sfse:");
      if (this.sfse == null) {
        sb.append("null");
      } else {
        sb.append(this.sfse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createFile_resultStandardSchemeFactory implements SchemeFactory {
      public createFile_resultStandardScheme getScheme() {
        return new createFile_resultStandardScheme();
      }
    }

    private static class createFile_resultStandardScheme extends StandardScheme<createFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.faee = new FileAlreadyExistException();
                struct.faee.read(iprot);
                struct.setFaeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bie = new BlockInfoException();
                struct.bie.read(iprot);
                struct.setBieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SFSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sfse = new SuspectedFileSizeException();
                struct.sfse.read(iprot);
                struct.setSfseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TachyonException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.faee != null) {
          oprot.writeFieldBegin(FAEE_FIELD_DESC);
          struct.faee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bie != null) {
          oprot.writeFieldBegin(BIE_FIELD_DESC);
          struct.bie.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sfse != null) {
          oprot.writeFieldBegin(SFSE_FIELD_DESC);
          struct.sfse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createFile_resultTupleSchemeFactory implements SchemeFactory {
      public createFile_resultTupleScheme getScheme() {
        return new createFile_resultTupleScheme();
      }
    }

    private static class createFile_resultTupleScheme extends TupleScheme<createFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFaee()) {
          optionals.set(1);
        }
        if (struct.isSetBie()) {
          optionals.set(2);
        }
        if (struct.isSetSfse()) {
          optionals.set(3);
        }
        if (struct.isSetTe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetFaee()) {
          struct.faee.write(oprot);
        }
        if (struct.isSetBie()) {
          struct.bie.write(oprot);
        }
        if (struct.isSetSfse()) {
          struct.sfse.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.faee = new FileAlreadyExistException();
          struct.faee.read(iprot);
          struct.setFaeeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bie = new BlockInfoException();
          struct.bie.read(iprot);
          struct.setBieIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sfse = new SuspectedFileSizeException();
          struct.sfse.read(iprot);
          struct.setSfseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.te = new TachyonException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class completeFile_args implements org.apache.thrift.TBase<completeFile_args, completeFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<completeFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completeFile_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new completeFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new completeFile_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completeFile_args.class, metaDataMap);
    }

    public completeFile_args() {
    }

    public completeFile_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completeFile_args(completeFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public completeFile_args deepCopy() {
      return new completeFile_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public completeFile_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completeFile_args)
        return this.equals((completeFile_args)that);
      return false;
    }

    public boolean equals(completeFile_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(completeFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completeFile_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completeFile_argsStandardSchemeFactory implements SchemeFactory {
      public completeFile_argsStandardScheme getScheme() {
        return new completeFile_argsStandardScheme();
      }
    }

    private static class completeFile_argsStandardScheme extends StandardScheme<completeFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completeFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completeFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completeFile_argsTupleSchemeFactory implements SchemeFactory {
      public completeFile_argsTupleScheme getScheme() {
        return new completeFile_argsTupleScheme();
      }
    }

    private static class completeFile_argsTupleScheme extends TupleScheme<completeFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completeFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completeFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class completeFile_result implements org.apache.thrift.TBase<completeFile_result, completeFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<completeFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completeFile_result");

    private static final org.apache.thrift.protocol.TField BIE_FIELD_DESC = new org.apache.thrift.protocol.TField("bie", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new completeFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new completeFile_resultTupleSchemeFactory());
    }

    public BlockInfoException bie; // required
    public FileDoesNotExistException fdnee; // required
    public InvalidPathException ipe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIE((short)1, "bie"),
      FDNEE((short)2, "fdnee"),
      IPE((short)3, "ipe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIE
            return BIE;
          case 2: // FDNEE
            return FDNEE;
          case 3: // IPE
            return IPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIE, new org.apache.thrift.meta_data.FieldMetaData("bie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completeFile_result.class, metaDataMap);
    }

    public completeFile_result() {
    }

    public completeFile_result(
      BlockInfoException bie,
      FileDoesNotExistException fdnee,
      InvalidPathException ipe)
    {
      this();
      this.bie = bie;
      this.fdnee = fdnee;
      this.ipe = ipe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completeFile_result(completeFile_result other) {
      if (other.isSetBie()) {
        this.bie = new BlockInfoException(other.bie);
      }
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
    }

    public completeFile_result deepCopy() {
      return new completeFile_result(this);
    }

    @Override
    public void clear() {
      this.bie = null;
      this.fdnee = null;
      this.ipe = null;
    }

    public BlockInfoException getBie() {
      return this.bie;
    }

    public completeFile_result setBie(BlockInfoException bie) {
      this.bie = bie;
      return this;
    }

    public void unsetBie() {
      this.bie = null;
    }

    /** Returns true if field bie is set (has been assigned a value) and false otherwise */
    public boolean isSetBie() {
      return this.bie != null;
    }

    public void setBieIsSet(boolean value) {
      if (!value) {
        this.bie = null;
      }
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public completeFile_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public completeFile_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIE:
        if (value == null) {
          unsetBie();
        } else {
          setBie((BlockInfoException)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIE:
        return getBie();

      case FDNEE:
        return getFdnee();

      case IPE:
        return getIpe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIE:
        return isSetBie();
      case FDNEE:
        return isSetFdnee();
      case IPE:
        return isSetIpe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completeFile_result)
        return this.equals((completeFile_result)that);
      return false;
    }

    public boolean equals(completeFile_result that) {
      if (that == null)
        return false;

      boolean this_present_bie = true && this.isSetBie();
      boolean that_present_bie = true && that.isSetBie();
      if (this_present_bie || that_present_bie) {
        if (!(this_present_bie && that_present_bie))
          return false;
        if (!this.bie.equals(that.bie))
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bie = true && (isSetBie());
      list.add(present_bie);
      if (present_bie)
        list.add(bie);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      return list.hashCode();
    }

    @Override
    public int compareTo(completeFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBie()).compareTo(other.isSetBie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bie, other.bie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completeFile_result(");
      boolean first = true;

      sb.append("bie:");
      if (this.bie == null) {
        sb.append("null");
      } else {
        sb.append(this.bie);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completeFile_resultStandardSchemeFactory implements SchemeFactory {
      public completeFile_resultStandardScheme getScheme() {
        return new completeFile_resultStandardScheme();
      }
    }

    private static class completeFile_resultStandardScheme extends StandardScheme<completeFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completeFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bie = new BlockInfoException();
                struct.bie.read(iprot);
                struct.setBieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completeFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bie != null) {
          oprot.writeFieldBegin(BIE_FIELD_DESC);
          struct.bie.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completeFile_resultTupleSchemeFactory implements SchemeFactory {
      public completeFile_resultTupleScheme getScheme() {
        return new completeFile_resultTupleScheme();
      }
    }

    private static class completeFile_resultTupleScheme extends TupleScheme<completeFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completeFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBie()) {
          optionals.set(0);
        }
        if (struct.isSetFdnee()) {
          optionals.set(1);
        }
        if (struct.isSetIpe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBie()) {
          struct.bie.write(oprot);
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completeFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bie = new BlockInfoException();
          struct.bie.read(iprot);
          struct.setBieIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
      }
    }

  }

  public static class deleteFile_args implements org.apache.thrift.TBase<deleteFile_args, deleteFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFile_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFile_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public boolean recursive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      RECURSIVE((short)2, "recursive");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // RECURSIVE
            return RECURSIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private static final int __RECURSIVE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_args.class, metaDataMap);
    }

    public deleteFile_args() {
    }

    public deleteFile_args(
      long fileId,
      boolean recursive)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.recursive = recursive;
      setRecursiveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFile_args(deleteFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      this.recursive = other.recursive;
    }

    public deleteFile_args deepCopy() {
      return new deleteFile_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      setRecursiveIsSet(false);
      this.recursive = false;
    }

    public long getFileId() {
      return this.fileId;
    }

    public deleteFile_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public deleteFile_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case RECURSIVE:
        return Boolean.valueOf(isRecursive());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case RECURSIVE:
        return isSetRecursive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFile_args)
        return this.equals((deleteFile_args)that);
      return false;
    }

    public boolean equals(deleteFile_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      boolean present_recursive = true;
      list.add(present_recursive);
      if (present_recursive)
        list.add(recursive);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFile_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFile_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFile_argsStandardScheme getScheme() {
        return new deleteFile_argsStandardScheme();
      }
    }

    private static class deleteFile_argsStandardScheme extends StandardScheme<deleteFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFile_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFile_argsTupleScheme getScheme() {
        return new deleteFile_argsTupleScheme();
      }
    }

    private static class deleteFile_argsTupleScheme extends TupleScheme<deleteFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetRecursive()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
      }
    }

  }

  public static class deleteFile_result implements org.apache.thrift.TBase<deleteFile_result, deleteFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFile_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TachyonException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TE((short)1, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_result.class, metaDataMap);
    }

    public deleteFile_result() {
    }

    public deleteFile_result(
      boolean success,
      TachyonException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFile_result(deleteFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetTe()) {
        this.te = new TachyonException(other.te);
      }
    }

    public deleteFile_result deepCopy() {
      return new deleteFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.te = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TachyonException getTe() {
      return this.te;
    }

    public deleteFile_result setTe(TachyonException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TachyonException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFile_result)
        return this.equals((deleteFile_result)that);
      return false;
    }

    public boolean equals(deleteFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFile_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFile_resultStandardScheme getScheme() {
        return new deleteFile_resultStandardScheme();
      }
    }

    private static class deleteFile_resultStandardScheme extends StandardScheme<deleteFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TachyonException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFile_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFile_resultTupleScheme getScheme() {
        return new deleteFile_resultTupleScheme();
      }
    }

    private static class deleteFile_resultTupleScheme extends TupleScheme<deleteFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.te = new TachyonException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class renameFile_args implements org.apache.thrift.TBase<renameFile_args, renameFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameFile_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField DST_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("dstPath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new renameFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new renameFile_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public String dstPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      DST_PATH((short)2, "dstPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // DST_PATH
            return DST_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DST_PATH, new org.apache.thrift.meta_data.FieldMetaData("dstPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameFile_args.class, metaDataMap);
    }

    public renameFile_args() {
    }

    public renameFile_args(
      long fileId,
      String dstPath)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.dstPath = dstPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameFile_args(renameFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      if (other.isSetDstPath()) {
        this.dstPath = other.dstPath;
      }
    }

    public renameFile_args deepCopy() {
      return new renameFile_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      this.dstPath = null;
    }

    public long getFileId() {
      return this.fileId;
    }

    public renameFile_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public String getDstPath() {
      return this.dstPath;
    }

    public renameFile_args setDstPath(String dstPath) {
      this.dstPath = dstPath;
      return this;
    }

    public void unsetDstPath() {
      this.dstPath = null;
    }

    /** Returns true if field dstPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDstPath() {
      return this.dstPath != null;
    }

    public void setDstPathIsSet(boolean value) {
      if (!value) {
        this.dstPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case DST_PATH:
        if (value == null) {
          unsetDstPath();
        } else {
          setDstPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case DST_PATH:
        return getDstPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case DST_PATH:
        return isSetDstPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameFile_args)
        return this.equals((renameFile_args)that);
      return false;
    }

    public boolean equals(renameFile_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_dstPath = true && this.isSetDstPath();
      boolean that_present_dstPath = true && that.isSetDstPath();
      if (this_present_dstPath || that_present_dstPath) {
        if (!(this_present_dstPath && that_present_dstPath))
          return false;
        if (!this.dstPath.equals(that.dstPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      boolean present_dstPath = true && (isSetDstPath());
      list.add(present_dstPath);
      if (present_dstPath)
        list.add(dstPath);

      return list.hashCode();
    }

    @Override
    public int compareTo(renameFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstPath()).compareTo(other.isSetDstPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstPath, other.dstPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameFile_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstPath:");
      if (this.dstPath == null) {
        sb.append("null");
      } else {
        sb.append(this.dstPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameFile_argsStandardSchemeFactory implements SchemeFactory {
      public renameFile_argsStandardScheme getScheme() {
        return new renameFile_argsStandardScheme();
      }
    }

    private static class renameFile_argsStandardScheme extends StandardScheme<renameFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DST_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstPath = iprot.readString();
                struct.setDstPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        if (struct.dstPath != null) {
          oprot.writeFieldBegin(DST_PATH_FIELD_DESC);
          oprot.writeString(struct.dstPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameFile_argsTupleSchemeFactory implements SchemeFactory {
      public renameFile_argsTupleScheme getScheme() {
        return new renameFile_argsTupleScheme();
      }
    }

    private static class renameFile_argsTupleScheme extends TupleScheme<renameFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetDstPath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetDstPath()) {
          oprot.writeString(struct.dstPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dstPath = iprot.readString();
          struct.setDstPathIsSet(true);
        }
      }
    }

  }

  public static class renameFile_result implements org.apache.thrift.TBase<renameFile_result, renameFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<renameFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField FAEE_FIELD_DESC = new org.apache.thrift.protocol.TField("faee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new renameFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new renameFile_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public FileAlreadyExistException faee; // required
    public FileDoesNotExistException fdnee; // required
    public InvalidPathException ipe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAEE((short)1, "faee"),
      FDNEE((short)2, "fdnee"),
      IPE((short)3, "ipe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAEE
            return FAEE;
          case 2: // FDNEE
            return FDNEE;
          case 3: // IPE
            return IPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FAEE, new org.apache.thrift.meta_data.FieldMetaData("faee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameFile_result.class, metaDataMap);
    }

    public renameFile_result() {
    }

    public renameFile_result(
      boolean success,
      FileAlreadyExistException faee,
      FileDoesNotExistException fdnee,
      InvalidPathException ipe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.faee = faee;
      this.fdnee = fdnee;
      this.ipe = ipe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameFile_result(renameFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetFaee()) {
        this.faee = new FileAlreadyExistException(other.faee);
      }
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
    }

    public renameFile_result deepCopy() {
      return new renameFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.faee = null;
      this.fdnee = null;
      this.ipe = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public renameFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FileAlreadyExistException getFaee() {
      return this.faee;
    }

    public renameFile_result setFaee(FileAlreadyExistException faee) {
      this.faee = faee;
      return this;
    }

    public void unsetFaee() {
      this.faee = null;
    }

    /** Returns true if field faee is set (has been assigned a value) and false otherwise */
    public boolean isSetFaee() {
      return this.faee != null;
    }

    public void setFaeeIsSet(boolean value) {
      if (!value) {
        this.faee = null;
      }
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public renameFile_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public renameFile_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case FAEE:
        if (value == null) {
          unsetFaee();
        } else {
          setFaee((FileAlreadyExistException)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case FAEE:
        return getFaee();

      case FDNEE:
        return getFdnee();

      case IPE:
        return getIpe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAEE:
        return isSetFaee();
      case FDNEE:
        return isSetFdnee();
      case IPE:
        return isSetIpe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameFile_result)
        return this.equals((renameFile_result)that);
      return false;
    }

    public boolean equals(renameFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_faee = true && this.isSetFaee();
      boolean that_present_faee = true && that.isSetFaee();
      if (this_present_faee || that_present_faee) {
        if (!(this_present_faee && that_present_faee))
          return false;
        if (!this.faee.equals(that.faee))
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_faee = true && (isSetFaee());
      list.add(present_faee);
      if (present_faee)
        list.add(faee);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      return list.hashCode();
    }

    @Override
    public int compareTo(renameFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaee()).compareTo(other.isSetFaee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faee, other.faee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faee:");
      if (this.faee == null) {
        sb.append("null");
      } else {
        sb.append(this.faee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameFile_resultStandardSchemeFactory implements SchemeFactory {
      public renameFile_resultStandardScheme getScheme() {
        return new renameFile_resultStandardScheme();
      }
    }

    private static class renameFile_resultStandardScheme extends StandardScheme<renameFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.faee = new FileAlreadyExistException();
                struct.faee.read(iprot);
                struct.setFaeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.faee != null) {
          oprot.writeFieldBegin(FAEE_FIELD_DESC);
          struct.faee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameFile_resultTupleSchemeFactory implements SchemeFactory {
      public renameFile_resultTupleScheme getScheme() {
        return new renameFile_resultTupleScheme();
      }
    }

    private static class renameFile_resultTupleScheme extends TupleScheme<renameFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFaee()) {
          optionals.set(1);
        }
        if (struct.isSetFdnee()) {
          optionals.set(2);
        }
        if (struct.isSetIpe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetFaee()) {
          struct.faee.write(oprot);
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.faee = new FileAlreadyExistException();
          struct.faee.read(iprot);
          struct.setFaeeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
      }
    }

  }

  public static class setPinned_args implements org.apache.thrift.TBase<setPinned_args, setPinned_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPinned_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPinned_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PINNED_FIELD_DESC = new org.apache.thrift.protocol.TField("pinned", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPinned_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPinned_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public boolean pinned; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      PINNED((short)2, "pinned");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // PINNED
            return PINNED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private static final int __PINNED_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PINNED, new org.apache.thrift.meta_data.FieldMetaData("pinned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPinned_args.class, metaDataMap);
    }

    public setPinned_args() {
    }

    public setPinned_args(
      long fileId,
      boolean pinned)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.pinned = pinned;
      setPinnedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPinned_args(setPinned_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      this.pinned = other.pinned;
    }

    public setPinned_args deepCopy() {
      return new setPinned_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      setPinnedIsSet(false);
      this.pinned = false;
    }

    public long getFileId() {
      return this.fileId;
    }

    public setPinned_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public boolean isPinned() {
      return this.pinned;
    }

    public setPinned_args setPinned(boolean pinned) {
      this.pinned = pinned;
      setPinnedIsSet(true);
      return this;
    }

    public void unsetPinned() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PINNED_ISSET_ID);
    }

    /** Returns true if field pinned is set (has been assigned a value) and false otherwise */
    public boolean isSetPinned() {
      return EncodingUtils.testBit(__isset_bitfield, __PINNED_ISSET_ID);
    }

    public void setPinnedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PINNED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case PINNED:
        if (value == null) {
          unsetPinned();
        } else {
          setPinned((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case PINNED:
        return Boolean.valueOf(isPinned());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case PINNED:
        return isSetPinned();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPinned_args)
        return this.equals((setPinned_args)that);
      return false;
    }

    public boolean equals(setPinned_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_pinned = true;
      boolean that_present_pinned = true;
      if (this_present_pinned || that_present_pinned) {
        if (!(this_present_pinned && that_present_pinned))
          return false;
        if (this.pinned != that.pinned)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      boolean present_pinned = true;
      list.add(present_pinned);
      if (present_pinned)
        list.add(pinned);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPinned_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPinned()).compareTo(other.isSetPinned());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPinned()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinned, other.pinned);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPinned_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pinned:");
      sb.append(this.pinned);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPinned_argsStandardSchemeFactory implements SchemeFactory {
      public setPinned_argsStandardScheme getScheme() {
        return new setPinned_argsStandardScheme();
      }
    }

    private static class setPinned_argsStandardScheme extends StandardScheme<setPinned_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPinned_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PINNED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.pinned = iprot.readBool();
                struct.setPinnedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPinned_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PINNED_FIELD_DESC);
        oprot.writeBool(struct.pinned);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPinned_argsTupleSchemeFactory implements SchemeFactory {
      public setPinned_argsTupleScheme getScheme() {
        return new setPinned_argsTupleScheme();
      }
    }

    private static class setPinned_argsTupleScheme extends TupleScheme<setPinned_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPinned_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetPinned()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetPinned()) {
          oprot.writeBool(struct.pinned);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPinned_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pinned = iprot.readBool();
          struct.setPinnedIsSet(true);
        }
      }
    }

  }

  public static class setPinned_result implements org.apache.thrift.TBase<setPinned_result, setPinned_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPinned_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPinned_result");

    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPinned_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPinned_resultTupleSchemeFactory());
    }

    public FileDoesNotExistException fdnee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FDNEE((short)1, "fdnee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FDNEE
            return FDNEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPinned_result.class, metaDataMap);
    }

    public setPinned_result() {
    }

    public setPinned_result(
      FileDoesNotExistException fdnee)
    {
      this();
      this.fdnee = fdnee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPinned_result(setPinned_result other) {
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
    }

    public setPinned_result deepCopy() {
      return new setPinned_result(this);
    }

    @Override
    public void clear() {
      this.fdnee = null;
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public setPinned_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FDNEE:
        return getFdnee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FDNEE:
        return isSetFdnee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPinned_result)
        return this.equals((setPinned_result)that);
      return false;
    }

    public boolean equals(setPinned_result that) {
      if (that == null)
        return false;

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPinned_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPinned_result(");
      boolean first = true;

      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPinned_resultStandardSchemeFactory implements SchemeFactory {
      public setPinned_resultStandardScheme getScheme() {
        return new setPinned_resultStandardScheme();
      }
    }

    private static class setPinned_resultStandardScheme extends StandardScheme<setPinned_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPinned_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPinned_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPinned_resultTupleSchemeFactory implements SchemeFactory {
      public setPinned_resultTupleScheme getScheme() {
        return new setPinned_resultTupleScheme();
      }
    }

    private static class setPinned_resultTupleScheme extends TupleScheme<setPinned_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPinned_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFdnee()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPinned_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
      }
    }

  }

  public static class createDirectory_args implements org.apache.thrift.TBase<createDirectory_args, createDirectory_args._Fields>, java.io.Serializable, Cloneable, Comparable<createDirectory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDirectory_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createDirectory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createDirectory_argsTupleSchemeFactory());
    }

    public String path; // required
    public boolean recursive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      RECURSIVE((short)2, "recursive");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // RECURSIVE
            return RECURSIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECURSIVE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDirectory_args.class, metaDataMap);
    }

    public createDirectory_args() {
    }

    public createDirectory_args(
      String path,
      boolean recursive)
    {
      this();
      this.path = path;
      this.recursive = recursive;
      setRecursiveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDirectory_args(createDirectory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPath()) {
        this.path = other.path;
      }
      this.recursive = other.recursive;
    }

    public createDirectory_args deepCopy() {
      return new createDirectory_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      setRecursiveIsSet(false);
      this.recursive = false;
    }

    public String getPath() {
      return this.path;
    }

    public createDirectory_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public createDirectory_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case RECURSIVE:
        return Boolean.valueOf(isRecursive());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case RECURSIVE:
        return isSetRecursive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createDirectory_args)
        return this.equals((createDirectory_args)that);
      return false;
    }

    public boolean equals(createDirectory_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_path = true && (isSetPath());
      list.add(present_path);
      if (present_path)
        list.add(path);

      boolean present_recursive = true;
      list.add(present_recursive);
      if (present_recursive)
        list.add(recursive);

      return list.hashCode();
    }

    @Override
    public int compareTo(createDirectory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createDirectory_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDirectory_argsStandardSchemeFactory implements SchemeFactory {
      public createDirectory_argsStandardScheme getScheme() {
        return new createDirectory_argsStandardScheme();
      }
    }

    private static class createDirectory_argsStandardScheme extends StandardScheme<createDirectory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDirectory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDirectory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDirectory_argsTupleSchemeFactory implements SchemeFactory {
      public createDirectory_argsTupleScheme getScheme() {
        return new createDirectory_argsTupleScheme();
      }
    }

    private static class createDirectory_argsTupleScheme extends TupleScheme<createDirectory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDirectory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetRecursive()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDirectory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
      }
    }

  }

  public static class createDirectory_result implements org.apache.thrift.TBase<createDirectory_result, createDirectory_result._Fields>, java.io.Serializable, Cloneable, Comparable<createDirectory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDirectory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField FAEE_FIELD_DESC = new org.apache.thrift.protocol.TField("faee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createDirectory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createDirectory_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public FileAlreadyExistException faee; // required
    public InvalidPathException ipe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAEE((short)1, "faee"),
      IPE((short)2, "ipe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAEE
            return FAEE;
          case 2: // IPE
            return IPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FAEE, new org.apache.thrift.meta_data.FieldMetaData("faee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDirectory_result.class, metaDataMap);
    }

    public createDirectory_result() {
    }

    public createDirectory_result(
      boolean success,
      FileAlreadyExistException faee,
      InvalidPathException ipe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.faee = faee;
      this.ipe = ipe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDirectory_result(createDirectory_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetFaee()) {
        this.faee = new FileAlreadyExistException(other.faee);
      }
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
    }

    public createDirectory_result deepCopy() {
      return new createDirectory_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.faee = null;
      this.ipe = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createDirectory_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FileAlreadyExistException getFaee() {
      return this.faee;
    }

    public createDirectory_result setFaee(FileAlreadyExistException faee) {
      this.faee = faee;
      return this;
    }

    public void unsetFaee() {
      this.faee = null;
    }

    /** Returns true if field faee is set (has been assigned a value) and false otherwise */
    public boolean isSetFaee() {
      return this.faee != null;
    }

    public void setFaeeIsSet(boolean value) {
      if (!value) {
        this.faee = null;
      }
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public createDirectory_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case FAEE:
        if (value == null) {
          unsetFaee();
        } else {
          setFaee((FileAlreadyExistException)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case FAEE:
        return getFaee();

      case IPE:
        return getIpe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAEE:
        return isSetFaee();
      case IPE:
        return isSetIpe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createDirectory_result)
        return this.equals((createDirectory_result)that);
      return false;
    }

    public boolean equals(createDirectory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_faee = true && this.isSetFaee();
      boolean that_present_faee = true && that.isSetFaee();
      if (this_present_faee || that_present_faee) {
        if (!(this_present_faee && that_present_faee))
          return false;
        if (!this.faee.equals(that.faee))
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_faee = true && (isSetFaee());
      list.add(present_faee);
      if (present_faee)
        list.add(faee);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      return list.hashCode();
    }

    @Override
    public int compareTo(createDirectory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaee()).compareTo(other.isSetFaee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faee, other.faee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createDirectory_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faee:");
      if (this.faee == null) {
        sb.append("null");
      } else {
        sb.append(this.faee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDirectory_resultStandardSchemeFactory implements SchemeFactory {
      public createDirectory_resultStandardScheme getScheme() {
        return new createDirectory_resultStandardScheme();
      }
    }

    private static class createDirectory_resultStandardScheme extends StandardScheme<createDirectory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDirectory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.faee = new FileAlreadyExistException();
                struct.faee.read(iprot);
                struct.setFaeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDirectory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.faee != null) {
          oprot.writeFieldBegin(FAEE_FIELD_DESC);
          struct.faee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDirectory_resultTupleSchemeFactory implements SchemeFactory {
      public createDirectory_resultTupleScheme getScheme() {
        return new createDirectory_resultTupleScheme();
      }
    }

    private static class createDirectory_resultTupleScheme extends TupleScheme<createDirectory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDirectory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFaee()) {
          optionals.set(1);
        }
        if (struct.isSetIpe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetFaee()) {
          struct.faee.write(oprot);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDirectory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.faee = new FileAlreadyExistException();
          struct.faee.read(iprot);
          struct.setFaeeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
      }
    }

  }

  public static class free_args implements org.apache.thrift.TBase<free_args, free_args._Fields>, java.io.Serializable, Cloneable, Comparable<free_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("free_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new free_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new free_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public boolean recursive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      RECURSIVE((short)2, "recursive");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // RECURSIVE
            return RECURSIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private static final int __RECURSIVE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(free_args.class, metaDataMap);
    }

    public free_args() {
    }

    public free_args(
      long fileId,
      boolean recursive)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.recursive = recursive;
      setRecursiveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public free_args(free_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      this.recursive = other.recursive;
    }

    public free_args deepCopy() {
      return new free_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      setRecursiveIsSet(false);
      this.recursive = false;
    }

    public long getFileId() {
      return this.fileId;
    }

    public free_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public free_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case RECURSIVE:
        return Boolean.valueOf(isRecursive());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case RECURSIVE:
        return isSetRecursive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof free_args)
        return this.equals((free_args)that);
      return false;
    }

    public boolean equals(free_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      boolean present_recursive = true;
      list.add(present_recursive);
      if (present_recursive)
        list.add(recursive);

      return list.hashCode();
    }

    @Override
    public int compareTo(free_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("free_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class free_argsStandardSchemeFactory implements SchemeFactory {
      public free_argsStandardScheme getScheme() {
        return new free_argsStandardScheme();
      }
    }

    private static class free_argsStandardScheme extends StandardScheme<free_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, free_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, free_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class free_argsTupleSchemeFactory implements SchemeFactory {
      public free_argsTupleScheme getScheme() {
        return new free_argsTupleScheme();
      }
    }

    private static class free_argsTupleScheme extends TupleScheme<free_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, free_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetRecursive()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, free_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
      }
    }

  }

  public static class free_result implements org.apache.thrift.TBase<free_result, free_result._Fields>, java.io.Serializable, Cloneable, Comparable<free_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("free_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new free_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new free_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public FileDoesNotExistException fdnee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FDNEE((short)1, "fdnee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FDNEE
            return FDNEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(free_result.class, metaDataMap);
    }

    public free_result() {
    }

    public free_result(
      boolean success,
      FileDoesNotExistException fdnee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.fdnee = fdnee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public free_result(free_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
    }

    public free_result deepCopy() {
      return new free_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.fdnee = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public free_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public free_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case FDNEE:
        return getFdnee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FDNEE:
        return isSetFdnee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof free_result)
        return this.equals((free_result)that);
      return false;
    }

    public boolean equals(free_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      return list.hashCode();
    }

    @Override
    public int compareTo(free_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("free_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class free_resultStandardSchemeFactory implements SchemeFactory {
      public free_resultStandardScheme getScheme() {
        return new free_resultStandardScheme();
      }
    }

    private static class free_resultStandardScheme extends StandardScheme<free_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, free_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, free_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class free_resultTupleSchemeFactory implements SchemeFactory {
      public free_resultTupleScheme getScheme() {
        return new free_resultTupleScheme();
      }
    }

    private static class free_resultTupleScheme extends TupleScheme<free_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, free_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFdnee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, free_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
      }
    }

  }

  public static class persistFile_args implements org.apache.thrift.TBase<persistFile_args, persistFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<persistFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("persistFile_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new persistFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new persistFile_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public long length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      LENGTH((short)2, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private static final int __LENGTH_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(persistFile_args.class, metaDataMap);
    }

    public persistFile_args() {
    }

    public persistFile_args(
      long fileId,
      long length)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public persistFile_args(persistFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      this.length = other.length;
    }

    public persistFile_args deepCopy() {
      return new persistFile_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public persistFile_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public long getLength() {
      return this.length;
    }

    public persistFile_args setLength(long length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case LENGTH:
        return Long.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof persistFile_args)
        return this.equals((persistFile_args)that);
      return false;
    }

    public boolean equals(persistFile_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      boolean present_length = true;
      list.add(present_length);
      if (present_length)
        list.add(length);

      return list.hashCode();
    }

    @Override
    public int compareTo(persistFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("persistFile_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class persistFile_argsStandardSchemeFactory implements SchemeFactory {
      public persistFile_argsStandardScheme getScheme() {
        return new persistFile_argsStandardScheme();
      }
    }

    private static class persistFile_argsStandardScheme extends StandardScheme<persistFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, persistFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.length = iprot.readI64();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, persistFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI64(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class persistFile_argsTupleSchemeFactory implements SchemeFactory {
      public persistFile_argsTupleScheme getScheme() {
        return new persistFile_argsTupleScheme();
      }
    }

    private static class persistFile_argsTupleScheme extends TupleScheme<persistFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, persistFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetLength()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetLength()) {
          oprot.writeI64(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, persistFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.length = iprot.readI64();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class persistFile_result implements org.apache.thrift.TBase<persistFile_result, persistFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<persistFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("persistFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_P_FIELD_DESC = new org.apache.thrift.protocol.TField("eP", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_S_FIELD_DESC = new org.apache.thrift.protocol.TField("eS", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_B_FIELD_DESC = new org.apache.thrift.protocol.TField("eB", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new persistFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new persistFile_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public FileDoesNotExistException eP; // required
    public SuspectedFileSizeException eS; // required
    public BlockInfoException eB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_P((short)1, "eP"),
      E_S((short)2, "eS"),
      E_B((short)3, "eB");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_P
            return E_P;
          case 2: // E_S
            return E_S;
          case 3: // E_B
            return E_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E_P, new org.apache.thrift.meta_data.FieldMetaData("eP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_S, new org.apache.thrift.meta_data.FieldMetaData("eS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_B, new org.apache.thrift.meta_data.FieldMetaData("eB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(persistFile_result.class, metaDataMap);
    }

    public persistFile_result() {
    }

    public persistFile_result(
      boolean success,
      FileDoesNotExistException eP,
      SuspectedFileSizeException eS,
      BlockInfoException eB)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.eP = eP;
      this.eS = eS;
      this.eB = eB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public persistFile_result(persistFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEP()) {
        this.eP = new FileDoesNotExistException(other.eP);
      }
      if (other.isSetES()) {
        this.eS = new SuspectedFileSizeException(other.eS);
      }
      if (other.isSetEB()) {
        this.eB = new BlockInfoException(other.eB);
      }
    }

    public persistFile_result deepCopy() {
      return new persistFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.eP = null;
      this.eS = null;
      this.eB = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public persistFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FileDoesNotExistException getEP() {
      return this.eP;
    }

    public persistFile_result setEP(FileDoesNotExistException eP) {
      this.eP = eP;
      return this;
    }

    public void unsetEP() {
      this.eP = null;
    }

    /** Returns true if field eP is set (has been assigned a value) and false otherwise */
    public boolean isSetEP() {
      return this.eP != null;
    }

    public void setEPIsSet(boolean value) {
      if (!value) {
        this.eP = null;
      }
    }

    public SuspectedFileSizeException getES() {
      return this.eS;
    }

    public persistFile_result setES(SuspectedFileSizeException eS) {
      this.eS = eS;
      return this;
    }

    public void unsetES() {
      this.eS = null;
    }

    /** Returns true if field eS is set (has been assigned a value) and false otherwise */
    public boolean isSetES() {
      return this.eS != null;
    }

    public void setESIsSet(boolean value) {
      if (!value) {
        this.eS = null;
      }
    }

    public BlockInfoException getEB() {
      return this.eB;
    }

    public persistFile_result setEB(BlockInfoException eB) {
      this.eB = eB;
      return this;
    }

    public void unsetEB() {
      this.eB = null;
    }

    /** Returns true if field eB is set (has been assigned a value) and false otherwise */
    public boolean isSetEB() {
      return this.eB != null;
    }

    public void setEBIsSet(boolean value) {
      if (!value) {
        this.eB = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E_P:
        if (value == null) {
          unsetEP();
        } else {
          setEP((FileDoesNotExistException)value);
        }
        break;

      case E_S:
        if (value == null) {
          unsetES();
        } else {
          setES((SuspectedFileSizeException)value);
        }
        break;

      case E_B:
        if (value == null) {
          unsetEB();
        } else {
          setEB((BlockInfoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E_P:
        return getEP();

      case E_S:
        return getES();

      case E_B:
        return getEB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_P:
        return isSetEP();
      case E_S:
        return isSetES();
      case E_B:
        return isSetEB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof persistFile_result)
        return this.equals((persistFile_result)that);
      return false;
    }

    public boolean equals(persistFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_eP = true && this.isSetEP();
      boolean that_present_eP = true && that.isSetEP();
      if (this_present_eP || that_present_eP) {
        if (!(this_present_eP && that_present_eP))
          return false;
        if (!this.eP.equals(that.eP))
          return false;
      }

      boolean this_present_eS = true && this.isSetES();
      boolean that_present_eS = true && that.isSetES();
      if (this_present_eS || that_present_eS) {
        if (!(this_present_eS && that_present_eS))
          return false;
        if (!this.eS.equals(that.eS))
          return false;
      }

      boolean this_present_eB = true && this.isSetEB();
      boolean that_present_eB = true && that.isSetEB();
      if (this_present_eB || that_present_eB) {
        if (!(this_present_eB && that_present_eB))
          return false;
        if (!this.eB.equals(that.eB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_eP = true && (isSetEP());
      list.add(present_eP);
      if (present_eP)
        list.add(eP);

      boolean present_eS = true && (isSetES());
      list.add(present_eS);
      if (present_eS)
        list.add(eS);

      boolean present_eB = true && (isSetEB());
      list.add(present_eB);
      if (present_eB)
        list.add(eB);

      return list.hashCode();
    }

    @Override
    public int compareTo(persistFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEP()).compareTo(other.isSetEP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eP, other.eP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetES()).compareTo(other.isSetES());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetES()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eS, other.eS);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEB()).compareTo(other.isSetEB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eB, other.eB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("persistFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("eP:");
      if (this.eP == null) {
        sb.append("null");
      } else {
        sb.append(this.eP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eS:");
      if (this.eS == null) {
        sb.append("null");
      } else {
        sb.append(this.eS);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eB:");
      if (this.eB == null) {
        sb.append("null");
      } else {
        sb.append(this.eB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class persistFile_resultStandardSchemeFactory implements SchemeFactory {
      public persistFile_resultStandardScheme getScheme() {
        return new persistFile_resultStandardScheme();
      }
    }

    private static class persistFile_resultStandardScheme extends StandardScheme<persistFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, persistFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E_P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eP = new FileDoesNotExistException();
                struct.eP.read(iprot);
                struct.setEPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_S
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eS = new SuspectedFileSizeException();
                struct.eS.read(iprot);
                struct.setESIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eB = new BlockInfoException();
                struct.eB.read(iprot);
                struct.setEBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, persistFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.eP != null) {
          oprot.writeFieldBegin(E_P_FIELD_DESC);
          struct.eP.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eS != null) {
          oprot.writeFieldBegin(E_S_FIELD_DESC);
          struct.eS.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eB != null) {
          oprot.writeFieldBegin(E_B_FIELD_DESC);
          struct.eB.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class persistFile_resultTupleSchemeFactory implements SchemeFactory {
      public persistFile_resultTupleScheme getScheme() {
        return new persistFile_resultTupleScheme();
      }
    }

    private static class persistFile_resultTupleScheme extends TupleScheme<persistFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, persistFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEP()) {
          optionals.set(1);
        }
        if (struct.isSetES()) {
          optionals.set(2);
        }
        if (struct.isSetEB()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEP()) {
          struct.eP.write(oprot);
        }
        if (struct.isSetES()) {
          struct.eS.write(oprot);
        }
        if (struct.isSetEB()) {
          struct.eB.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, persistFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eP = new FileDoesNotExistException();
          struct.eP.read(iprot);
          struct.setEPIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eS = new SuspectedFileSizeException();
          struct.eS.read(iprot);
          struct.setESIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eB = new BlockInfoException();
          struct.eB.read(iprot);
          struct.setEBIsSet(true);
        }
      }
    }

  }

  public static class loadFileInfoFromUfs_args implements org.apache.thrift.TBase<loadFileInfoFromUfs_args, loadFileInfoFromUfs_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadFileInfoFromUfs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFileInfoFromUfs_args");

    private static final org.apache.thrift.protocol.TField UFS_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("ufsPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFileInfoFromUfs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFileInfoFromUfs_argsTupleSchemeFactory());
    }

    public String ufsPath; // required
    public boolean recursive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UFS_PATH((short)1, "ufsPath"),
      RECURSIVE((short)2, "recursive");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UFS_PATH
            return UFS_PATH;
          case 2: // RECURSIVE
            return RECURSIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECURSIVE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UFS_PATH, new org.apache.thrift.meta_data.FieldMetaData("ufsPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFileInfoFromUfs_args.class, metaDataMap);
    }

    public loadFileInfoFromUfs_args() {
    }

    public loadFileInfoFromUfs_args(
      String ufsPath,
      boolean recursive)
    {
      this();
      this.ufsPath = ufsPath;
      this.recursive = recursive;
      setRecursiveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFileInfoFromUfs_args(loadFileInfoFromUfs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUfsPath()) {
        this.ufsPath = other.ufsPath;
      }
      this.recursive = other.recursive;
    }

    public loadFileInfoFromUfs_args deepCopy() {
      return new loadFileInfoFromUfs_args(this);
    }

    @Override
    public void clear() {
      this.ufsPath = null;
      setRecursiveIsSet(false);
      this.recursive = false;
    }

    public String getUfsPath() {
      return this.ufsPath;
    }

    public loadFileInfoFromUfs_args setUfsPath(String ufsPath) {
      this.ufsPath = ufsPath;
      return this;
    }

    public void unsetUfsPath() {
      this.ufsPath = null;
    }

    /** Returns true if field ufsPath is set (has been assigned a value) and false otherwise */
    public boolean isSetUfsPath() {
      return this.ufsPath != null;
    }

    public void setUfsPathIsSet(boolean value) {
      if (!value) {
        this.ufsPath = null;
      }
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public loadFileInfoFromUfs_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UFS_PATH:
        if (value == null) {
          unsetUfsPath();
        } else {
          setUfsPath((String)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UFS_PATH:
        return getUfsPath();

      case RECURSIVE:
        return Boolean.valueOf(isRecursive());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UFS_PATH:
        return isSetUfsPath();
      case RECURSIVE:
        return isSetRecursive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFileInfoFromUfs_args)
        return this.equals((loadFileInfoFromUfs_args)that);
      return false;
    }

    public boolean equals(loadFileInfoFromUfs_args that) {
      if (that == null)
        return false;

      boolean this_present_ufsPath = true && this.isSetUfsPath();
      boolean that_present_ufsPath = true && that.isSetUfsPath();
      if (this_present_ufsPath || that_present_ufsPath) {
        if (!(this_present_ufsPath && that_present_ufsPath))
          return false;
        if (!this.ufsPath.equals(that.ufsPath))
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ufsPath = true && (isSetUfsPath());
      list.add(present_ufsPath);
      if (present_ufsPath)
        list.add(ufsPath);

      boolean present_recursive = true;
      list.add(present_recursive);
      if (present_recursive)
        list.add(recursive);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadFileInfoFromUfs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUfsPath()).compareTo(other.isSetUfsPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUfsPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ufsPath, other.ufsPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFileInfoFromUfs_args(");
      boolean first = true;

      sb.append("ufsPath:");
      if (this.ufsPath == null) {
        sb.append("null");
      } else {
        sb.append(this.ufsPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFileInfoFromUfs_argsStandardSchemeFactory implements SchemeFactory {
      public loadFileInfoFromUfs_argsStandardScheme getScheme() {
        return new loadFileInfoFromUfs_argsStandardScheme();
      }
    }

    private static class loadFileInfoFromUfs_argsStandardScheme extends StandardScheme<loadFileInfoFromUfs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFileInfoFromUfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UFS_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ufsPath = iprot.readString();
                struct.setUfsPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFileInfoFromUfs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ufsPath != null) {
          oprot.writeFieldBegin(UFS_PATH_FIELD_DESC);
          oprot.writeString(struct.ufsPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFileInfoFromUfs_argsTupleSchemeFactory implements SchemeFactory {
      public loadFileInfoFromUfs_argsTupleScheme getScheme() {
        return new loadFileInfoFromUfs_argsTupleScheme();
      }
    }

    private static class loadFileInfoFromUfs_argsTupleScheme extends TupleScheme<loadFileInfoFromUfs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFileInfoFromUfs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUfsPath()) {
          optionals.set(0);
        }
        if (struct.isSetRecursive()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUfsPath()) {
          oprot.writeString(struct.ufsPath);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFileInfoFromUfs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ufsPath = iprot.readString();
          struct.setUfsPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
      }
    }

  }

  public static class loadFileInfoFromUfs_result implements org.apache.thrift.TBase<loadFileInfoFromUfs_result, loadFileInfoFromUfs_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadFileInfoFromUfs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFileInfoFromUfs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField BIE_FIELD_DESC = new org.apache.thrift.protocol.TField("bie", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FAEE_FIELD_DESC = new org.apache.thrift.protocol.TField("faee", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SFSE_FIELD_DESC = new org.apache.thrift.protocol.TField("sfse", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFileInfoFromUfs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFileInfoFromUfs_resultTupleSchemeFactory());
    }

    public long success; // required
    public BlockInfoException bie; // required
    public FileDoesNotExistException fdnee; // required
    public FileAlreadyExistException faee; // required
    public InvalidPathException ipe; // required
    public SuspectedFileSizeException sfse; // required
    public TachyonException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BIE((short)1, "bie"),
      FDNEE((short)2, "fdnee"),
      FAEE((short)3, "faee"),
      IPE((short)4, "ipe"),
      SFSE((short)5, "sfse"),
      TE((short)6, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BIE
            return BIE;
          case 2: // FDNEE
            return FDNEE;
          case 3: // FAEE
            return FAEE;
          case 4: // IPE
            return IPE;
          case 5: // SFSE
            return SFSE;
          case 6: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BIE, new org.apache.thrift.meta_data.FieldMetaData("bie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FAEE, new org.apache.thrift.meta_data.FieldMetaData("faee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SFSE, new org.apache.thrift.meta_data.FieldMetaData("sfse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFileInfoFromUfs_result.class, metaDataMap);
    }

    public loadFileInfoFromUfs_result() {
    }

    public loadFileInfoFromUfs_result(
      long success,
      BlockInfoException bie,
      FileDoesNotExistException fdnee,
      FileAlreadyExistException faee,
      InvalidPathException ipe,
      SuspectedFileSizeException sfse,
      TachyonException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.bie = bie;
      this.fdnee = fdnee;
      this.faee = faee;
      this.ipe = ipe;
      this.sfse = sfse;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFileInfoFromUfs_result(loadFileInfoFromUfs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetBie()) {
        this.bie = new BlockInfoException(other.bie);
      }
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
      if (other.isSetFaee()) {
        this.faee = new FileAlreadyExistException(other.faee);
      }
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
      if (other.isSetSfse()) {
        this.sfse = new SuspectedFileSizeException(other.sfse);
      }
      if (other.isSetTe()) {
        this.te = new TachyonException(other.te);
      }
    }

    public loadFileInfoFromUfs_result deepCopy() {
      return new loadFileInfoFromUfs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.bie = null;
      this.fdnee = null;
      this.faee = null;
      this.ipe = null;
      this.sfse = null;
      this.te = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public loadFileInfoFromUfs_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BlockInfoException getBie() {
      return this.bie;
    }

    public loadFileInfoFromUfs_result setBie(BlockInfoException bie) {
      this.bie = bie;
      return this;
    }

    public void unsetBie() {
      this.bie = null;
    }

    /** Returns true if field bie is set (has been assigned a value) and false otherwise */
    public boolean isSetBie() {
      return this.bie != null;
    }

    public void setBieIsSet(boolean value) {
      if (!value) {
        this.bie = null;
      }
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public loadFileInfoFromUfs_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public FileAlreadyExistException getFaee() {
      return this.faee;
    }

    public loadFileInfoFromUfs_result setFaee(FileAlreadyExistException faee) {
      this.faee = faee;
      return this;
    }

    public void unsetFaee() {
      this.faee = null;
    }

    /** Returns true if field faee is set (has been assigned a value) and false otherwise */
    public boolean isSetFaee() {
      return this.faee != null;
    }

    public void setFaeeIsSet(boolean value) {
      if (!value) {
        this.faee = null;
      }
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public loadFileInfoFromUfs_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public SuspectedFileSizeException getSfse() {
      return this.sfse;
    }

    public loadFileInfoFromUfs_result setSfse(SuspectedFileSizeException sfse) {
      this.sfse = sfse;
      return this;
    }

    public void unsetSfse() {
      this.sfse = null;
    }

    /** Returns true if field sfse is set (has been assigned a value) and false otherwise */
    public boolean isSetSfse() {
      return this.sfse != null;
    }

    public void setSfseIsSet(boolean value) {
      if (!value) {
        this.sfse = null;
      }
    }

    public TachyonException getTe() {
      return this.te;
    }

    public loadFileInfoFromUfs_result setTe(TachyonException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case BIE:
        if (value == null) {
          unsetBie();
        } else {
          setBie((BlockInfoException)value);
        }
        break;

      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      case FAEE:
        if (value == null) {
          unsetFaee();
        } else {
          setFaee((FileAlreadyExistException)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      case SFSE:
        if (value == null) {
          unsetSfse();
        } else {
          setSfse((SuspectedFileSizeException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TachyonException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case BIE:
        return getBie();

      case FDNEE:
        return getFdnee();

      case FAEE:
        return getFaee();

      case IPE:
        return getIpe();

      case SFSE:
        return getSfse();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BIE:
        return isSetBie();
      case FDNEE:
        return isSetFdnee();
      case FAEE:
        return isSetFaee();
      case IPE:
        return isSetIpe();
      case SFSE:
        return isSetSfse();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFileInfoFromUfs_result)
        return this.equals((loadFileInfoFromUfs_result)that);
      return false;
    }

    public boolean equals(loadFileInfoFromUfs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_bie = true && this.isSetBie();
      boolean that_present_bie = true && that.isSetBie();
      if (this_present_bie || that_present_bie) {
        if (!(this_present_bie && that_present_bie))
          return false;
        if (!this.bie.equals(that.bie))
          return false;
      }

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      boolean this_present_faee = true && this.isSetFaee();
      boolean that_present_faee = true && that.isSetFaee();
      if (this_present_faee || that_present_faee) {
        if (!(this_present_faee && that_present_faee))
          return false;
        if (!this.faee.equals(that.faee))
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      boolean this_present_sfse = true && this.isSetSfse();
      boolean that_present_sfse = true && that.isSetSfse();
      if (this_present_sfse || that_present_sfse) {
        if (!(this_present_sfse && that_present_sfse))
          return false;
        if (!this.sfse.equals(that.sfse))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bie = true && (isSetBie());
      list.add(present_bie);
      if (present_bie)
        list.add(bie);

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      boolean present_faee = true && (isSetFaee());
      list.add(present_faee);
      if (present_faee)
        list.add(faee);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      boolean present_sfse = true && (isSetSfse());
      list.add(present_sfse);
      if (present_sfse)
        list.add(sfse);

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadFileInfoFromUfs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBie()).compareTo(other.isSetBie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bie, other.bie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaee()).compareTo(other.isSetFaee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faee, other.faee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSfse()).compareTo(other.isSetSfse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSfse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sfse, other.sfse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFileInfoFromUfs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bie:");
      if (this.bie == null) {
        sb.append("null");
      } else {
        sb.append(this.bie);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("faee:");
      if (this.faee == null) {
        sb.append("null");
      } else {
        sb.append(this.faee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sfse:");
      if (this.sfse == null) {
        sb.append("null");
      } else {
        sb.append(this.sfse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFileInfoFromUfs_resultStandardSchemeFactory implements SchemeFactory {
      public loadFileInfoFromUfs_resultStandardScheme getScheme() {
        return new loadFileInfoFromUfs_resultStandardScheme();
      }
    }

    private static class loadFileInfoFromUfs_resultStandardScheme extends StandardScheme<loadFileInfoFromUfs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFileInfoFromUfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BIE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bie = new BlockInfoException();
                struct.bie.read(iprot);
                struct.setBieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FAEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.faee = new FileAlreadyExistException();
                struct.faee.read(iprot);
                struct.setFaeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SFSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sfse = new SuspectedFileSizeException();
                struct.sfse.read(iprot);
                struct.setSfseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TachyonException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFileInfoFromUfs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.bie != null) {
          oprot.writeFieldBegin(BIE_FIELD_DESC);
          struct.bie.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.faee != null) {
          oprot.writeFieldBegin(FAEE_FIELD_DESC);
          struct.faee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sfse != null) {
          oprot.writeFieldBegin(SFSE_FIELD_DESC);
          struct.sfse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFileInfoFromUfs_resultTupleSchemeFactory implements SchemeFactory {
      public loadFileInfoFromUfs_resultTupleScheme getScheme() {
        return new loadFileInfoFromUfs_resultTupleScheme();
      }
    }

    private static class loadFileInfoFromUfs_resultTupleScheme extends TupleScheme<loadFileInfoFromUfs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFileInfoFromUfs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBie()) {
          optionals.set(1);
        }
        if (struct.isSetFdnee()) {
          optionals.set(2);
        }
        if (struct.isSetFaee()) {
          optionals.set(3);
        }
        if (struct.isSetIpe()) {
          optionals.set(4);
        }
        if (struct.isSetSfse()) {
          optionals.set(5);
        }
        if (struct.isSetTe()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetBie()) {
          struct.bie.write(oprot);
        }
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
        if (struct.isSetFaee()) {
          struct.faee.write(oprot);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
        if (struct.isSetSfse()) {
          struct.sfse.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFileInfoFromUfs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bie = new BlockInfoException();
          struct.bie.read(iprot);
          struct.setBieIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.faee = new FileAlreadyExistException();
          struct.faee.read(iprot);
          struct.setFaeeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sfse = new SuspectedFileSizeException();
          struct.sfse.read(iprot);
          struct.setSfseIsSet(true);
        }
        if (incoming.get(6)) {
          struct.te = new TachyonException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class mount_args implements org.apache.thrift.TBase<mount_args, mount_args._Fields>, java.io.Serializable, Cloneable, Comparable<mount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mount_args");

    private static final org.apache.thrift.protocol.TField TACHYON_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("tachyonPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UFS_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("ufsPath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mount_argsTupleSchemeFactory());
    }

    public String tachyonPath; // required
    public String ufsPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TACHYON_PATH((short)1, "tachyonPath"),
      UFS_PATH((short)2, "ufsPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TACHYON_PATH
            return TACHYON_PATH;
          case 2: // UFS_PATH
            return UFS_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TACHYON_PATH, new org.apache.thrift.meta_data.FieldMetaData("tachyonPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UFS_PATH, new org.apache.thrift.meta_data.FieldMetaData("ufsPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mount_args.class, metaDataMap);
    }

    public mount_args() {
    }

    public mount_args(
      String tachyonPath,
      String ufsPath)
    {
      this();
      this.tachyonPath = tachyonPath;
      this.ufsPath = ufsPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mount_args(mount_args other) {
      if (other.isSetTachyonPath()) {
        this.tachyonPath = other.tachyonPath;
      }
      if (other.isSetUfsPath()) {
        this.ufsPath = other.ufsPath;
      }
    }

    public mount_args deepCopy() {
      return new mount_args(this);
    }

    @Override
    public void clear() {
      this.tachyonPath = null;
      this.ufsPath = null;
    }

    public String getTachyonPath() {
      return this.tachyonPath;
    }

    public mount_args setTachyonPath(String tachyonPath) {
      this.tachyonPath = tachyonPath;
      return this;
    }

    public void unsetTachyonPath() {
      this.tachyonPath = null;
    }

    /** Returns true if field tachyonPath is set (has been assigned a value) and false otherwise */
    public boolean isSetTachyonPath() {
      return this.tachyonPath != null;
    }

    public void setTachyonPathIsSet(boolean value) {
      if (!value) {
        this.tachyonPath = null;
      }
    }

    public String getUfsPath() {
      return this.ufsPath;
    }

    public mount_args setUfsPath(String ufsPath) {
      this.ufsPath = ufsPath;
      return this;
    }

    public void unsetUfsPath() {
      this.ufsPath = null;
    }

    /** Returns true if field ufsPath is set (has been assigned a value) and false otherwise */
    public boolean isSetUfsPath() {
      return this.ufsPath != null;
    }

    public void setUfsPathIsSet(boolean value) {
      if (!value) {
        this.ufsPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TACHYON_PATH:
        if (value == null) {
          unsetTachyonPath();
        } else {
          setTachyonPath((String)value);
        }
        break;

      case UFS_PATH:
        if (value == null) {
          unsetUfsPath();
        } else {
          setUfsPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TACHYON_PATH:
        return getTachyonPath();

      case UFS_PATH:
        return getUfsPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TACHYON_PATH:
        return isSetTachyonPath();
      case UFS_PATH:
        return isSetUfsPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mount_args)
        return this.equals((mount_args)that);
      return false;
    }

    public boolean equals(mount_args that) {
      if (that == null)
        return false;

      boolean this_present_tachyonPath = true && this.isSetTachyonPath();
      boolean that_present_tachyonPath = true && that.isSetTachyonPath();
      if (this_present_tachyonPath || that_present_tachyonPath) {
        if (!(this_present_tachyonPath && that_present_tachyonPath))
          return false;
        if (!this.tachyonPath.equals(that.tachyonPath))
          return false;
      }

      boolean this_present_ufsPath = true && this.isSetUfsPath();
      boolean that_present_ufsPath = true && that.isSetUfsPath();
      if (this_present_ufsPath || that_present_ufsPath) {
        if (!(this_present_ufsPath && that_present_ufsPath))
          return false;
        if (!this.ufsPath.equals(that.ufsPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tachyonPath = true && (isSetTachyonPath());
      list.add(present_tachyonPath);
      if (present_tachyonPath)
        list.add(tachyonPath);

      boolean present_ufsPath = true && (isSetUfsPath());
      list.add(present_ufsPath);
      if (present_ufsPath)
        list.add(ufsPath);

      return list.hashCode();
    }

    @Override
    public int compareTo(mount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTachyonPath()).compareTo(other.isSetTachyonPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTachyonPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tachyonPath, other.tachyonPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUfsPath()).compareTo(other.isSetUfsPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUfsPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ufsPath, other.ufsPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mount_args(");
      boolean first = true;

      sb.append("tachyonPath:");
      if (this.tachyonPath == null) {
        sb.append("null");
      } else {
        sb.append(this.tachyonPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ufsPath:");
      if (this.ufsPath == null) {
        sb.append("null");
      } else {
        sb.append(this.ufsPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mount_argsStandardSchemeFactory implements SchemeFactory {
      public mount_argsStandardScheme getScheme() {
        return new mount_argsStandardScheme();
      }
    }

    private static class mount_argsStandardScheme extends StandardScheme<mount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TACHYON_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tachyonPath = iprot.readString();
                struct.setTachyonPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UFS_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ufsPath = iprot.readString();
                struct.setUfsPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tachyonPath != null) {
          oprot.writeFieldBegin(TACHYON_PATH_FIELD_DESC);
          oprot.writeString(struct.tachyonPath);
          oprot.writeFieldEnd();
        }
        if (struct.ufsPath != null) {
          oprot.writeFieldBegin(UFS_PATH_FIELD_DESC);
          oprot.writeString(struct.ufsPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mount_argsTupleSchemeFactory implements SchemeFactory {
      public mount_argsTupleScheme getScheme() {
        return new mount_argsTupleScheme();
      }
    }

    private static class mount_argsTupleScheme extends TupleScheme<mount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTachyonPath()) {
          optionals.set(0);
        }
        if (struct.isSetUfsPath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTachyonPath()) {
          oprot.writeString(struct.tachyonPath);
        }
        if (struct.isSetUfsPath()) {
          oprot.writeString(struct.ufsPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tachyonPath = iprot.readString();
          struct.setTachyonPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ufsPath = iprot.readString();
          struct.setUfsPathIsSet(true);
        }
      }
    }

  }

  public static class mount_result implements org.apache.thrift.TBase<mount_result, mount_result._Fields>, java.io.Serializable, Cloneable, Comparable<mount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mount_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TachyonException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TE((short)1, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mount_result.class, metaDataMap);
    }

    public mount_result() {
    }

    public mount_result(
      boolean success,
      TachyonException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mount_result(mount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetTe()) {
        this.te = new TachyonException(other.te);
      }
    }

    public mount_result deepCopy() {
      return new mount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.te = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public mount_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TachyonException getTe() {
      return this.te;
    }

    public mount_result setTe(TachyonException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TachyonException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mount_result)
        return this.equals((mount_result)that);
      return false;
    }

    public boolean equals(mount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(mount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mount_resultStandardSchemeFactory implements SchemeFactory {
      public mount_resultStandardScheme getScheme() {
        return new mount_resultStandardScheme();
      }
    }

    private static class mount_resultStandardScheme extends StandardScheme<mount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TachyonException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mount_resultTupleSchemeFactory implements SchemeFactory {
      public mount_resultTupleScheme getScheme() {
        return new mount_resultTupleScheme();
      }
    }

    private static class mount_resultTupleScheme extends TupleScheme<mount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.te = new TachyonException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class unmount_args implements org.apache.thrift.TBase<unmount_args, unmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<unmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unmount_args");

    private static final org.apache.thrift.protocol.TField TACHYON_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("tachyonPath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unmount_argsTupleSchemeFactory());
    }

    public String tachyonPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TACHYON_PATH((short)1, "tachyonPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TACHYON_PATH
            return TACHYON_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TACHYON_PATH, new org.apache.thrift.meta_data.FieldMetaData("tachyonPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unmount_args.class, metaDataMap);
    }

    public unmount_args() {
    }

    public unmount_args(
      String tachyonPath)
    {
      this();
      this.tachyonPath = tachyonPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unmount_args(unmount_args other) {
      if (other.isSetTachyonPath()) {
        this.tachyonPath = other.tachyonPath;
      }
    }

    public unmount_args deepCopy() {
      return new unmount_args(this);
    }

    @Override
    public void clear() {
      this.tachyonPath = null;
    }

    public String getTachyonPath() {
      return this.tachyonPath;
    }

    public unmount_args setTachyonPath(String tachyonPath) {
      this.tachyonPath = tachyonPath;
      return this;
    }

    public void unsetTachyonPath() {
      this.tachyonPath = null;
    }

    /** Returns true if field tachyonPath is set (has been assigned a value) and false otherwise */
    public boolean isSetTachyonPath() {
      return this.tachyonPath != null;
    }

    public void setTachyonPathIsSet(boolean value) {
      if (!value) {
        this.tachyonPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TACHYON_PATH:
        if (value == null) {
          unsetTachyonPath();
        } else {
          setTachyonPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TACHYON_PATH:
        return getTachyonPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TACHYON_PATH:
        return isSetTachyonPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unmount_args)
        return this.equals((unmount_args)that);
      return false;
    }

    public boolean equals(unmount_args that) {
      if (that == null)
        return false;

      boolean this_present_tachyonPath = true && this.isSetTachyonPath();
      boolean that_present_tachyonPath = true && that.isSetTachyonPath();
      if (this_present_tachyonPath || that_present_tachyonPath) {
        if (!(this_present_tachyonPath && that_present_tachyonPath))
          return false;
        if (!this.tachyonPath.equals(that.tachyonPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tachyonPath = true && (isSetTachyonPath());
      list.add(present_tachyonPath);
      if (present_tachyonPath)
        list.add(tachyonPath);

      return list.hashCode();
    }

    @Override
    public int compareTo(unmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTachyonPath()).compareTo(other.isSetTachyonPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTachyonPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tachyonPath, other.tachyonPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unmount_args(");
      boolean first = true;

      sb.append("tachyonPath:");
      if (this.tachyonPath == null) {
        sb.append("null");
      } else {
        sb.append(this.tachyonPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unmount_argsStandardSchemeFactory implements SchemeFactory {
      public unmount_argsStandardScheme getScheme() {
        return new unmount_argsStandardScheme();
      }
    }

    private static class unmount_argsStandardScheme extends StandardScheme<unmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TACHYON_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tachyonPath = iprot.readString();
                struct.setTachyonPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tachyonPath != null) {
          oprot.writeFieldBegin(TACHYON_PATH_FIELD_DESC);
          oprot.writeString(struct.tachyonPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unmount_argsTupleSchemeFactory implements SchemeFactory {
      public unmount_argsTupleScheme getScheme() {
        return new unmount_argsTupleScheme();
      }
    }

    private static class unmount_argsTupleScheme extends TupleScheme<unmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTachyonPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTachyonPath()) {
          oprot.writeString(struct.tachyonPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tachyonPath = iprot.readString();
          struct.setTachyonPathIsSet(true);
        }
      }
    }

  }

  public static class unmount_result implements org.apache.thrift.TBase<unmount_result, unmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<unmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unmount_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public TachyonException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TE((short)1, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unmount_result.class, metaDataMap);
    }

    public unmount_result() {
    }

    public unmount_result(
      boolean success,
      TachyonException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unmount_result(unmount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetTe()) {
        this.te = new TachyonException(other.te);
      }
    }

    public unmount_result deepCopy() {
      return new unmount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.te = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unmount_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TachyonException getTe() {
      return this.te;
    }

    public unmount_result setTe(TachyonException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TachyonException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unmount_result)
        return this.equals((unmount_result)that);
      return false;
    }

    public boolean equals(unmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(unmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unmount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unmount_resultStandardSchemeFactory implements SchemeFactory {
      public unmount_resultStandardScheme getScheme() {
        return new unmount_resultStandardScheme();
      }
    }

    private static class unmount_resultStandardScheme extends StandardScheme<unmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TachyonException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unmount_resultTupleSchemeFactory implements SchemeFactory {
      public unmount_resultTupleScheme getScheme() {
        return new unmount_resultTupleScheme();
      }
    }

    private static class unmount_resultTupleScheme extends TupleScheme<unmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.te = new TachyonException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class reportLostFile_args implements org.apache.thrift.TBase<reportLostFile_args, reportLostFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportLostFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportLostFile_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportLostFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportLostFile_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportLostFile_args.class, metaDataMap);
    }

    public reportLostFile_args() {
    }

    public reportLostFile_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportLostFile_args(reportLostFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public reportLostFile_args deepCopy() {
      return new reportLostFile_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public reportLostFile_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportLostFile_args)
        return this.equals((reportLostFile_args)that);
      return false;
    }

    public boolean equals(reportLostFile_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(reportLostFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportLostFile_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportLostFile_argsStandardSchemeFactory implements SchemeFactory {
      public reportLostFile_argsStandardScheme getScheme() {
        return new reportLostFile_argsStandardScheme();
      }
    }

    private static class reportLostFile_argsStandardScheme extends StandardScheme<reportLostFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportLostFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportLostFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportLostFile_argsTupleSchemeFactory implements SchemeFactory {
      public reportLostFile_argsTupleScheme getScheme() {
        return new reportLostFile_argsTupleScheme();
      }
    }

    private static class reportLostFile_argsTupleScheme extends TupleScheme<reportLostFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportLostFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportLostFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class reportLostFile_result implements org.apache.thrift.TBase<reportLostFile_result, reportLostFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<reportLostFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportLostFile_result");

    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportLostFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportLostFile_resultTupleSchemeFactory());
    }

    public FileDoesNotExistException fdnee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FDNEE((short)1, "fdnee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FDNEE
            return FDNEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportLostFile_result.class, metaDataMap);
    }

    public reportLostFile_result() {
    }

    public reportLostFile_result(
      FileDoesNotExistException fdnee)
    {
      this();
      this.fdnee = fdnee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportLostFile_result(reportLostFile_result other) {
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
    }

    public reportLostFile_result deepCopy() {
      return new reportLostFile_result(this);
    }

    @Override
    public void clear() {
      this.fdnee = null;
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public reportLostFile_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FDNEE:
        return getFdnee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FDNEE:
        return isSetFdnee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportLostFile_result)
        return this.equals((reportLostFile_result)that);
      return false;
    }

    public boolean equals(reportLostFile_result that) {
      if (that == null)
        return false;

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      return list.hashCode();
    }

    @Override
    public int compareTo(reportLostFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportLostFile_result(");
      boolean first = true;

      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportLostFile_resultStandardSchemeFactory implements SchemeFactory {
      public reportLostFile_resultStandardScheme getScheme() {
        return new reportLostFile_resultStandardScheme();
      }
    }

    private static class reportLostFile_resultStandardScheme extends StandardScheme<reportLostFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportLostFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportLostFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportLostFile_resultTupleSchemeFactory implements SchemeFactory {
      public reportLostFile_resultTupleScheme getScheme() {
        return new reportLostFile_resultTupleScheme();
      }
    }

    private static class reportLostFile_resultTupleScheme extends TupleScheme<reportLostFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportLostFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFdnee()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportLostFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
      }
    }

  }

}
