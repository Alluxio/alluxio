/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-7")
public class RawTableMasterService {

  public interface Iface {

    public long userCreateRawTable(String path, int columns, ByteBuffer metadata) throws FileAlreadyExistException, InvalidPathException, TableColumnException, TachyonException, org.apache.thrift.TException;

    public long userGetRawTableId(String path) throws InvalidPathException, TableDoesNotExistException, org.apache.thrift.TException;

    public RawTableInfo userGetClientRawTableInfoById(long id) throws TableDoesNotExistException, org.apache.thrift.TException;

    public RawTableInfo userGetClientRawTableInfoByPath(String path) throws TableDoesNotExistException, InvalidPathException, org.apache.thrift.TException;

    public void userUpdateRawTableMetadata(long tableId, ByteBuffer metadata) throws TableDoesNotExistException, TachyonException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void userCreateRawTable(String path, int columns, ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userGetRawTableId(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userGetClientRawTableInfoById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userGetClientRawTableInfoByPath(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void userUpdateRawTableMetadata(long tableId, ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long userCreateRawTable(String path, int columns, ByteBuffer metadata) throws FileAlreadyExistException, InvalidPathException, TableColumnException, TachyonException, org.apache.thrift.TException
    {
      send_userCreateRawTable(path, columns, metadata);
      return recv_userCreateRawTable();
    }

    public void send_userCreateRawTable(String path, int columns, ByteBuffer metadata) throws org.apache.thrift.TException
    {
      userCreateRawTable_args args = new userCreateRawTable_args();
      args.setPath(path);
      args.setColumns(columns);
      args.setMetadata(metadata);
      sendBase("userCreateRawTable", args);
    }

    public long recv_userCreateRawTable() throws FileAlreadyExistException, InvalidPathException, TableColumnException, TachyonException, org.apache.thrift.TException
    {
      userCreateRawTable_result result = new userCreateRawTable_result();
      receiveBase(result, "userCreateRawTable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.faee != null) {
        throw result.faee;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      if (result.tce != null) {
        throw result.tce;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userCreateRawTable failed: unknown result");
    }

    public long userGetRawTableId(String path) throws InvalidPathException, TableDoesNotExistException, org.apache.thrift.TException
    {
      send_userGetRawTableId(path);
      return recv_userGetRawTableId();
    }

    public void send_userGetRawTableId(String path) throws org.apache.thrift.TException
    {
      userGetRawTableId_args args = new userGetRawTableId_args();
      args.setPath(path);
      sendBase("userGetRawTableId", args);
    }

    public long recv_userGetRawTableId() throws InvalidPathException, TableDoesNotExistException, org.apache.thrift.TException
    {
      userGetRawTableId_result result = new userGetRawTableId_result();
      receiveBase(result, "userGetRawTableId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      if (result.tdnee != null) {
        throw result.tdnee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userGetRawTableId failed: unknown result");
    }

    public RawTableInfo userGetClientRawTableInfoById(long id) throws TableDoesNotExistException, org.apache.thrift.TException
    {
      send_userGetClientRawTableInfoById(id);
      return recv_userGetClientRawTableInfoById();
    }

    public void send_userGetClientRawTableInfoById(long id) throws org.apache.thrift.TException
    {
      userGetClientRawTableInfoById_args args = new userGetClientRawTableInfoById_args();
      args.setId(id);
      sendBase("userGetClientRawTableInfoById", args);
    }

    public RawTableInfo recv_userGetClientRawTableInfoById() throws TableDoesNotExistException, org.apache.thrift.TException
    {
      userGetClientRawTableInfoById_result result = new userGetClientRawTableInfoById_result();
      receiveBase(result, "userGetClientRawTableInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tdnee != null) {
        throw result.tdnee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userGetClientRawTableInfoById failed: unknown result");
    }

    public RawTableInfo userGetClientRawTableInfoByPath(String path) throws TableDoesNotExistException, InvalidPathException, org.apache.thrift.TException
    {
      send_userGetClientRawTableInfoByPath(path);
      return recv_userGetClientRawTableInfoByPath();
    }

    public void send_userGetClientRawTableInfoByPath(String path) throws org.apache.thrift.TException
    {
      userGetClientRawTableInfoByPath_args args = new userGetClientRawTableInfoByPath_args();
      args.setPath(path);
      sendBase("userGetClientRawTableInfoByPath", args);
    }

    public RawTableInfo recv_userGetClientRawTableInfoByPath() throws TableDoesNotExistException, InvalidPathException, org.apache.thrift.TException
    {
      userGetClientRawTableInfoByPath_result result = new userGetClientRawTableInfoByPath_result();
      receiveBase(result, "userGetClientRawTableInfoByPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.tdnee != null) {
        throw result.tdnee;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userGetClientRawTableInfoByPath failed: unknown result");
    }

    public void userUpdateRawTableMetadata(long tableId, ByteBuffer metadata) throws TableDoesNotExistException, TachyonException, org.apache.thrift.TException
    {
      send_userUpdateRawTableMetadata(tableId, metadata);
      recv_userUpdateRawTableMetadata();
    }

    public void send_userUpdateRawTableMetadata(long tableId, ByteBuffer metadata) throws org.apache.thrift.TException
    {
      userUpdateRawTableMetadata_args args = new userUpdateRawTableMetadata_args();
      args.setTableId(tableId);
      args.setMetadata(metadata);
      sendBase("userUpdateRawTableMetadata", args);
    }

    public void recv_userUpdateRawTableMetadata() throws TableDoesNotExistException, TachyonException, org.apache.thrift.TException
    {
      userUpdateRawTableMetadata_result result = new userUpdateRawTableMetadata_result();
      receiveBase(result, "userUpdateRawTableMetadata");
      if (result.tdnee != null) {
        throw result.tdnee;
      }
      if (result.te != null) {
        throw result.te;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void userCreateRawTable(String path, int columns, ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userCreateRawTable_call method_call = new userCreateRawTable_call(path, columns, metadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userCreateRawTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      private int columns;
      private ByteBuffer metadata;
      public userCreateRawTable_call(String path, int columns, ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.columns = columns;
        this.metadata = metadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userCreateRawTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userCreateRawTable_args args = new userCreateRawTable_args();
        args.setPath(path);
        args.setColumns(columns);
        args.setMetadata(metadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws FileAlreadyExistException, InvalidPathException, TableColumnException, TachyonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userCreateRawTable();
      }
    }

    public void userGetRawTableId(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userGetRawTableId_call method_call = new userGetRawTableId_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userGetRawTableId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      public userGetRawTableId_call(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userGetRawTableId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userGetRawTableId_args args = new userGetRawTableId_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws InvalidPathException, TableDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userGetRawTableId();
      }
    }

    public void userGetClientRawTableInfoById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userGetClientRawTableInfoById_call method_call = new userGetClientRawTableInfoById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userGetClientRawTableInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public userGetClientRawTableInfoById_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userGetClientRawTableInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userGetClientRawTableInfoById_args args = new userGetClientRawTableInfoById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RawTableInfo getResult() throws TableDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userGetClientRawTableInfoById();
      }
    }

    public void userGetClientRawTableInfoByPath(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userGetClientRawTableInfoByPath_call method_call = new userGetClientRawTableInfoByPath_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userGetClientRawTableInfoByPath_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      public userGetClientRawTableInfoByPath_call(String path, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userGetClientRawTableInfoByPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userGetClientRawTableInfoByPath_args args = new userGetClientRawTableInfoByPath_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RawTableInfo getResult() throws TableDoesNotExistException, InvalidPathException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userGetClientRawTableInfoByPath();
      }
    }

    public void userUpdateRawTableMetadata(long tableId, ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userUpdateRawTableMetadata_call method_call = new userUpdateRawTableMetadata_call(tableId, metadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userUpdateRawTableMetadata_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long tableId;
      private ByteBuffer metadata;
      public userUpdateRawTableMetadata_call(long tableId, ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tableId = tableId;
        this.metadata = metadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userUpdateRawTableMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userUpdateRawTableMetadata_args args = new userUpdateRawTableMetadata_args();
        args.setTableId(tableId);
        args.setMetadata(metadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TableDoesNotExistException, TachyonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_userUpdateRawTableMetadata();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("userCreateRawTable", new userCreateRawTable());
      processMap.put("userGetRawTableId", new userGetRawTableId());
      processMap.put("userGetClientRawTableInfoById", new userGetClientRawTableInfoById());
      processMap.put("userGetClientRawTableInfoByPath", new userGetClientRawTableInfoByPath());
      processMap.put("userUpdateRawTableMetadata", new userUpdateRawTableMetadata());
      return processMap;
    }

    public static class userCreateRawTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userCreateRawTable_args> {
      public userCreateRawTable() {
        super("userCreateRawTable");
      }

      public userCreateRawTable_args getEmptyArgsInstance() {
        return new userCreateRawTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userCreateRawTable_result getResult(I iface, userCreateRawTable_args args) throws org.apache.thrift.TException {
        userCreateRawTable_result result = new userCreateRawTable_result();
        try {
          result.success = iface.userCreateRawTable(args.path, args.columns, args.metadata);
          result.setSuccessIsSet(true);
        } catch (FileAlreadyExistException faee) {
          result.faee = faee;
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        } catch (TableColumnException tce) {
          result.tce = tce;
        } catch (TachyonException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class userGetRawTableId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userGetRawTableId_args> {
      public userGetRawTableId() {
        super("userGetRawTableId");
      }

      public userGetRawTableId_args getEmptyArgsInstance() {
        return new userGetRawTableId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userGetRawTableId_result getResult(I iface, userGetRawTableId_args args) throws org.apache.thrift.TException {
        userGetRawTableId_result result = new userGetRawTableId_result();
        try {
          result.success = iface.userGetRawTableId(args.path);
          result.setSuccessIsSet(true);
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        } catch (TableDoesNotExistException tdnee) {
          result.tdnee = tdnee;
        }
        return result;
      }
    }

    public static class userGetClientRawTableInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userGetClientRawTableInfoById_args> {
      public userGetClientRawTableInfoById() {
        super("userGetClientRawTableInfoById");
      }

      public userGetClientRawTableInfoById_args getEmptyArgsInstance() {
        return new userGetClientRawTableInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userGetClientRawTableInfoById_result getResult(I iface, userGetClientRawTableInfoById_args args) throws org.apache.thrift.TException {
        userGetClientRawTableInfoById_result result = new userGetClientRawTableInfoById_result();
        try {
          result.success = iface.userGetClientRawTableInfoById(args.id);
        } catch (TableDoesNotExistException tdnee) {
          result.tdnee = tdnee;
        }
        return result;
      }
    }

    public static class userGetClientRawTableInfoByPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userGetClientRawTableInfoByPath_args> {
      public userGetClientRawTableInfoByPath() {
        super("userGetClientRawTableInfoByPath");
      }

      public userGetClientRawTableInfoByPath_args getEmptyArgsInstance() {
        return new userGetClientRawTableInfoByPath_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userGetClientRawTableInfoByPath_result getResult(I iface, userGetClientRawTableInfoByPath_args args) throws org.apache.thrift.TException {
        userGetClientRawTableInfoByPath_result result = new userGetClientRawTableInfoByPath_result();
        try {
          result.success = iface.userGetClientRawTableInfoByPath(args.path);
        } catch (TableDoesNotExistException tdnee) {
          result.tdnee = tdnee;
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        }
        return result;
      }
    }

    public static class userUpdateRawTableMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userUpdateRawTableMetadata_args> {
      public userUpdateRawTableMetadata() {
        super("userUpdateRawTableMetadata");
      }

      public userUpdateRawTableMetadata_args getEmptyArgsInstance() {
        return new userUpdateRawTableMetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userUpdateRawTableMetadata_result getResult(I iface, userUpdateRawTableMetadata_args args) throws org.apache.thrift.TException {
        userUpdateRawTableMetadata_result result = new userUpdateRawTableMetadata_result();
        try {
          iface.userUpdateRawTableMetadata(args.tableId, args.metadata);
        } catch (TableDoesNotExistException tdnee) {
          result.tdnee = tdnee;
        } catch (TachyonException te) {
          result.te = te;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("userCreateRawTable", new userCreateRawTable());
      processMap.put("userGetRawTableId", new userGetRawTableId());
      processMap.put("userGetClientRawTableInfoById", new userGetClientRawTableInfoById());
      processMap.put("userGetClientRawTableInfoByPath", new userGetClientRawTableInfoByPath());
      processMap.put("userUpdateRawTableMetadata", new userUpdateRawTableMetadata());
      return processMap;
    }

    public static class userCreateRawTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userCreateRawTable_args, Long> {
      public userCreateRawTable() {
        super("userCreateRawTable");
      }

      public userCreateRawTable_args getEmptyArgsInstance() {
        return new userCreateRawTable_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            userCreateRawTable_result result = new userCreateRawTable_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userCreateRawTable_result result = new userCreateRawTable_result();
            if (e instanceof FileAlreadyExistException) {
                        result.faee = (FileAlreadyExistException) e;
                        result.setFaeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TableColumnException) {
                        result.tce = (TableColumnException) e;
                        result.setTceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TachyonException) {
                        result.te = (TachyonException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userCreateRawTable_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.userCreateRawTable(args.path, args.columns, args.metadata,resultHandler);
      }
    }

    public static class userGetRawTableId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userGetRawTableId_args, Long> {
      public userGetRawTableId() {
        super("userGetRawTableId");
      }

      public userGetRawTableId_args getEmptyArgsInstance() {
        return new userGetRawTableId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            userGetRawTableId_result result = new userGetRawTableId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userGetRawTableId_result result = new userGetRawTableId_result();
            if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TableDoesNotExistException) {
                        result.tdnee = (TableDoesNotExistException) e;
                        result.setTdneeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userGetRawTableId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.userGetRawTableId(args.path,resultHandler);
      }
    }

    public static class userGetClientRawTableInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userGetClientRawTableInfoById_args, RawTableInfo> {
      public userGetClientRawTableInfoById() {
        super("userGetClientRawTableInfoById");
      }

      public userGetClientRawTableInfoById_args getEmptyArgsInstance() {
        return new userGetClientRawTableInfoById_args();
      }

      public AsyncMethodCallback<RawTableInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RawTableInfo>() { 
          public void onComplete(RawTableInfo o) {
            userGetClientRawTableInfoById_result result = new userGetClientRawTableInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userGetClientRawTableInfoById_result result = new userGetClientRawTableInfoById_result();
            if (e instanceof TableDoesNotExistException) {
                        result.tdnee = (TableDoesNotExistException) e;
                        result.setTdneeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userGetClientRawTableInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<RawTableInfo> resultHandler) throws TException {
        iface.userGetClientRawTableInfoById(args.id,resultHandler);
      }
    }

    public static class userGetClientRawTableInfoByPath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userGetClientRawTableInfoByPath_args, RawTableInfo> {
      public userGetClientRawTableInfoByPath() {
        super("userGetClientRawTableInfoByPath");
      }

      public userGetClientRawTableInfoByPath_args getEmptyArgsInstance() {
        return new userGetClientRawTableInfoByPath_args();
      }

      public AsyncMethodCallback<RawTableInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RawTableInfo>() { 
          public void onComplete(RawTableInfo o) {
            userGetClientRawTableInfoByPath_result result = new userGetClientRawTableInfoByPath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userGetClientRawTableInfoByPath_result result = new userGetClientRawTableInfoByPath_result();
            if (e instanceof TableDoesNotExistException) {
                        result.tdnee = (TableDoesNotExistException) e;
                        result.setTdneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userGetClientRawTableInfoByPath_args args, org.apache.thrift.async.AsyncMethodCallback<RawTableInfo> resultHandler) throws TException {
        iface.userGetClientRawTableInfoByPath(args.path,resultHandler);
      }
    }

    public static class userUpdateRawTableMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userUpdateRawTableMetadata_args, Void> {
      public userUpdateRawTableMetadata() {
        super("userUpdateRawTableMetadata");
      }

      public userUpdateRawTableMetadata_args getEmptyArgsInstance() {
        return new userUpdateRawTableMetadata_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            userUpdateRawTableMetadata_result result = new userUpdateRawTableMetadata_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userUpdateRawTableMetadata_result result = new userUpdateRawTableMetadata_result();
            if (e instanceof TableDoesNotExistException) {
                        result.tdnee = (TableDoesNotExistException) e;
                        result.setTdneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TachyonException) {
                        result.te = (TachyonException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userUpdateRawTableMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.userUpdateRawTableMetadata(args.tableId, args.metadata,resultHandler);
      }
    }

  }

  public static class userCreateRawTable_args implements org.apache.thrift.TBase<userCreateRawTable_args, userCreateRawTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<userCreateRawTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userCreateRawTable_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userCreateRawTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userCreateRawTable_argsTupleSchemeFactory());
    }

    public String path; // required
    public int columns; // required
    public ByteBuffer metadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      COLUMNS((short)2, "columns"),
      METADATA((short)3, "metadata");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // COLUMNS
            return COLUMNS;
          case 3: // METADATA
            return METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COLUMNS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userCreateRawTable_args.class, metaDataMap);
    }

    public userCreateRawTable_args() {
    }

    public userCreateRawTable_args(
      String path,
      int columns,
      ByteBuffer metadata)
    {
      this();
      this.path = path;
      this.columns = columns;
      setColumnsIsSet(true);
      this.metadata = org.apache.thrift.TBaseHelper.copyBinary(metadata);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userCreateRawTable_args(userCreateRawTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPath()) {
        this.path = other.path;
      }
      this.columns = other.columns;
      if (other.isSetMetadata()) {
        this.metadata = org.apache.thrift.TBaseHelper.copyBinary(other.metadata);
      }
    }

    public userCreateRawTable_args deepCopy() {
      return new userCreateRawTable_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      setColumnsIsSet(false);
      this.columns = 0;
      this.metadata = null;
    }

    public String getPath() {
      return this.path;
    }

    public userCreateRawTable_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public int getColumns() {
      return this.columns;
    }

    public userCreateRawTable_args setColumns(int columns) {
      this.columns = columns;
      setColumnsIsSet(true);
      return this;
    }

    public void unsetColumns() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNS_ISSET_ID);
    }

    /** Returns true if field columns is set (has been assigned a value) and false otherwise */
    public boolean isSetColumns() {
      return EncodingUtils.testBit(__isset_bitfield, __COLUMNS_ISSET_ID);
    }

    public void setColumnsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNS_ISSET_ID, value);
    }

    public byte[] getMetadata() {
      setMetadata(org.apache.thrift.TBaseHelper.rightSize(metadata));
      return metadata == null ? null : metadata.array();
    }

    public ByteBuffer bufferForMetadata() {
      return org.apache.thrift.TBaseHelper.copyBinary(metadata);
    }

    public userCreateRawTable_args setMetadata(byte[] metadata) {
      this.metadata = metadata == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(metadata, metadata.length));
      return this;
    }

    public userCreateRawTable_args setMetadata(ByteBuffer metadata) {
      this.metadata = org.apache.thrift.TBaseHelper.copyBinary(metadata);
      return this;
    }

    public void unsetMetadata() {
      this.metadata = null;
    }

    /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadata() {
      return this.metadata != null;
    }

    public void setMetadataIsSet(boolean value) {
      if (!value) {
        this.metadata = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case COLUMNS:
        if (value == null) {
          unsetColumns();
        } else {
          setColumns((Integer)value);
        }
        break;

      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          setMetadata((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case COLUMNS:
        return Integer.valueOf(getColumns());

      case METADATA:
        return getMetadata();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case COLUMNS:
        return isSetColumns();
      case METADATA:
        return isSetMetadata();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userCreateRawTable_args)
        return this.equals((userCreateRawTable_args)that);
      return false;
    }

    public boolean equals(userCreateRawTable_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_columns = true;
      boolean that_present_columns = true;
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (this.columns != that.columns)
          return false;
      }

      boolean this_present_metadata = true && this.isSetMetadata();
      boolean that_present_metadata = true && that.isSetMetadata();
      if (this_present_metadata || that_present_metadata) {
        if (!(this_present_metadata && that_present_metadata))
          return false;
        if (!this.metadata.equals(that.metadata))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_path = true && (isSetPath());
      list.add(present_path);
      if (present_path)
        list.add(path);

      boolean present_columns = true;
      list.add(present_columns);
      if (present_columns)
        list.add(columns);

      boolean present_metadata = true && (isSetMetadata());
      list.add(present_metadata);
      if (present_metadata)
        list.add(metadata);

      return list.hashCode();
    }

    @Override
    public int compareTo(userCreateRawTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userCreateRawTable_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columns:");
      sb.append(this.columns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.metadata, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userCreateRawTable_argsStandardSchemeFactory implements SchemeFactory {
      public userCreateRawTable_argsStandardScheme getScheme() {
        return new userCreateRawTable_argsStandardScheme();
      }
    }

    private static class userCreateRawTable_argsStandardScheme extends StandardScheme<userCreateRawTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userCreateRawTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.columns = iprot.readI32();
                struct.setColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadata = iprot.readBinary();
                struct.setMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userCreateRawTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        oprot.writeI32(struct.columns);
        oprot.writeFieldEnd();
        if (struct.metadata != null) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeBinary(struct.metadata);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userCreateRawTable_argsTupleSchemeFactory implements SchemeFactory {
      public userCreateRawTable_argsTupleScheme getScheme() {
        return new userCreateRawTable_argsTupleScheme();
      }
    }

    private static class userCreateRawTable_argsTupleScheme extends TupleScheme<userCreateRawTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userCreateRawTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetColumns()) {
          optionals.set(1);
        }
        if (struct.isSetMetadata()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetColumns()) {
          oprot.writeI32(struct.columns);
        }
        if (struct.isSetMetadata()) {
          oprot.writeBinary(struct.metadata);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userCreateRawTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.columns = iprot.readI32();
          struct.setColumnsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.metadata = iprot.readBinary();
          struct.setMetadataIsSet(true);
        }
      }
    }

  }

  public static class userCreateRawTable_result implements org.apache.thrift.TBase<userCreateRawTable_result, userCreateRawTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<userCreateRawTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userCreateRawTable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField FAEE_FIELD_DESC = new org.apache.thrift.protocol.TField("faee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TCE_FIELD_DESC = new org.apache.thrift.protocol.TField("tce", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userCreateRawTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userCreateRawTable_resultTupleSchemeFactory());
    }

    public long success; // required
    public FileAlreadyExistException faee; // required
    public InvalidPathException ipe; // required
    public TableColumnException tce; // required
    public TachyonException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAEE((short)1, "faee"),
      IPE((short)2, "ipe"),
      TCE((short)3, "tce"),
      TE((short)4, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAEE
            return FAEE;
          case 2: // IPE
            return IPE;
          case 3: // TCE
            return TCE;
          case 4: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FAEE, new org.apache.thrift.meta_data.FieldMetaData("faee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TCE, new org.apache.thrift.meta_data.FieldMetaData("tce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userCreateRawTable_result.class, metaDataMap);
    }

    public userCreateRawTable_result() {
    }

    public userCreateRawTable_result(
      long success,
      FileAlreadyExistException faee,
      InvalidPathException ipe,
      TableColumnException tce,
      TachyonException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.faee = faee;
      this.ipe = ipe;
      this.tce = tce;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userCreateRawTable_result(userCreateRawTable_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetFaee()) {
        this.faee = new FileAlreadyExistException(other.faee);
      }
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
      if (other.isSetTce()) {
        this.tce = new TableColumnException(other.tce);
      }
      if (other.isSetTe()) {
        this.te = new TachyonException(other.te);
      }
    }

    public userCreateRawTable_result deepCopy() {
      return new userCreateRawTable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.faee = null;
      this.ipe = null;
      this.tce = null;
      this.te = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public userCreateRawTable_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FileAlreadyExistException getFaee() {
      return this.faee;
    }

    public userCreateRawTable_result setFaee(FileAlreadyExistException faee) {
      this.faee = faee;
      return this;
    }

    public void unsetFaee() {
      this.faee = null;
    }

    /** Returns true if field faee is set (has been assigned a value) and false otherwise */
    public boolean isSetFaee() {
      return this.faee != null;
    }

    public void setFaeeIsSet(boolean value) {
      if (!value) {
        this.faee = null;
      }
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public userCreateRawTable_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public TableColumnException getTce() {
      return this.tce;
    }

    public userCreateRawTable_result setTce(TableColumnException tce) {
      this.tce = tce;
      return this;
    }

    public void unsetTce() {
      this.tce = null;
    }

    /** Returns true if field tce is set (has been assigned a value) and false otherwise */
    public boolean isSetTce() {
      return this.tce != null;
    }

    public void setTceIsSet(boolean value) {
      if (!value) {
        this.tce = null;
      }
    }

    public TachyonException getTe() {
      return this.te;
    }

    public userCreateRawTable_result setTe(TachyonException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case FAEE:
        if (value == null) {
          unsetFaee();
        } else {
          setFaee((FileAlreadyExistException)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      case TCE:
        if (value == null) {
          unsetTce();
        } else {
          setTce((TableColumnException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TachyonException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case FAEE:
        return getFaee();

      case IPE:
        return getIpe();

      case TCE:
        return getTce();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAEE:
        return isSetFaee();
      case IPE:
        return isSetIpe();
      case TCE:
        return isSetTce();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userCreateRawTable_result)
        return this.equals((userCreateRawTable_result)that);
      return false;
    }

    public boolean equals(userCreateRawTable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_faee = true && this.isSetFaee();
      boolean that_present_faee = true && that.isSetFaee();
      if (this_present_faee || that_present_faee) {
        if (!(this_present_faee && that_present_faee))
          return false;
        if (!this.faee.equals(that.faee))
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      boolean this_present_tce = true && this.isSetTce();
      boolean that_present_tce = true && that.isSetTce();
      if (this_present_tce || that_present_tce) {
        if (!(this_present_tce && that_present_tce))
          return false;
        if (!this.tce.equals(that.tce))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_faee = true && (isSetFaee());
      list.add(present_faee);
      if (present_faee)
        list.add(faee);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      boolean present_tce = true && (isSetTce());
      list.add(present_tce);
      if (present_tce)
        list.add(tce);

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(userCreateRawTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaee()).compareTo(other.isSetFaee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faee, other.faee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTce()).compareTo(other.isSetTce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tce, other.tce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userCreateRawTable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faee:");
      if (this.faee == null) {
        sb.append("null");
      } else {
        sb.append(this.faee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tce:");
      if (this.tce == null) {
        sb.append("null");
      } else {
        sb.append(this.tce);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userCreateRawTable_resultStandardSchemeFactory implements SchemeFactory {
      public userCreateRawTable_resultStandardScheme getScheme() {
        return new userCreateRawTable_resultStandardScheme();
      }
    }

    private static class userCreateRawTable_resultStandardScheme extends StandardScheme<userCreateRawTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userCreateRawTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.faee = new FileAlreadyExistException();
                struct.faee.read(iprot);
                struct.setFaeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tce = new TableColumnException();
                struct.tce.read(iprot);
                struct.setTceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TachyonException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userCreateRawTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.faee != null) {
          oprot.writeFieldBegin(FAEE_FIELD_DESC);
          struct.faee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tce != null) {
          oprot.writeFieldBegin(TCE_FIELD_DESC);
          struct.tce.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userCreateRawTable_resultTupleSchemeFactory implements SchemeFactory {
      public userCreateRawTable_resultTupleScheme getScheme() {
        return new userCreateRawTable_resultTupleScheme();
      }
    }

    private static class userCreateRawTable_resultTupleScheme extends TupleScheme<userCreateRawTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userCreateRawTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFaee()) {
          optionals.set(1);
        }
        if (struct.isSetIpe()) {
          optionals.set(2);
        }
        if (struct.isSetTce()) {
          optionals.set(3);
        }
        if (struct.isSetTe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetFaee()) {
          struct.faee.write(oprot);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
        if (struct.isSetTce()) {
          struct.tce.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userCreateRawTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.faee = new FileAlreadyExistException();
          struct.faee.read(iprot);
          struct.setFaeeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tce = new TableColumnException();
          struct.tce.read(iprot);
          struct.setTceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.te = new TachyonException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class userGetRawTableId_args implements org.apache.thrift.TBase<userGetRawTableId_args, userGetRawTableId_args._Fields>, java.io.Serializable, Cloneable, Comparable<userGetRawTableId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userGetRawTableId_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userGetRawTableId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userGetRawTableId_argsTupleSchemeFactory());
    }

    public String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userGetRawTableId_args.class, metaDataMap);
    }

    public userGetRawTableId_args() {
    }

    public userGetRawTableId_args(
      String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userGetRawTableId_args(userGetRawTableId_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public userGetRawTableId_args deepCopy() {
      return new userGetRawTableId_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public String getPath() {
      return this.path;
    }

    public userGetRawTableId_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userGetRawTableId_args)
        return this.equals((userGetRawTableId_args)that);
      return false;
    }

    public boolean equals(userGetRawTableId_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_path = true && (isSetPath());
      list.add(present_path);
      if (present_path)
        list.add(path);

      return list.hashCode();
    }

    @Override
    public int compareTo(userGetRawTableId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userGetRawTableId_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userGetRawTableId_argsStandardSchemeFactory implements SchemeFactory {
      public userGetRawTableId_argsStandardScheme getScheme() {
        return new userGetRawTableId_argsStandardScheme();
      }
    }

    private static class userGetRawTableId_argsStandardScheme extends StandardScheme<userGetRawTableId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userGetRawTableId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userGetRawTableId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userGetRawTableId_argsTupleSchemeFactory implements SchemeFactory {
      public userGetRawTableId_argsTupleScheme getScheme() {
        return new userGetRawTableId_argsTupleScheme();
      }
    }

    private static class userGetRawTableId_argsTupleScheme extends TupleScheme<userGetRawTableId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userGetRawTableId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userGetRawTableId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

  }

  public static class userGetRawTableId_result implements org.apache.thrift.TBase<userGetRawTableId_result, userGetRawTableId_result._Fields>, java.io.Serializable, Cloneable, Comparable<userGetRawTableId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userGetRawTableId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("tdnee", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userGetRawTableId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userGetRawTableId_resultTupleSchemeFactory());
    }

    public long success; // required
    public InvalidPathException ipe; // required
    public TableDoesNotExistException tdnee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IPE((short)1, "ipe"),
      TDNEE((short)2, "tdnee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IPE
            return IPE;
          case 2: // TDNEE
            return TDNEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TDNEE, new org.apache.thrift.meta_data.FieldMetaData("tdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userGetRawTableId_result.class, metaDataMap);
    }

    public userGetRawTableId_result() {
    }

    public userGetRawTableId_result(
      long success,
      InvalidPathException ipe,
      TableDoesNotExistException tdnee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ipe = ipe;
      this.tdnee = tdnee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userGetRawTableId_result(userGetRawTableId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
      if (other.isSetTdnee()) {
        this.tdnee = new TableDoesNotExistException(other.tdnee);
      }
    }

    public userGetRawTableId_result deepCopy() {
      return new userGetRawTableId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ipe = null;
      this.tdnee = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public userGetRawTableId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public userGetRawTableId_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public TableDoesNotExistException getTdnee() {
      return this.tdnee;
    }

    public userGetRawTableId_result setTdnee(TableDoesNotExistException tdnee) {
      this.tdnee = tdnee;
      return this;
    }

    public void unsetTdnee() {
      this.tdnee = null;
    }

    /** Returns true if field tdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetTdnee() {
      return this.tdnee != null;
    }

    public void setTdneeIsSet(boolean value) {
      if (!value) {
        this.tdnee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      case TDNEE:
        if (value == null) {
          unsetTdnee();
        } else {
          setTdnee((TableDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case IPE:
        return getIpe();

      case TDNEE:
        return getTdnee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IPE:
        return isSetIpe();
      case TDNEE:
        return isSetTdnee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userGetRawTableId_result)
        return this.equals((userGetRawTableId_result)that);
      return false;
    }

    public boolean equals(userGetRawTableId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      boolean this_present_tdnee = true && this.isSetTdnee();
      boolean that_present_tdnee = true && that.isSetTdnee();
      if (this_present_tdnee || that_present_tdnee) {
        if (!(this_present_tdnee && that_present_tdnee))
          return false;
        if (!this.tdnee.equals(that.tdnee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      boolean present_tdnee = true && (isSetTdnee());
      list.add(present_tdnee);
      if (present_tdnee)
        list.add(tdnee);

      return list.hashCode();
    }

    @Override
    public int compareTo(userGetRawTableId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTdnee()).compareTo(other.isSetTdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdnee, other.tdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userGetRawTableId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tdnee:");
      if (this.tdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.tdnee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userGetRawTableId_resultStandardSchemeFactory implements SchemeFactory {
      public userGetRawTableId_resultStandardScheme getScheme() {
        return new userGetRawTableId_resultStandardScheme();
      }
    }

    private static class userGetRawTableId_resultStandardScheme extends StandardScheme<userGetRawTableId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userGetRawTableId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tdnee = new TableDoesNotExistException();
                struct.tdnee.read(iprot);
                struct.setTdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userGetRawTableId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tdnee != null) {
          oprot.writeFieldBegin(TDNEE_FIELD_DESC);
          struct.tdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userGetRawTableId_resultTupleSchemeFactory implements SchemeFactory {
      public userGetRawTableId_resultTupleScheme getScheme() {
        return new userGetRawTableId_resultTupleScheme();
      }
    }

    private static class userGetRawTableId_resultTupleScheme extends TupleScheme<userGetRawTableId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userGetRawTableId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIpe()) {
          optionals.set(1);
        }
        if (struct.isSetTdnee()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
        if (struct.isSetTdnee()) {
          struct.tdnee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userGetRawTableId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tdnee = new TableDoesNotExistException();
          struct.tdnee.read(iprot);
          struct.setTdneeIsSet(true);
        }
      }
    }

  }

  public static class userGetClientRawTableInfoById_args implements org.apache.thrift.TBase<userGetClientRawTableInfoById_args, userGetClientRawTableInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<userGetClientRawTableInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userGetClientRawTableInfoById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userGetClientRawTableInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userGetClientRawTableInfoById_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userGetClientRawTableInfoById_args.class, metaDataMap);
    }

    public userGetClientRawTableInfoById_args() {
    }

    public userGetClientRawTableInfoById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userGetClientRawTableInfoById_args(userGetClientRawTableInfoById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public userGetClientRawTableInfoById_args deepCopy() {
      return new userGetClientRawTableInfoById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public userGetClientRawTableInfoById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userGetClientRawTableInfoById_args)
        return this.equals((userGetClientRawTableInfoById_args)that);
      return false;
    }

    public boolean equals(userGetClientRawTableInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(userGetClientRawTableInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userGetClientRawTableInfoById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userGetClientRawTableInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public userGetClientRawTableInfoById_argsStandardScheme getScheme() {
        return new userGetClientRawTableInfoById_argsStandardScheme();
      }
    }

    private static class userGetClientRawTableInfoById_argsStandardScheme extends StandardScheme<userGetClientRawTableInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userGetClientRawTableInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userGetClientRawTableInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userGetClientRawTableInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public userGetClientRawTableInfoById_argsTupleScheme getScheme() {
        return new userGetClientRawTableInfoById_argsTupleScheme();
      }
    }

    private static class userGetClientRawTableInfoById_argsTupleScheme extends TupleScheme<userGetClientRawTableInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userGetClientRawTableInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userGetClientRawTableInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class userGetClientRawTableInfoById_result implements org.apache.thrift.TBase<userGetClientRawTableInfoById_result, userGetClientRawTableInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<userGetClientRawTableInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userGetClientRawTableInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField TDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("tdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userGetClientRawTableInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userGetClientRawTableInfoById_resultTupleSchemeFactory());
    }

    public RawTableInfo success; // required
    public TableDoesNotExistException tdnee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TDNEE((short)1, "tdnee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TDNEE
            return TDNEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RawTableInfo.class)));
      tmpMap.put(_Fields.TDNEE, new org.apache.thrift.meta_data.FieldMetaData("tdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userGetClientRawTableInfoById_result.class, metaDataMap);
    }

    public userGetClientRawTableInfoById_result() {
    }

    public userGetClientRawTableInfoById_result(
      RawTableInfo success,
      TableDoesNotExistException tdnee)
    {
      this();
      this.success = success;
      this.tdnee = tdnee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userGetClientRawTableInfoById_result(userGetClientRawTableInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new RawTableInfo(other.success);
      }
      if (other.isSetTdnee()) {
        this.tdnee = new TableDoesNotExistException(other.tdnee);
      }
    }

    public userGetClientRawTableInfoById_result deepCopy() {
      return new userGetClientRawTableInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tdnee = null;
    }

    public RawTableInfo getSuccess() {
      return this.success;
    }

    public userGetClientRawTableInfoById_result setSuccess(RawTableInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TableDoesNotExistException getTdnee() {
      return this.tdnee;
    }

    public userGetClientRawTableInfoById_result setTdnee(TableDoesNotExistException tdnee) {
      this.tdnee = tdnee;
      return this;
    }

    public void unsetTdnee() {
      this.tdnee = null;
    }

    /** Returns true if field tdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetTdnee() {
      return this.tdnee != null;
    }

    public void setTdneeIsSet(boolean value) {
      if (!value) {
        this.tdnee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RawTableInfo)value);
        }
        break;

      case TDNEE:
        if (value == null) {
          unsetTdnee();
        } else {
          setTdnee((TableDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case TDNEE:
        return getTdnee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TDNEE:
        return isSetTdnee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userGetClientRawTableInfoById_result)
        return this.equals((userGetClientRawTableInfoById_result)that);
      return false;
    }

    public boolean equals(userGetClientRawTableInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tdnee = true && this.isSetTdnee();
      boolean that_present_tdnee = true && that.isSetTdnee();
      if (this_present_tdnee || that_present_tdnee) {
        if (!(this_present_tdnee && that_present_tdnee))
          return false;
        if (!this.tdnee.equals(that.tdnee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_tdnee = true && (isSetTdnee());
      list.add(present_tdnee);
      if (present_tdnee)
        list.add(tdnee);

      return list.hashCode();
    }

    @Override
    public int compareTo(userGetClientRawTableInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTdnee()).compareTo(other.isSetTdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdnee, other.tdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userGetClientRawTableInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tdnee:");
      if (this.tdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.tdnee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userGetClientRawTableInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public userGetClientRawTableInfoById_resultStandardScheme getScheme() {
        return new userGetClientRawTableInfoById_resultStandardScheme();
      }
    }

    private static class userGetClientRawTableInfoById_resultStandardScheme extends StandardScheme<userGetClientRawTableInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userGetClientRawTableInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RawTableInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tdnee = new TableDoesNotExistException();
                struct.tdnee.read(iprot);
                struct.setTdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userGetClientRawTableInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tdnee != null) {
          oprot.writeFieldBegin(TDNEE_FIELD_DESC);
          struct.tdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userGetClientRawTableInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public userGetClientRawTableInfoById_resultTupleScheme getScheme() {
        return new userGetClientRawTableInfoById_resultTupleScheme();
      }
    }

    private static class userGetClientRawTableInfoById_resultTupleScheme extends TupleScheme<userGetClientRawTableInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userGetClientRawTableInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTdnee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTdnee()) {
          struct.tdnee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userGetClientRawTableInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RawTableInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tdnee = new TableDoesNotExistException();
          struct.tdnee.read(iprot);
          struct.setTdneeIsSet(true);
        }
      }
    }

  }

  public static class userGetClientRawTableInfoByPath_args implements org.apache.thrift.TBase<userGetClientRawTableInfoByPath_args, userGetClientRawTableInfoByPath_args._Fields>, java.io.Serializable, Cloneable, Comparable<userGetClientRawTableInfoByPath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userGetClientRawTableInfoByPath_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userGetClientRawTableInfoByPath_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userGetClientRawTableInfoByPath_argsTupleSchemeFactory());
    }

    public String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userGetClientRawTableInfoByPath_args.class, metaDataMap);
    }

    public userGetClientRawTableInfoByPath_args() {
    }

    public userGetClientRawTableInfoByPath_args(
      String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userGetClientRawTableInfoByPath_args(userGetClientRawTableInfoByPath_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public userGetClientRawTableInfoByPath_args deepCopy() {
      return new userGetClientRawTableInfoByPath_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public String getPath() {
      return this.path;
    }

    public userGetClientRawTableInfoByPath_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userGetClientRawTableInfoByPath_args)
        return this.equals((userGetClientRawTableInfoByPath_args)that);
      return false;
    }

    public boolean equals(userGetClientRawTableInfoByPath_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_path = true && (isSetPath());
      list.add(present_path);
      if (present_path)
        list.add(path);

      return list.hashCode();
    }

    @Override
    public int compareTo(userGetClientRawTableInfoByPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userGetClientRawTableInfoByPath_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userGetClientRawTableInfoByPath_argsStandardSchemeFactory implements SchemeFactory {
      public userGetClientRawTableInfoByPath_argsStandardScheme getScheme() {
        return new userGetClientRawTableInfoByPath_argsStandardScheme();
      }
    }

    private static class userGetClientRawTableInfoByPath_argsStandardScheme extends StandardScheme<userGetClientRawTableInfoByPath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userGetClientRawTableInfoByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userGetClientRawTableInfoByPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userGetClientRawTableInfoByPath_argsTupleSchemeFactory implements SchemeFactory {
      public userGetClientRawTableInfoByPath_argsTupleScheme getScheme() {
        return new userGetClientRawTableInfoByPath_argsTupleScheme();
      }
    }

    private static class userGetClientRawTableInfoByPath_argsTupleScheme extends TupleScheme<userGetClientRawTableInfoByPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userGetClientRawTableInfoByPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userGetClientRawTableInfoByPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

  }

  public static class userGetClientRawTableInfoByPath_result implements org.apache.thrift.TBase<userGetClientRawTableInfoByPath_result, userGetClientRawTableInfoByPath_result._Fields>, java.io.Serializable, Cloneable, Comparable<userGetClientRawTableInfoByPath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userGetClientRawTableInfoByPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField TDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("tdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userGetClientRawTableInfoByPath_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userGetClientRawTableInfoByPath_resultTupleSchemeFactory());
    }

    public RawTableInfo success; // required
    public TableDoesNotExistException tdnee; // required
    public InvalidPathException ipe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TDNEE((short)1, "tdnee"),
      IPE((short)2, "ipe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TDNEE
            return TDNEE;
          case 2: // IPE
            return IPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RawTableInfo.class)));
      tmpMap.put(_Fields.TDNEE, new org.apache.thrift.meta_data.FieldMetaData("tdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userGetClientRawTableInfoByPath_result.class, metaDataMap);
    }

    public userGetClientRawTableInfoByPath_result() {
    }

    public userGetClientRawTableInfoByPath_result(
      RawTableInfo success,
      TableDoesNotExistException tdnee,
      InvalidPathException ipe)
    {
      this();
      this.success = success;
      this.tdnee = tdnee;
      this.ipe = ipe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userGetClientRawTableInfoByPath_result(userGetClientRawTableInfoByPath_result other) {
      if (other.isSetSuccess()) {
        this.success = new RawTableInfo(other.success);
      }
      if (other.isSetTdnee()) {
        this.tdnee = new TableDoesNotExistException(other.tdnee);
      }
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
    }

    public userGetClientRawTableInfoByPath_result deepCopy() {
      return new userGetClientRawTableInfoByPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.tdnee = null;
      this.ipe = null;
    }

    public RawTableInfo getSuccess() {
      return this.success;
    }

    public userGetClientRawTableInfoByPath_result setSuccess(RawTableInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TableDoesNotExistException getTdnee() {
      return this.tdnee;
    }

    public userGetClientRawTableInfoByPath_result setTdnee(TableDoesNotExistException tdnee) {
      this.tdnee = tdnee;
      return this;
    }

    public void unsetTdnee() {
      this.tdnee = null;
    }

    /** Returns true if field tdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetTdnee() {
      return this.tdnee != null;
    }

    public void setTdneeIsSet(boolean value) {
      if (!value) {
        this.tdnee = null;
      }
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public userGetClientRawTableInfoByPath_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RawTableInfo)value);
        }
        break;

      case TDNEE:
        if (value == null) {
          unsetTdnee();
        } else {
          setTdnee((TableDoesNotExistException)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case TDNEE:
        return getTdnee();

      case IPE:
        return getIpe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TDNEE:
        return isSetTdnee();
      case IPE:
        return isSetIpe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userGetClientRawTableInfoByPath_result)
        return this.equals((userGetClientRawTableInfoByPath_result)that);
      return false;
    }

    public boolean equals(userGetClientRawTableInfoByPath_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_tdnee = true && this.isSetTdnee();
      boolean that_present_tdnee = true && that.isSetTdnee();
      if (this_present_tdnee || that_present_tdnee) {
        if (!(this_present_tdnee && that_present_tdnee))
          return false;
        if (!this.tdnee.equals(that.tdnee))
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_tdnee = true && (isSetTdnee());
      list.add(present_tdnee);
      if (present_tdnee)
        list.add(tdnee);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      return list.hashCode();
    }

    @Override
    public int compareTo(userGetClientRawTableInfoByPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTdnee()).compareTo(other.isSetTdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdnee, other.tdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userGetClientRawTableInfoByPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tdnee:");
      if (this.tdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.tdnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userGetClientRawTableInfoByPath_resultStandardSchemeFactory implements SchemeFactory {
      public userGetClientRawTableInfoByPath_resultStandardScheme getScheme() {
        return new userGetClientRawTableInfoByPath_resultStandardScheme();
      }
    }

    private static class userGetClientRawTableInfoByPath_resultStandardScheme extends StandardScheme<userGetClientRawTableInfoByPath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userGetClientRawTableInfoByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RawTableInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tdnee = new TableDoesNotExistException();
                struct.tdnee.read(iprot);
                struct.setTdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userGetClientRawTableInfoByPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tdnee != null) {
          oprot.writeFieldBegin(TDNEE_FIELD_DESC);
          struct.tdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userGetClientRawTableInfoByPath_resultTupleSchemeFactory implements SchemeFactory {
      public userGetClientRawTableInfoByPath_resultTupleScheme getScheme() {
        return new userGetClientRawTableInfoByPath_resultTupleScheme();
      }
    }

    private static class userGetClientRawTableInfoByPath_resultTupleScheme extends TupleScheme<userGetClientRawTableInfoByPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userGetClientRawTableInfoByPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTdnee()) {
          optionals.set(1);
        }
        if (struct.isSetIpe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTdnee()) {
          struct.tdnee.write(oprot);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userGetClientRawTableInfoByPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new RawTableInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tdnee = new TableDoesNotExistException();
          struct.tdnee.read(iprot);
          struct.setTdneeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
      }
    }

  }

  public static class userUpdateRawTableMetadata_args implements org.apache.thrift.TBase<userUpdateRawTableMetadata_args, userUpdateRawTableMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<userUpdateRawTableMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userUpdateRawTableMetadata_args");

    private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userUpdateRawTableMetadata_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userUpdateRawTableMetadata_argsTupleSchemeFactory());
    }

    public long tableId; // required
    public ByteBuffer metadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE_ID((short)1, "tableId"),
      METADATA((short)2, "metadata");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE_ID
            return TABLE_ID;
          case 2: // METADATA
            return METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TABLEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userUpdateRawTableMetadata_args.class, metaDataMap);
    }

    public userUpdateRawTableMetadata_args() {
    }

    public userUpdateRawTableMetadata_args(
      long tableId,
      ByteBuffer metadata)
    {
      this();
      this.tableId = tableId;
      setTableIdIsSet(true);
      this.metadata = org.apache.thrift.TBaseHelper.copyBinary(metadata);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userUpdateRawTableMetadata_args(userUpdateRawTableMetadata_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tableId = other.tableId;
      if (other.isSetMetadata()) {
        this.metadata = org.apache.thrift.TBaseHelper.copyBinary(other.metadata);
      }
    }

    public userUpdateRawTableMetadata_args deepCopy() {
      return new userUpdateRawTableMetadata_args(this);
    }

    @Override
    public void clear() {
      setTableIdIsSet(false);
      this.tableId = 0;
      this.metadata = null;
    }

    public long getTableId() {
      return this.tableId;
    }

    public userUpdateRawTableMetadata_args setTableId(long tableId) {
      this.tableId = tableId;
      setTableIdIsSet(true);
      return this;
    }

    public void unsetTableId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLEID_ISSET_ID);
    }

    /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
    public boolean isSetTableId() {
      return EncodingUtils.testBit(__isset_bitfield, __TABLEID_ISSET_ID);
    }

    public void setTableIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLEID_ISSET_ID, value);
    }

    public byte[] getMetadata() {
      setMetadata(org.apache.thrift.TBaseHelper.rightSize(metadata));
      return metadata == null ? null : metadata.array();
    }

    public ByteBuffer bufferForMetadata() {
      return org.apache.thrift.TBaseHelper.copyBinary(metadata);
    }

    public userUpdateRawTableMetadata_args setMetadata(byte[] metadata) {
      this.metadata = metadata == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(metadata, metadata.length));
      return this;
    }

    public userUpdateRawTableMetadata_args setMetadata(ByteBuffer metadata) {
      this.metadata = org.apache.thrift.TBaseHelper.copyBinary(metadata);
      return this;
    }

    public void unsetMetadata() {
      this.metadata = null;
    }

    /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadata() {
      return this.metadata != null;
    }

    public void setMetadataIsSet(boolean value) {
      if (!value) {
        this.metadata = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE_ID:
        if (value == null) {
          unsetTableId();
        } else {
          setTableId((Long)value);
        }
        break;

      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          setMetadata((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE_ID:
        return Long.valueOf(getTableId());

      case METADATA:
        return getMetadata();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE_ID:
        return isSetTableId();
      case METADATA:
        return isSetMetadata();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userUpdateRawTableMetadata_args)
        return this.equals((userUpdateRawTableMetadata_args)that);
      return false;
    }

    public boolean equals(userUpdateRawTableMetadata_args that) {
      if (that == null)
        return false;

      boolean this_present_tableId = true;
      boolean that_present_tableId = true;
      if (this_present_tableId || that_present_tableId) {
        if (!(this_present_tableId && that_present_tableId))
          return false;
        if (this.tableId != that.tableId)
          return false;
      }

      boolean this_present_metadata = true && this.isSetMetadata();
      boolean that_present_metadata = true && that.isSetMetadata();
      if (this_present_metadata || that_present_metadata) {
        if (!(this_present_metadata && that_present_metadata))
          return false;
        if (!this.metadata.equals(that.metadata))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tableId = true;
      list.add(present_tableId);
      if (present_tableId)
        list.add(tableId);

      boolean present_metadata = true && (isSetMetadata());
      list.add(present_metadata);
      if (present_metadata)
        list.add(metadata);

      return list.hashCode();
    }

    @Override
    public int compareTo(userUpdateRawTableMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTableId()).compareTo(other.isSetTableId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, other.tableId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userUpdateRawTableMetadata_args(");
      boolean first = true;

      sb.append("tableId:");
      sb.append(this.tableId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.metadata, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userUpdateRawTableMetadata_argsStandardSchemeFactory implements SchemeFactory {
      public userUpdateRawTableMetadata_argsStandardScheme getScheme() {
        return new userUpdateRawTableMetadata_argsStandardScheme();
      }
    }

    private static class userUpdateRawTableMetadata_argsStandardScheme extends StandardScheme<userUpdateRawTableMetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userUpdateRawTableMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tableId = iprot.readI64();
                struct.setTableIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadata = iprot.readBinary();
                struct.setMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userUpdateRawTableMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.tableId);
        oprot.writeFieldEnd();
        if (struct.metadata != null) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeBinary(struct.metadata);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userUpdateRawTableMetadata_argsTupleSchemeFactory implements SchemeFactory {
      public userUpdateRawTableMetadata_argsTupleScheme getScheme() {
        return new userUpdateRawTableMetadata_argsTupleScheme();
      }
    }

    private static class userUpdateRawTableMetadata_argsTupleScheme extends TupleScheme<userUpdateRawTableMetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userUpdateRawTableMetadata_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTableId()) {
          optionals.set(0);
        }
        if (struct.isSetMetadata()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTableId()) {
          oprot.writeI64(struct.tableId);
        }
        if (struct.isSetMetadata()) {
          oprot.writeBinary(struct.metadata);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userUpdateRawTableMetadata_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tableId = iprot.readI64();
          struct.setTableIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.metadata = iprot.readBinary();
          struct.setMetadataIsSet(true);
        }
      }
    }

  }

  public static class userUpdateRawTableMetadata_result implements org.apache.thrift.TBase<userUpdateRawTableMetadata_result, userUpdateRawTableMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<userUpdateRawTableMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userUpdateRawTableMetadata_result");

    private static final org.apache.thrift.protocol.TField TDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("tdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userUpdateRawTableMetadata_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userUpdateRawTableMetadata_resultTupleSchemeFactory());
    }

    public TableDoesNotExistException tdnee; // required
    public TachyonException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TDNEE((short)1, "tdnee"),
      TE((short)2, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TDNEE
            return TDNEE;
          case 2: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TDNEE, new org.apache.thrift.meta_data.FieldMetaData("tdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userUpdateRawTableMetadata_result.class, metaDataMap);
    }

    public userUpdateRawTableMetadata_result() {
    }

    public userUpdateRawTableMetadata_result(
      TableDoesNotExistException tdnee,
      TachyonException te)
    {
      this();
      this.tdnee = tdnee;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userUpdateRawTableMetadata_result(userUpdateRawTableMetadata_result other) {
      if (other.isSetTdnee()) {
        this.tdnee = new TableDoesNotExistException(other.tdnee);
      }
      if (other.isSetTe()) {
        this.te = new TachyonException(other.te);
      }
    }

    public userUpdateRawTableMetadata_result deepCopy() {
      return new userUpdateRawTableMetadata_result(this);
    }

    @Override
    public void clear() {
      this.tdnee = null;
      this.te = null;
    }

    public TableDoesNotExistException getTdnee() {
      return this.tdnee;
    }

    public userUpdateRawTableMetadata_result setTdnee(TableDoesNotExistException tdnee) {
      this.tdnee = tdnee;
      return this;
    }

    public void unsetTdnee() {
      this.tdnee = null;
    }

    /** Returns true if field tdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetTdnee() {
      return this.tdnee != null;
    }

    public void setTdneeIsSet(boolean value) {
      if (!value) {
        this.tdnee = null;
      }
    }

    public TachyonException getTe() {
      return this.te;
    }

    public userUpdateRawTableMetadata_result setTe(TachyonException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TDNEE:
        if (value == null) {
          unsetTdnee();
        } else {
          setTdnee((TableDoesNotExistException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TachyonException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TDNEE:
        return getTdnee();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TDNEE:
        return isSetTdnee();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userUpdateRawTableMetadata_result)
        return this.equals((userUpdateRawTableMetadata_result)that);
      return false;
    }

    public boolean equals(userUpdateRawTableMetadata_result that) {
      if (that == null)
        return false;

      boolean this_present_tdnee = true && this.isSetTdnee();
      boolean that_present_tdnee = true && that.isSetTdnee();
      if (this_present_tdnee || that_present_tdnee) {
        if (!(this_present_tdnee && that_present_tdnee))
          return false;
        if (!this.tdnee.equals(that.tdnee))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tdnee = true && (isSetTdnee());
      list.add(present_tdnee);
      if (present_tdnee)
        list.add(tdnee);

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(userUpdateRawTableMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTdnee()).compareTo(other.isSetTdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdnee, other.tdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userUpdateRawTableMetadata_result(");
      boolean first = true;

      sb.append("tdnee:");
      if (this.tdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.tdnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userUpdateRawTableMetadata_resultStandardSchemeFactory implements SchemeFactory {
      public userUpdateRawTableMetadata_resultStandardScheme getScheme() {
        return new userUpdateRawTableMetadata_resultStandardScheme();
      }
    }

    private static class userUpdateRawTableMetadata_resultStandardScheme extends StandardScheme<userUpdateRawTableMetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userUpdateRawTableMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tdnee = new TableDoesNotExistException();
                struct.tdnee.read(iprot);
                struct.setTdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TachyonException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userUpdateRawTableMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tdnee != null) {
          oprot.writeFieldBegin(TDNEE_FIELD_DESC);
          struct.tdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userUpdateRawTableMetadata_resultTupleSchemeFactory implements SchemeFactory {
      public userUpdateRawTableMetadata_resultTupleScheme getScheme() {
        return new userUpdateRawTableMetadata_resultTupleScheme();
      }
    }

    private static class userUpdateRawTableMetadata_resultTupleScheme extends TupleScheme<userUpdateRawTableMetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userUpdateRawTableMetadata_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTdnee()) {
          optionals.set(0);
        }
        if (struct.isSetTe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTdnee()) {
          struct.tdnee.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userUpdateRawTableMetadata_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tdnee = new TableDoesNotExistException();
          struct.tdnee.read(iprot);
          struct.setTdneeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.te = new TachyonException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

}
