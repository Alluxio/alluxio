/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-2")
public class BlockMasterService {

  public interface Iface {

    public tachyon.thrift.BlockInfo getBlockInfo(long blockId) throws tachyon.thrift.TachyonTException, org.apache.thrift.TException;

    public long getCapacityBytes() throws org.apache.thrift.TException;

    public long getUsedBytes() throws org.apache.thrift.TException;

    public List<WorkerInfo> getWorkerInfoList() throws org.apache.thrift.TException;

    public void workerCommitBlock(long workerId, long usedBytesOnTier, String tierAlias, long blockId, long length) throws org.apache.thrift.TException;

    public long workerGetWorkerId(tachyon.thrift.NetAddress workerNetAddress) throws org.apache.thrift.TException;

    public tachyon.thrift.Command workerHeartbeat(long workerId, Map<String,Long> usedBytesOnTiers, List<Long> removedBlockIds, Map<String,List<Long>> addedBlocksOnTiers) throws org.apache.thrift.TException;

    public void workerRegister(long workerId, List<String> storageTiers, Map<String,Long> totalBytesOnTiers, Map<String,Long> usedBytesOnTiers, Map<String,List<Long>> currentBlocksOnTiers) throws tachyon.thrift.TachyonTException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getBlockInfo(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCapacityBytes(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUsedBytes(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWorkerInfoList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void workerCommitBlock(long workerId, long usedBytesOnTier, String tierAlias, long blockId, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void workerGetWorkerId(tachyon.thrift.NetAddress workerNetAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void workerHeartbeat(long workerId, Map<String,Long> usedBytesOnTiers, List<Long> removedBlockIds, Map<String,List<Long>> addedBlocksOnTiers, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void workerRegister(long workerId, List<String> storageTiers, Map<String,Long> totalBytesOnTiers, Map<String,Long> usedBytesOnTiers, Map<String,List<Long>> currentBlocksOnTiers, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public tachyon.thrift.BlockInfo getBlockInfo(long blockId) throws tachyon.thrift.TachyonTException, org.apache.thrift.TException
    {
      send_getBlockInfo(blockId);
      return recv_getBlockInfo();
    }

    public void send_getBlockInfo(long blockId) throws org.apache.thrift.TException
    {
      getBlockInfo_args args = new getBlockInfo_args();
      args.setBlockId(blockId);
      sendBase("getBlockInfo", args);
    }

    public tachyon.thrift.BlockInfo recv_getBlockInfo() throws tachyon.thrift.TachyonTException, org.apache.thrift.TException
    {
      getBlockInfo_result result = new getBlockInfo_result();
      receiveBase(result, "getBlockInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBlockInfo failed: unknown result");
    }

    public long getCapacityBytes() throws org.apache.thrift.TException
    {
      send_getCapacityBytes();
      return recv_getCapacityBytes();
    }

    public void send_getCapacityBytes() throws org.apache.thrift.TException
    {
      getCapacityBytes_args args = new getCapacityBytes_args();
      sendBase("getCapacityBytes", args);
    }

    public long recv_getCapacityBytes() throws org.apache.thrift.TException
    {
      getCapacityBytes_result result = new getCapacityBytes_result();
      receiveBase(result, "getCapacityBytes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCapacityBytes failed: unknown result");
    }

    public long getUsedBytes() throws org.apache.thrift.TException
    {
      send_getUsedBytes();
      return recv_getUsedBytes();
    }

    public void send_getUsedBytes() throws org.apache.thrift.TException
    {
      getUsedBytes_args args = new getUsedBytes_args();
      sendBase("getUsedBytes", args);
    }

    public long recv_getUsedBytes() throws org.apache.thrift.TException
    {
      getUsedBytes_result result = new getUsedBytes_result();
      receiveBase(result, "getUsedBytes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUsedBytes failed: unknown result");
    }

    public List<WorkerInfo> getWorkerInfoList() throws org.apache.thrift.TException
    {
      send_getWorkerInfoList();
      return recv_getWorkerInfoList();
    }

    public void send_getWorkerInfoList() throws org.apache.thrift.TException
    {
      getWorkerInfoList_args args = new getWorkerInfoList_args();
      sendBase("getWorkerInfoList", args);
    }

    public List<WorkerInfo> recv_getWorkerInfoList() throws org.apache.thrift.TException
    {
      getWorkerInfoList_result result = new getWorkerInfoList_result();
      receiveBase(result, "getWorkerInfoList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorkerInfoList failed: unknown result");
    }

    public void workerCommitBlock(long workerId, long usedBytesOnTier, String tierAlias, long blockId, long length) throws org.apache.thrift.TException
    {
      send_workerCommitBlock(workerId, usedBytesOnTier, tierAlias, blockId, length);
      recv_workerCommitBlock();
    }

    public void send_workerCommitBlock(long workerId, long usedBytesOnTier, String tierAlias, long blockId, long length) throws org.apache.thrift.TException
    {
      workerCommitBlock_args args = new workerCommitBlock_args();
      args.setWorkerId(workerId);
      args.setUsedBytesOnTier(usedBytesOnTier);
      args.setTierAlias(tierAlias);
      args.setBlockId(blockId);
      args.setLength(length);
      sendBase("workerCommitBlock", args);
    }

    public void recv_workerCommitBlock() throws org.apache.thrift.TException
    {
      workerCommitBlock_result result = new workerCommitBlock_result();
      receiveBase(result, "workerCommitBlock");
      return;
    }

    public long workerGetWorkerId(tachyon.thrift.NetAddress workerNetAddress) throws org.apache.thrift.TException
    {
      send_workerGetWorkerId(workerNetAddress);
      return recv_workerGetWorkerId();
    }

    public void send_workerGetWorkerId(tachyon.thrift.NetAddress workerNetAddress) throws org.apache.thrift.TException
    {
      workerGetWorkerId_args args = new workerGetWorkerId_args();
      args.setWorkerNetAddress(workerNetAddress);
      sendBase("workerGetWorkerId", args);
    }

    public long recv_workerGetWorkerId() throws org.apache.thrift.TException
    {
      workerGetWorkerId_result result = new workerGetWorkerId_result();
      receiveBase(result, "workerGetWorkerId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "workerGetWorkerId failed: unknown result");
    }

    public tachyon.thrift.Command workerHeartbeat(long workerId, Map<String,Long> usedBytesOnTiers, List<Long> removedBlockIds, Map<String,List<Long>> addedBlocksOnTiers) throws org.apache.thrift.TException
    {
      send_workerHeartbeat(workerId, usedBytesOnTiers, removedBlockIds, addedBlocksOnTiers);
      return recv_workerHeartbeat();
    }

    public void send_workerHeartbeat(long workerId, Map<String,Long> usedBytesOnTiers, List<Long> removedBlockIds, Map<String,List<Long>> addedBlocksOnTiers) throws org.apache.thrift.TException
    {
      workerHeartbeat_args args = new workerHeartbeat_args();
      args.setWorkerId(workerId);
      args.setUsedBytesOnTiers(usedBytesOnTiers);
      args.setRemovedBlockIds(removedBlockIds);
      args.setAddedBlocksOnTiers(addedBlocksOnTiers);
      sendBase("workerHeartbeat", args);
    }

    public tachyon.thrift.Command recv_workerHeartbeat() throws org.apache.thrift.TException
    {
      workerHeartbeat_result result = new workerHeartbeat_result();
      receiveBase(result, "workerHeartbeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "workerHeartbeat failed: unknown result");
    }

    public void workerRegister(long workerId, List<String> storageTiers, Map<String,Long> totalBytesOnTiers, Map<String,Long> usedBytesOnTiers, Map<String,List<Long>> currentBlocksOnTiers) throws tachyon.thrift.TachyonTException, org.apache.thrift.TException
    {
      send_workerRegister(workerId, storageTiers, totalBytesOnTiers, usedBytesOnTiers, currentBlocksOnTiers);
      recv_workerRegister();
    }

    public void send_workerRegister(long workerId, List<String> storageTiers, Map<String,Long> totalBytesOnTiers, Map<String,Long> usedBytesOnTiers, Map<String,List<Long>> currentBlocksOnTiers) throws org.apache.thrift.TException
    {
      workerRegister_args args = new workerRegister_args();
      args.setWorkerId(workerId);
      args.setStorageTiers(storageTiers);
      args.setTotalBytesOnTiers(totalBytesOnTiers);
      args.setUsedBytesOnTiers(usedBytesOnTiers);
      args.setCurrentBlocksOnTiers(currentBlocksOnTiers);
      sendBase("workerRegister", args);
    }

    public void recv_workerRegister() throws tachyon.thrift.TachyonTException, org.apache.thrift.TException
    {
      workerRegister_result result = new workerRegister_result();
      receiveBase(result, "workerRegister");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getBlockInfo(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBlockInfo_call method_call = new getBlockInfo_call(blockId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBlockInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long blockId;
      public getBlockInfo_call(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blockId = blockId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlockInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBlockInfo_args args = new getBlockInfo_args();
        args.setBlockId(blockId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public tachyon.thrift.BlockInfo getResult() throws tachyon.thrift.TachyonTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBlockInfo();
      }
    }

    public void getCapacityBytes(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCapacityBytes_call method_call = new getCapacityBytes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCapacityBytes_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCapacityBytes_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCapacityBytes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCapacityBytes_args args = new getCapacityBytes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCapacityBytes();
      }
    }

    public void getUsedBytes(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUsedBytes_call method_call = new getUsedBytes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUsedBytes_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUsedBytes_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUsedBytes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUsedBytes_args args = new getUsedBytes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUsedBytes();
      }
    }

    public void getWorkerInfoList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorkerInfoList_call method_call = new getWorkerInfoList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorkerInfoList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getWorkerInfoList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorkerInfoList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorkerInfoList_args args = new getWorkerInfoList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WorkerInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorkerInfoList();
      }
    }

    public void workerCommitBlock(long workerId, long usedBytesOnTier, String tierAlias, long blockId, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      workerCommitBlock_call method_call = new workerCommitBlock_call(workerId, usedBytesOnTier, tierAlias, blockId, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class workerCommitBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long workerId;
      private long usedBytesOnTier;
      private String tierAlias;
      private long blockId;
      private long length;
      public workerCommitBlock_call(long workerId, long usedBytesOnTier, String tierAlias, long blockId, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerId = workerId;
        this.usedBytesOnTier = usedBytesOnTier;
        this.tierAlias = tierAlias;
        this.blockId = blockId;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("workerCommitBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        workerCommitBlock_args args = new workerCommitBlock_args();
        args.setWorkerId(workerId);
        args.setUsedBytesOnTier(usedBytesOnTier);
        args.setTierAlias(tierAlias);
        args.setBlockId(blockId);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_workerCommitBlock();
      }
    }

    public void workerGetWorkerId(tachyon.thrift.NetAddress workerNetAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      workerGetWorkerId_call method_call = new workerGetWorkerId_call(workerNetAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class workerGetWorkerId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private tachyon.thrift.NetAddress workerNetAddress;
      public workerGetWorkerId_call(tachyon.thrift.NetAddress workerNetAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerNetAddress = workerNetAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("workerGetWorkerId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        workerGetWorkerId_args args = new workerGetWorkerId_args();
        args.setWorkerNetAddress(workerNetAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_workerGetWorkerId();
      }
    }

    public void workerHeartbeat(long workerId, Map<String,Long> usedBytesOnTiers, List<Long> removedBlockIds, Map<String,List<Long>> addedBlocksOnTiers, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      workerHeartbeat_call method_call = new workerHeartbeat_call(workerId, usedBytesOnTiers, removedBlockIds, addedBlocksOnTiers, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class workerHeartbeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long workerId;
      private Map<String,Long> usedBytesOnTiers;
      private List<Long> removedBlockIds;
      private Map<String,List<Long>> addedBlocksOnTiers;
      public workerHeartbeat_call(long workerId, Map<String,Long> usedBytesOnTiers, List<Long> removedBlockIds, Map<String,List<Long>> addedBlocksOnTiers, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerId = workerId;
        this.usedBytesOnTiers = usedBytesOnTiers;
        this.removedBlockIds = removedBlockIds;
        this.addedBlocksOnTiers = addedBlocksOnTiers;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("workerHeartbeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        workerHeartbeat_args args = new workerHeartbeat_args();
        args.setWorkerId(workerId);
        args.setUsedBytesOnTiers(usedBytesOnTiers);
        args.setRemovedBlockIds(removedBlockIds);
        args.setAddedBlocksOnTiers(addedBlocksOnTiers);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public tachyon.thrift.Command getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_workerHeartbeat();
      }
    }

    public void workerRegister(long workerId, List<String> storageTiers, Map<String,Long> totalBytesOnTiers, Map<String,Long> usedBytesOnTiers, Map<String,List<Long>> currentBlocksOnTiers, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      workerRegister_call method_call = new workerRegister_call(workerId, storageTiers, totalBytesOnTiers, usedBytesOnTiers, currentBlocksOnTiers, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class workerRegister_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long workerId;
      private List<String> storageTiers;
      private Map<String,Long> totalBytesOnTiers;
      private Map<String,Long> usedBytesOnTiers;
      private Map<String,List<Long>> currentBlocksOnTiers;
      public workerRegister_call(long workerId, List<String> storageTiers, Map<String,Long> totalBytesOnTiers, Map<String,Long> usedBytesOnTiers, Map<String,List<Long>> currentBlocksOnTiers, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerId = workerId;
        this.storageTiers = storageTiers;
        this.totalBytesOnTiers = totalBytesOnTiers;
        this.usedBytesOnTiers = usedBytesOnTiers;
        this.currentBlocksOnTiers = currentBlocksOnTiers;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("workerRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        workerRegister_args args = new workerRegister_args();
        args.setWorkerId(workerId);
        args.setStorageTiers(storageTiers);
        args.setTotalBytesOnTiers(totalBytesOnTiers);
        args.setUsedBytesOnTiers(usedBytesOnTiers);
        args.setCurrentBlocksOnTiers(currentBlocksOnTiers);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws tachyon.thrift.TachyonTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_workerRegister();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getBlockInfo", new getBlockInfo());
      processMap.put("getCapacityBytes", new getCapacityBytes());
      processMap.put("getUsedBytes", new getUsedBytes());
      processMap.put("getWorkerInfoList", new getWorkerInfoList());
      processMap.put("workerCommitBlock", new workerCommitBlock());
      processMap.put("workerGetWorkerId", new workerGetWorkerId());
      processMap.put("workerHeartbeat", new workerHeartbeat());
      processMap.put("workerRegister", new workerRegister());
      return processMap;
    }

    public static class getBlockInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBlockInfo_args> {
      public getBlockInfo() {
        super("getBlockInfo");
      }

      public getBlockInfo_args getEmptyArgsInstance() {
        return new getBlockInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBlockInfo_result getResult(I iface, getBlockInfo_args args) throws org.apache.thrift.TException {
        getBlockInfo_result result = new getBlockInfo_result();
        try {
          result.success = iface.getBlockInfo(args.blockId);
        } catch (tachyon.thrift.TachyonTException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCapacityBytes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCapacityBytes_args> {
      public getCapacityBytes() {
        super("getCapacityBytes");
      }

      public getCapacityBytes_args getEmptyArgsInstance() {
        return new getCapacityBytes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCapacityBytes_result getResult(I iface, getCapacityBytes_args args) throws org.apache.thrift.TException {
        getCapacityBytes_result result = new getCapacityBytes_result();
        result.success = iface.getCapacityBytes();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getUsedBytes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUsedBytes_args> {
      public getUsedBytes() {
        super("getUsedBytes");
      }

      public getUsedBytes_args getEmptyArgsInstance() {
        return new getUsedBytes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUsedBytes_result getResult(I iface, getUsedBytes_args args) throws org.apache.thrift.TException {
        getUsedBytes_result result = new getUsedBytes_result();
        result.success = iface.getUsedBytes();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getWorkerInfoList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorkerInfoList_args> {
      public getWorkerInfoList() {
        super("getWorkerInfoList");
      }

      public getWorkerInfoList_args getEmptyArgsInstance() {
        return new getWorkerInfoList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorkerInfoList_result getResult(I iface, getWorkerInfoList_args args) throws org.apache.thrift.TException {
        getWorkerInfoList_result result = new getWorkerInfoList_result();
        result.success = iface.getWorkerInfoList();
        return result;
      }
    }

    public static class workerCommitBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, workerCommitBlock_args> {
      public workerCommitBlock() {
        super("workerCommitBlock");
      }

      public workerCommitBlock_args getEmptyArgsInstance() {
        return new workerCommitBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public workerCommitBlock_result getResult(I iface, workerCommitBlock_args args) throws org.apache.thrift.TException {
        workerCommitBlock_result result = new workerCommitBlock_result();
        iface.workerCommitBlock(args.workerId, args.usedBytesOnTier, args.tierAlias, args.blockId, args.length);
        return result;
      }
    }

    public static class workerGetWorkerId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, workerGetWorkerId_args> {
      public workerGetWorkerId() {
        super("workerGetWorkerId");
      }

      public workerGetWorkerId_args getEmptyArgsInstance() {
        return new workerGetWorkerId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public workerGetWorkerId_result getResult(I iface, workerGetWorkerId_args args) throws org.apache.thrift.TException {
        workerGetWorkerId_result result = new workerGetWorkerId_result();
        result.success = iface.workerGetWorkerId(args.workerNetAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class workerHeartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, workerHeartbeat_args> {
      public workerHeartbeat() {
        super("workerHeartbeat");
      }

      public workerHeartbeat_args getEmptyArgsInstance() {
        return new workerHeartbeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public workerHeartbeat_result getResult(I iface, workerHeartbeat_args args) throws org.apache.thrift.TException {
        workerHeartbeat_result result = new workerHeartbeat_result();
        result.success = iface.workerHeartbeat(args.workerId, args.usedBytesOnTiers, args.removedBlockIds, args.addedBlocksOnTiers);
        return result;
      }
    }

    public static class workerRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, workerRegister_args> {
      public workerRegister() {
        super("workerRegister");
      }

      public workerRegister_args getEmptyArgsInstance() {
        return new workerRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public workerRegister_result getResult(I iface, workerRegister_args args) throws org.apache.thrift.TException {
        workerRegister_result result = new workerRegister_result();
        try {
          iface.workerRegister(args.workerId, args.storageTiers, args.totalBytesOnTiers, args.usedBytesOnTiers, args.currentBlocksOnTiers);
        } catch (tachyon.thrift.TachyonTException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getBlockInfo", new getBlockInfo());
      processMap.put("getCapacityBytes", new getCapacityBytes());
      processMap.put("getUsedBytes", new getUsedBytes());
      processMap.put("getWorkerInfoList", new getWorkerInfoList());
      processMap.put("workerCommitBlock", new workerCommitBlock());
      processMap.put("workerGetWorkerId", new workerGetWorkerId());
      processMap.put("workerHeartbeat", new workerHeartbeat());
      processMap.put("workerRegister", new workerRegister());
      return processMap;
    }

    public static class getBlockInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBlockInfo_args, tachyon.thrift.BlockInfo> {
      public getBlockInfo() {
        super("getBlockInfo");
      }

      public getBlockInfo_args getEmptyArgsInstance() {
        return new getBlockInfo_args();
      }

      public AsyncMethodCallback<tachyon.thrift.BlockInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<tachyon.thrift.BlockInfo>() { 
          public void onComplete(tachyon.thrift.BlockInfo o) {
            getBlockInfo_result result = new getBlockInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBlockInfo_result result = new getBlockInfo_result();
            if (e instanceof tachyon.thrift.TachyonTException) {
                        result.e = (tachyon.thrift.TachyonTException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBlockInfo_args args, org.apache.thrift.async.AsyncMethodCallback<tachyon.thrift.BlockInfo> resultHandler) throws TException {
        iface.getBlockInfo(args.blockId,resultHandler);
      }
    }

    public static class getCapacityBytes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCapacityBytes_args, Long> {
      public getCapacityBytes() {
        super("getCapacityBytes");
      }

      public getCapacityBytes_args getEmptyArgsInstance() {
        return new getCapacityBytes_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getCapacityBytes_result result = new getCapacityBytes_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCapacityBytes_result result = new getCapacityBytes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCapacityBytes_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getCapacityBytes(resultHandler);
      }
    }

    public static class getUsedBytes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUsedBytes_args, Long> {
      public getUsedBytes() {
        super("getUsedBytes");
      }

      public getUsedBytes_args getEmptyArgsInstance() {
        return new getUsedBytes_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getUsedBytes_result result = new getUsedBytes_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUsedBytes_result result = new getUsedBytes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUsedBytes_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getUsedBytes(resultHandler);
      }
    }

    public static class getWorkerInfoList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWorkerInfoList_args, List<WorkerInfo>> {
      public getWorkerInfoList() {
        super("getWorkerInfoList");
      }

      public getWorkerInfoList_args getEmptyArgsInstance() {
        return new getWorkerInfoList_args();
      }

      public AsyncMethodCallback<List<WorkerInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WorkerInfo>>() { 
          public void onComplete(List<WorkerInfo> o) {
            getWorkerInfoList_result result = new getWorkerInfoList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWorkerInfoList_result result = new getWorkerInfoList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWorkerInfoList_args args, org.apache.thrift.async.AsyncMethodCallback<List<WorkerInfo>> resultHandler) throws TException {
        iface.getWorkerInfoList(resultHandler);
      }
    }

    public static class workerCommitBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, workerCommitBlock_args, Void> {
      public workerCommitBlock() {
        super("workerCommitBlock");
      }

      public workerCommitBlock_args getEmptyArgsInstance() {
        return new workerCommitBlock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            workerCommitBlock_result result = new workerCommitBlock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            workerCommitBlock_result result = new workerCommitBlock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, workerCommitBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.workerCommitBlock(args.workerId, args.usedBytesOnTier, args.tierAlias, args.blockId, args.length,resultHandler);
      }
    }

    public static class workerGetWorkerId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, workerGetWorkerId_args, Long> {
      public workerGetWorkerId() {
        super("workerGetWorkerId");
      }

      public workerGetWorkerId_args getEmptyArgsInstance() {
        return new workerGetWorkerId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            workerGetWorkerId_result result = new workerGetWorkerId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            workerGetWorkerId_result result = new workerGetWorkerId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, workerGetWorkerId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.workerGetWorkerId(args.workerNetAddress,resultHandler);
      }
    }

    public static class workerHeartbeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, workerHeartbeat_args, tachyon.thrift.Command> {
      public workerHeartbeat() {
        super("workerHeartbeat");
      }

      public workerHeartbeat_args getEmptyArgsInstance() {
        return new workerHeartbeat_args();
      }

      public AsyncMethodCallback<tachyon.thrift.Command> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<tachyon.thrift.Command>() { 
          public void onComplete(tachyon.thrift.Command o) {
            workerHeartbeat_result result = new workerHeartbeat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            workerHeartbeat_result result = new workerHeartbeat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, workerHeartbeat_args args, org.apache.thrift.async.AsyncMethodCallback<tachyon.thrift.Command> resultHandler) throws TException {
        iface.workerHeartbeat(args.workerId, args.usedBytesOnTiers, args.removedBlockIds, args.addedBlocksOnTiers,resultHandler);
      }
    }

    public static class workerRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, workerRegister_args, Void> {
      public workerRegister() {
        super("workerRegister");
      }

      public workerRegister_args getEmptyArgsInstance() {
        return new workerRegister_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            workerRegister_result result = new workerRegister_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            workerRegister_result result = new workerRegister_result();
            if (e instanceof tachyon.thrift.TachyonTException) {
                        result.e = (tachyon.thrift.TachyonTException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, workerRegister_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.workerRegister(args.workerId, args.storageTiers, args.totalBytesOnTiers, args.usedBytesOnTiers, args.currentBlocksOnTiers,resultHandler);
      }
    }

  }

  public static class getBlockInfo_args implements org.apache.thrift.TBase<getBlockInfo_args, getBlockInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBlockInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlockInfo_args");

    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlockInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlockInfo_argsTupleSchemeFactory());
    }

    public long blockId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_ID((short)1, "blockId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_ID
            return BLOCK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlockInfo_args.class, metaDataMap);
    }

    public getBlockInfo_args() {
    }

    public getBlockInfo_args(
      long blockId)
    {
      this();
      this.blockId = blockId;
      setBlockIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockInfo_args(getBlockInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.blockId = other.blockId;
    }

    public getBlockInfo_args deepCopy() {
      return new getBlockInfo_args(this);
    }

    @Override
    public void clear() {
      setBlockIdIsSet(false);
      this.blockId = 0;
    }

    public long getBlockId() {
      return this.blockId;
    }

    public getBlockInfo_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_ID:
        return isSetBlockId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockInfo_args)
        return this.equals((getBlockInfo_args)that);
      return false;
    }

    public boolean equals(getBlockInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBlockInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlockInfo_args(");
      boolean first = true;

      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlockInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getBlockInfo_argsStandardScheme getScheme() {
        return new getBlockInfo_argsStandardScheme();
      }
    }

    private static class getBlockInfo_argsStandardScheme extends StandardScheme<getBlockInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlockInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlockInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlockInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getBlockInfo_argsTupleScheme getScheme() {
        return new getBlockInfo_argsTupleScheme();
      }
    }

    private static class getBlockInfo_argsTupleScheme extends TupleScheme<getBlockInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlockInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlockId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlockInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
      }
    }

  }

  public static class getBlockInfo_result implements org.apache.thrift.TBase<getBlockInfo_result, getBlockInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBlockInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlockInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBlockInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBlockInfo_resultTupleSchemeFactory());
    }

    public tachyon.thrift.BlockInfo success; // required
    public tachyon.thrift.TachyonTException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, tachyon.thrift.BlockInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlockInfo_result.class, metaDataMap);
    }

    public getBlockInfo_result() {
    }

    public getBlockInfo_result(
      tachyon.thrift.BlockInfo success,
      tachyon.thrift.TachyonTException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockInfo_result(getBlockInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new tachyon.thrift.BlockInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new tachyon.thrift.TachyonTException(other.e);
      }
    }

    public getBlockInfo_result deepCopy() {
      return new getBlockInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public tachyon.thrift.BlockInfo getSuccess() {
      return this.success;
    }

    public getBlockInfo_result setSuccess(tachyon.thrift.BlockInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public tachyon.thrift.TachyonTException getE() {
      return this.e;
    }

    public getBlockInfo_result setE(tachyon.thrift.TachyonTException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((tachyon.thrift.BlockInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((tachyon.thrift.TachyonTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockInfo_result)
        return this.equals((getBlockInfo_result)that);
      return false;
    }

    public boolean equals(getBlockInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBlockInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlockInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlockInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getBlockInfo_resultStandardScheme getScheme() {
        return new getBlockInfo_resultStandardScheme();
      }
    }

    private static class getBlockInfo_resultStandardScheme extends StandardScheme<getBlockInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlockInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new tachyon.thrift.BlockInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new tachyon.thrift.TachyonTException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlockInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlockInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getBlockInfo_resultTupleScheme getScheme() {
        return new getBlockInfo_resultTupleScheme();
      }
    }

    private static class getBlockInfo_resultTupleScheme extends TupleScheme<getBlockInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlockInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlockInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new tachyon.thrift.BlockInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new tachyon.thrift.TachyonTException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getCapacityBytes_args implements org.apache.thrift.TBase<getCapacityBytes_args, getCapacityBytes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCapacityBytes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCapacityBytes_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCapacityBytes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCapacityBytes_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCapacityBytes_args.class, metaDataMap);
    }

    public getCapacityBytes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCapacityBytes_args(getCapacityBytes_args other) {
    }

    public getCapacityBytes_args deepCopy() {
      return new getCapacityBytes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCapacityBytes_args)
        return this.equals((getCapacityBytes_args)that);
      return false;
    }

    public boolean equals(getCapacityBytes_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getCapacityBytes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCapacityBytes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCapacityBytes_argsStandardSchemeFactory implements SchemeFactory {
      public getCapacityBytes_argsStandardScheme getScheme() {
        return new getCapacityBytes_argsStandardScheme();
      }
    }

    private static class getCapacityBytes_argsStandardScheme extends StandardScheme<getCapacityBytes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCapacityBytes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCapacityBytes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCapacityBytes_argsTupleSchemeFactory implements SchemeFactory {
      public getCapacityBytes_argsTupleScheme getScheme() {
        return new getCapacityBytes_argsTupleScheme();
      }
    }

    private static class getCapacityBytes_argsTupleScheme extends TupleScheme<getCapacityBytes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCapacityBytes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCapacityBytes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCapacityBytes_result implements org.apache.thrift.TBase<getCapacityBytes_result, getCapacityBytes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCapacityBytes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCapacityBytes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCapacityBytes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCapacityBytes_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCapacityBytes_result.class, metaDataMap);
    }

    public getCapacityBytes_result() {
    }

    public getCapacityBytes_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCapacityBytes_result(getCapacityBytes_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCapacityBytes_result deepCopy() {
      return new getCapacityBytes_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getCapacityBytes_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCapacityBytes_result)
        return this.equals((getCapacityBytes_result)that);
      return false;
    }

    public boolean equals(getCapacityBytes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCapacityBytes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCapacityBytes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCapacityBytes_resultStandardSchemeFactory implements SchemeFactory {
      public getCapacityBytes_resultStandardScheme getScheme() {
        return new getCapacityBytes_resultStandardScheme();
      }
    }

    private static class getCapacityBytes_resultStandardScheme extends StandardScheme<getCapacityBytes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCapacityBytes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCapacityBytes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCapacityBytes_resultTupleSchemeFactory implements SchemeFactory {
      public getCapacityBytes_resultTupleScheme getScheme() {
        return new getCapacityBytes_resultTupleScheme();
      }
    }

    private static class getCapacityBytes_resultTupleScheme extends TupleScheme<getCapacityBytes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCapacityBytes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCapacityBytes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUsedBytes_args implements org.apache.thrift.TBase<getUsedBytes_args, getUsedBytes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUsedBytes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUsedBytes_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUsedBytes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUsedBytes_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUsedBytes_args.class, metaDataMap);
    }

    public getUsedBytes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUsedBytes_args(getUsedBytes_args other) {
    }

    public getUsedBytes_args deepCopy() {
      return new getUsedBytes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUsedBytes_args)
        return this.equals((getUsedBytes_args)that);
      return false;
    }

    public boolean equals(getUsedBytes_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getUsedBytes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUsedBytes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUsedBytes_argsStandardSchemeFactory implements SchemeFactory {
      public getUsedBytes_argsStandardScheme getScheme() {
        return new getUsedBytes_argsStandardScheme();
      }
    }

    private static class getUsedBytes_argsStandardScheme extends StandardScheme<getUsedBytes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUsedBytes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUsedBytes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUsedBytes_argsTupleSchemeFactory implements SchemeFactory {
      public getUsedBytes_argsTupleScheme getScheme() {
        return new getUsedBytes_argsTupleScheme();
      }
    }

    private static class getUsedBytes_argsTupleScheme extends TupleScheme<getUsedBytes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUsedBytes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUsedBytes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUsedBytes_result implements org.apache.thrift.TBase<getUsedBytes_result, getUsedBytes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUsedBytes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUsedBytes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUsedBytes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUsedBytes_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUsedBytes_result.class, metaDataMap);
    }

    public getUsedBytes_result() {
    }

    public getUsedBytes_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUsedBytes_result(getUsedBytes_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getUsedBytes_result deepCopy() {
      return new getUsedBytes_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getUsedBytes_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUsedBytes_result)
        return this.equals((getUsedBytes_result)that);
      return false;
    }

    public boolean equals(getUsedBytes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUsedBytes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUsedBytes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUsedBytes_resultStandardSchemeFactory implements SchemeFactory {
      public getUsedBytes_resultStandardScheme getScheme() {
        return new getUsedBytes_resultStandardScheme();
      }
    }

    private static class getUsedBytes_resultStandardScheme extends StandardScheme<getUsedBytes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUsedBytes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUsedBytes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUsedBytes_resultTupleSchemeFactory implements SchemeFactory {
      public getUsedBytes_resultTupleScheme getScheme() {
        return new getUsedBytes_resultTupleScheme();
      }
    }

    private static class getUsedBytes_resultTupleScheme extends TupleScheme<getUsedBytes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUsedBytes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUsedBytes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWorkerInfoList_args implements org.apache.thrift.TBase<getWorkerInfoList_args, getWorkerInfoList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkerInfoList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkerInfoList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkerInfoList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkerInfoList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkerInfoList_args.class, metaDataMap);
    }

    public getWorkerInfoList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkerInfoList_args(getWorkerInfoList_args other) {
    }

    public getWorkerInfoList_args deepCopy() {
      return new getWorkerInfoList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkerInfoList_args)
        return this.equals((getWorkerInfoList_args)that);
      return false;
    }

    public boolean equals(getWorkerInfoList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getWorkerInfoList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkerInfoList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkerInfoList_argsStandardSchemeFactory implements SchemeFactory {
      public getWorkerInfoList_argsStandardScheme getScheme() {
        return new getWorkerInfoList_argsStandardScheme();
      }
    }

    private static class getWorkerInfoList_argsStandardScheme extends StandardScheme<getWorkerInfoList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkerInfoList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkerInfoList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkerInfoList_argsTupleSchemeFactory implements SchemeFactory {
      public getWorkerInfoList_argsTupleScheme getScheme() {
        return new getWorkerInfoList_argsTupleScheme();
      }
    }

    private static class getWorkerInfoList_argsTupleScheme extends TupleScheme<getWorkerInfoList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkerInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkerInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getWorkerInfoList_result implements org.apache.thrift.TBase<getWorkerInfoList_result, getWorkerInfoList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkerInfoList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkerInfoList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkerInfoList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkerInfoList_resultTupleSchemeFactory());
    }

    public List<WorkerInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkerInfoList_result.class, metaDataMap);
    }

    public getWorkerInfoList_result() {
    }

    public getWorkerInfoList_result(
      List<WorkerInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkerInfoList_result(getWorkerInfoList_result other) {
      if (other.isSetSuccess()) {
        List<WorkerInfo> __this__success = new ArrayList<WorkerInfo>(other.success.size());
        for (WorkerInfo other_element : other.success) {
          __this__success.add(new WorkerInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWorkerInfoList_result deepCopy() {
      return new getWorkerInfoList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WorkerInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WorkerInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<WorkerInfo>();
      }
      this.success.add(elem);
    }

    public List<WorkerInfo> getSuccess() {
      return this.success;
    }

    public getWorkerInfoList_result setSuccess(List<WorkerInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WorkerInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkerInfoList_result)
        return this.equals((getWorkerInfoList_result)that);
      return false;
    }

    public boolean equals(getWorkerInfoList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWorkerInfoList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkerInfoList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkerInfoList_resultStandardSchemeFactory implements SchemeFactory {
      public getWorkerInfoList_resultStandardScheme getScheme() {
        return new getWorkerInfoList_resultStandardScheme();
      }
    }

    private static class getWorkerInfoList_resultStandardScheme extends StandardScheme<getWorkerInfoList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkerInfoList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<WorkerInfo>(_list0.size);
                  WorkerInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new WorkerInfo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkerInfoList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WorkerInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkerInfoList_resultTupleSchemeFactory implements SchemeFactory {
      public getWorkerInfoList_resultTupleScheme getScheme() {
        return new getWorkerInfoList_resultTupleScheme();
      }
    }

    private static class getWorkerInfoList_resultTupleScheme extends TupleScheme<getWorkerInfoList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkerInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WorkerInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkerInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WorkerInfo>(_list5.size);
            WorkerInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new WorkerInfo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class workerCommitBlock_args implements org.apache.thrift.TBase<workerCommitBlock_args, workerCommitBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<workerCommitBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerCommitBlock_args");

    private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USED_BYTES_ON_TIER_FIELD_DESC = new org.apache.thrift.protocol.TField("usedBytesOnTier", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TIER_ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("tierAlias", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerCommitBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerCommitBlock_argsTupleSchemeFactory());
    }

    public long workerId; // required
    public long usedBytesOnTier; // required
    public String tierAlias; // required
    public long blockId; // required
    public long length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_ID((short)1, "workerId"),
      USED_BYTES_ON_TIER((short)2, "usedBytesOnTier"),
      TIER_ALIAS((short)3, "tierAlias"),
      BLOCK_ID((short)4, "blockId"),
      LENGTH((short)5, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_ID
            return WORKER_ID;
          case 2: // USED_BYTES_ON_TIER
            return USED_BYTES_ON_TIER;
          case 3: // TIER_ALIAS
            return TIER_ALIAS;
          case 4: // BLOCK_ID
            return BLOCK_ID;
          case 5: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WORKERID_ISSET_ID = 0;
    private static final int __USEDBYTESONTIER_ISSET_ID = 1;
    private static final int __BLOCKID_ISSET_ID = 2;
    private static final int __LENGTH_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USED_BYTES_ON_TIER, new org.apache.thrift.meta_data.FieldMetaData("usedBytesOnTier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TIER_ALIAS, new org.apache.thrift.meta_data.FieldMetaData("tierAlias", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerCommitBlock_args.class, metaDataMap);
    }

    public workerCommitBlock_args() {
    }

    public workerCommitBlock_args(
      long workerId,
      long usedBytesOnTier,
      String tierAlias,
      long blockId,
      long length)
    {
      this();
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      this.usedBytesOnTier = usedBytesOnTier;
      setUsedBytesOnTierIsSet(true);
      this.tierAlias = tierAlias;
      this.blockId = blockId;
      setBlockIdIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerCommitBlock_args(workerCommitBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.workerId = other.workerId;
      this.usedBytesOnTier = other.usedBytesOnTier;
      if (other.isSetTierAlias()) {
        this.tierAlias = other.tierAlias;
      }
      this.blockId = other.blockId;
      this.length = other.length;
    }

    public workerCommitBlock_args deepCopy() {
      return new workerCommitBlock_args(this);
    }

    @Override
    public void clear() {
      setWorkerIdIsSet(false);
      this.workerId = 0;
      setUsedBytesOnTierIsSet(false);
      this.usedBytesOnTier = 0;
      this.tierAlias = null;
      setBlockIdIsSet(false);
      this.blockId = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getWorkerId() {
      return this.workerId;
    }

    public workerCommitBlock_args setWorkerId(long workerId) {
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      return this;
    }

    public void unsetWorkerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerId() {
      return EncodingUtils.testBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    public void setWorkerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERID_ISSET_ID, value);
    }

    public long getUsedBytesOnTier() {
      return this.usedBytesOnTier;
    }

    public workerCommitBlock_args setUsedBytesOnTier(long usedBytesOnTier) {
      this.usedBytesOnTier = usedBytesOnTier;
      setUsedBytesOnTierIsSet(true);
      return this;
    }

    public void unsetUsedBytesOnTier() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDBYTESONTIER_ISSET_ID);
    }

    /** Returns true if field usedBytesOnTier is set (has been assigned a value) and false otherwise */
    public boolean isSetUsedBytesOnTier() {
      return EncodingUtils.testBit(__isset_bitfield, __USEDBYTESONTIER_ISSET_ID);
    }

    public void setUsedBytesOnTierIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDBYTESONTIER_ISSET_ID, value);
    }

    public String getTierAlias() {
      return this.tierAlias;
    }

    public workerCommitBlock_args setTierAlias(String tierAlias) {
      this.tierAlias = tierAlias;
      return this;
    }

    public void unsetTierAlias() {
      this.tierAlias = null;
    }

    /** Returns true if field tierAlias is set (has been assigned a value) and false otherwise */
    public boolean isSetTierAlias() {
      return this.tierAlias != null;
    }

    public void setTierAliasIsSet(boolean value) {
      if (!value) {
        this.tierAlias = null;
      }
    }

    public long getBlockId() {
      return this.blockId;
    }

    public workerCommitBlock_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public long getLength() {
      return this.length;
    }

    public workerCommitBlock_args setLength(long length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_ID:
        if (value == null) {
          unsetWorkerId();
        } else {
          setWorkerId((Long)value);
        }
        break;

      case USED_BYTES_ON_TIER:
        if (value == null) {
          unsetUsedBytesOnTier();
        } else {
          setUsedBytesOnTier((Long)value);
        }
        break;

      case TIER_ALIAS:
        if (value == null) {
          unsetTierAlias();
        } else {
          setTierAlias((String)value);
        }
        break;

      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_ID:
        return Long.valueOf(getWorkerId());

      case USED_BYTES_ON_TIER:
        return Long.valueOf(getUsedBytesOnTier());

      case TIER_ALIAS:
        return getTierAlias();

      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      case LENGTH:
        return Long.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_ID:
        return isSetWorkerId();
      case USED_BYTES_ON_TIER:
        return isSetUsedBytesOnTier();
      case TIER_ALIAS:
        return isSetTierAlias();
      case BLOCK_ID:
        return isSetBlockId();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerCommitBlock_args)
        return this.equals((workerCommitBlock_args)that);
      return false;
    }

    public boolean equals(workerCommitBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_workerId = true;
      boolean that_present_workerId = true;
      if (this_present_workerId || that_present_workerId) {
        if (!(this_present_workerId && that_present_workerId))
          return false;
        if (this.workerId != that.workerId)
          return false;
      }

      boolean this_present_usedBytesOnTier = true;
      boolean that_present_usedBytesOnTier = true;
      if (this_present_usedBytesOnTier || that_present_usedBytesOnTier) {
        if (!(this_present_usedBytesOnTier && that_present_usedBytesOnTier))
          return false;
        if (this.usedBytesOnTier != that.usedBytesOnTier)
          return false;
      }

      boolean this_present_tierAlias = true && this.isSetTierAlias();
      boolean that_present_tierAlias = true && that.isSetTierAlias();
      if (this_present_tierAlias || that_present_tierAlias) {
        if (!(this_present_tierAlias && that_present_tierAlias))
          return false;
        if (!this.tierAlias.equals(that.tierAlias))
          return false;
      }

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workerId = true;
      list.add(present_workerId);
      if (present_workerId)
        list.add(workerId);

      boolean present_usedBytesOnTier = true;
      list.add(present_usedBytesOnTier);
      if (present_usedBytesOnTier)
        list.add(usedBytesOnTier);

      boolean present_tierAlias = true && (isSetTierAlias());
      list.add(present_tierAlias);
      if (present_tierAlias)
        list.add(tierAlias);

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      boolean present_length = true;
      list.add(present_length);
      if (present_length)
        list.add(length);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerCommitBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(other.isSetWorkerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, other.workerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsedBytesOnTier()).compareTo(other.isSetUsedBytesOnTier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsedBytesOnTier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedBytesOnTier, other.usedBytesOnTier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTierAlias()).compareTo(other.isSetTierAlias());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTierAlias()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tierAlias, other.tierAlias);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerCommitBlock_args(");
      boolean first = true;

      sb.append("workerId:");
      sb.append(this.workerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("usedBytesOnTier:");
      sb.append(this.usedBytesOnTier);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tierAlias:");
      if (this.tierAlias == null) {
        sb.append("null");
      } else {
        sb.append(this.tierAlias);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerCommitBlock_argsStandardSchemeFactory implements SchemeFactory {
      public workerCommitBlock_argsStandardScheme getScheme() {
        return new workerCommitBlock_argsStandardScheme();
      }
    }

    private static class workerCommitBlock_argsStandardScheme extends StandardScheme<workerCommitBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerCommitBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.workerId = iprot.readI64();
                struct.setWorkerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USED_BYTES_ON_TIER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.usedBytesOnTier = iprot.readI64();
                struct.setUsedBytesOnTierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIER_ALIAS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tierAlias = iprot.readString();
                struct.setTierAliasIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.length = iprot.readI64();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerCommitBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
        oprot.writeI64(struct.workerId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USED_BYTES_ON_TIER_FIELD_DESC);
        oprot.writeI64(struct.usedBytesOnTier);
        oprot.writeFieldEnd();
        if (struct.tierAlias != null) {
          oprot.writeFieldBegin(TIER_ALIAS_FIELD_DESC);
          oprot.writeString(struct.tierAlias);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI64(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerCommitBlock_argsTupleSchemeFactory implements SchemeFactory {
      public workerCommitBlock_argsTupleScheme getScheme() {
        return new workerCommitBlock_argsTupleScheme();
      }
    }

    private static class workerCommitBlock_argsTupleScheme extends TupleScheme<workerCommitBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerCommitBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerId()) {
          optionals.set(0);
        }
        if (struct.isSetUsedBytesOnTier()) {
          optionals.set(1);
        }
        if (struct.isSetTierAlias()) {
          optionals.set(2);
        }
        if (struct.isSetBlockId()) {
          optionals.set(3);
        }
        if (struct.isSetLength()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetWorkerId()) {
          oprot.writeI64(struct.workerId);
        }
        if (struct.isSetUsedBytesOnTier()) {
          oprot.writeI64(struct.usedBytesOnTier);
        }
        if (struct.isSetTierAlias()) {
          oprot.writeString(struct.tierAlias);
        }
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
        if (struct.isSetLength()) {
          oprot.writeI64(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerCommitBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.workerId = iprot.readI64();
          struct.setWorkerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.usedBytesOnTier = iprot.readI64();
          struct.setUsedBytesOnTierIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tierAlias = iprot.readString();
          struct.setTierAliasIsSet(true);
        }
        if (incoming.get(3)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.length = iprot.readI64();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class workerCommitBlock_result implements org.apache.thrift.TBase<workerCommitBlock_result, workerCommitBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<workerCommitBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerCommitBlock_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerCommitBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerCommitBlock_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerCommitBlock_result.class, metaDataMap);
    }

    public workerCommitBlock_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerCommitBlock_result(workerCommitBlock_result other) {
    }

    public workerCommitBlock_result deepCopy() {
      return new workerCommitBlock_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerCommitBlock_result)
        return this.equals((workerCommitBlock_result)that);
      return false;
    }

    public boolean equals(workerCommitBlock_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(workerCommitBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerCommitBlock_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerCommitBlock_resultStandardSchemeFactory implements SchemeFactory {
      public workerCommitBlock_resultStandardScheme getScheme() {
        return new workerCommitBlock_resultStandardScheme();
      }
    }

    private static class workerCommitBlock_resultStandardScheme extends StandardScheme<workerCommitBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerCommitBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerCommitBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerCommitBlock_resultTupleSchemeFactory implements SchemeFactory {
      public workerCommitBlock_resultTupleScheme getScheme() {
        return new workerCommitBlock_resultTupleScheme();
      }
    }

    private static class workerCommitBlock_resultTupleScheme extends TupleScheme<workerCommitBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerCommitBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerCommitBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class workerGetWorkerId_args implements org.apache.thrift.TBase<workerGetWorkerId_args, workerGetWorkerId_args._Fields>, java.io.Serializable, Cloneable, Comparable<workerGetWorkerId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerGetWorkerId_args");

    private static final org.apache.thrift.protocol.TField WORKER_NET_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("workerNetAddress", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerGetWorkerId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerGetWorkerId_argsTupleSchemeFactory());
    }

    public tachyon.thrift.NetAddress workerNetAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_NET_ADDRESS((short)1, "workerNetAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_NET_ADDRESS
            return WORKER_NET_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_NET_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("workerNetAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, tachyon.thrift.NetAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerGetWorkerId_args.class, metaDataMap);
    }

    public workerGetWorkerId_args() {
    }

    public workerGetWorkerId_args(
      tachyon.thrift.NetAddress workerNetAddress)
    {
      this();
      this.workerNetAddress = workerNetAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerGetWorkerId_args(workerGetWorkerId_args other) {
      if (other.isSetWorkerNetAddress()) {
        this.workerNetAddress = new tachyon.thrift.NetAddress(other.workerNetAddress);
      }
    }

    public workerGetWorkerId_args deepCopy() {
      return new workerGetWorkerId_args(this);
    }

    @Override
    public void clear() {
      this.workerNetAddress = null;
    }

    public tachyon.thrift.NetAddress getWorkerNetAddress() {
      return this.workerNetAddress;
    }

    public workerGetWorkerId_args setWorkerNetAddress(tachyon.thrift.NetAddress workerNetAddress) {
      this.workerNetAddress = workerNetAddress;
      return this;
    }

    public void unsetWorkerNetAddress() {
      this.workerNetAddress = null;
    }

    /** Returns true if field workerNetAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerNetAddress() {
      return this.workerNetAddress != null;
    }

    public void setWorkerNetAddressIsSet(boolean value) {
      if (!value) {
        this.workerNetAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_NET_ADDRESS:
        if (value == null) {
          unsetWorkerNetAddress();
        } else {
          setWorkerNetAddress((tachyon.thrift.NetAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_NET_ADDRESS:
        return getWorkerNetAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_NET_ADDRESS:
        return isSetWorkerNetAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerGetWorkerId_args)
        return this.equals((workerGetWorkerId_args)that);
      return false;
    }

    public boolean equals(workerGetWorkerId_args that) {
      if (that == null)
        return false;

      boolean this_present_workerNetAddress = true && this.isSetWorkerNetAddress();
      boolean that_present_workerNetAddress = true && that.isSetWorkerNetAddress();
      if (this_present_workerNetAddress || that_present_workerNetAddress) {
        if (!(this_present_workerNetAddress && that_present_workerNetAddress))
          return false;
        if (!this.workerNetAddress.equals(that.workerNetAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workerNetAddress = true && (isSetWorkerNetAddress());
      list.add(present_workerNetAddress);
      if (present_workerNetAddress)
        list.add(workerNetAddress);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerGetWorkerId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkerNetAddress()).compareTo(other.isSetWorkerNetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerNetAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerNetAddress, other.workerNetAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerGetWorkerId_args(");
      boolean first = true;

      sb.append("workerNetAddress:");
      if (this.workerNetAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.workerNetAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (workerNetAddress != null) {
        workerNetAddress.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerGetWorkerId_argsStandardSchemeFactory implements SchemeFactory {
      public workerGetWorkerId_argsStandardScheme getScheme() {
        return new workerGetWorkerId_argsStandardScheme();
      }
    }

    private static class workerGetWorkerId_argsStandardScheme extends StandardScheme<workerGetWorkerId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerGetWorkerId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_NET_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workerNetAddress = new tachyon.thrift.NetAddress();
                struct.workerNetAddress.read(iprot);
                struct.setWorkerNetAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerGetWorkerId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.workerNetAddress != null) {
          oprot.writeFieldBegin(WORKER_NET_ADDRESS_FIELD_DESC);
          struct.workerNetAddress.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerGetWorkerId_argsTupleSchemeFactory implements SchemeFactory {
      public workerGetWorkerId_argsTupleScheme getScheme() {
        return new workerGetWorkerId_argsTupleScheme();
      }
    }

    private static class workerGetWorkerId_argsTupleScheme extends TupleScheme<workerGetWorkerId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerGetWorkerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerNetAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWorkerNetAddress()) {
          struct.workerNetAddress.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerGetWorkerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.workerNetAddress = new tachyon.thrift.NetAddress();
          struct.workerNetAddress.read(iprot);
          struct.setWorkerNetAddressIsSet(true);
        }
      }
    }

  }

  public static class workerGetWorkerId_result implements org.apache.thrift.TBase<workerGetWorkerId_result, workerGetWorkerId_result._Fields>, java.io.Serializable, Cloneable, Comparable<workerGetWorkerId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerGetWorkerId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerGetWorkerId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerGetWorkerId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerGetWorkerId_result.class, metaDataMap);
    }

    public workerGetWorkerId_result() {
    }

    public workerGetWorkerId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerGetWorkerId_result(workerGetWorkerId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public workerGetWorkerId_result deepCopy() {
      return new workerGetWorkerId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public workerGetWorkerId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerGetWorkerId_result)
        return this.equals((workerGetWorkerId_result)that);
      return false;
    }

    public boolean equals(workerGetWorkerId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerGetWorkerId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerGetWorkerId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerGetWorkerId_resultStandardSchemeFactory implements SchemeFactory {
      public workerGetWorkerId_resultStandardScheme getScheme() {
        return new workerGetWorkerId_resultStandardScheme();
      }
    }

    private static class workerGetWorkerId_resultStandardScheme extends StandardScheme<workerGetWorkerId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerGetWorkerId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerGetWorkerId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerGetWorkerId_resultTupleSchemeFactory implements SchemeFactory {
      public workerGetWorkerId_resultTupleScheme getScheme() {
        return new workerGetWorkerId_resultTupleScheme();
      }
    }

    private static class workerGetWorkerId_resultTupleScheme extends TupleScheme<workerGetWorkerId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerGetWorkerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerGetWorkerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class workerHeartbeat_args implements org.apache.thrift.TBase<workerHeartbeat_args, workerHeartbeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<workerHeartbeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerHeartbeat_args");

    private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USED_BYTES_ON_TIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("usedBytesOnTiers", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField REMOVED_BLOCK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("removedBlockIds", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ADDED_BLOCKS_ON_TIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("addedBlocksOnTiers", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerHeartbeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerHeartbeat_argsTupleSchemeFactory());
    }

    public long workerId; // required
    public Map<String,Long> usedBytesOnTiers; // required
    public List<Long> removedBlockIds; // required
    public Map<String,List<Long>> addedBlocksOnTiers; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_ID((short)1, "workerId"),
      USED_BYTES_ON_TIERS((short)2, "usedBytesOnTiers"),
      REMOVED_BLOCK_IDS((short)3, "removedBlockIds"),
      ADDED_BLOCKS_ON_TIERS((short)4, "addedBlocksOnTiers");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_ID
            return WORKER_ID;
          case 2: // USED_BYTES_ON_TIERS
            return USED_BYTES_ON_TIERS;
          case 3: // REMOVED_BLOCK_IDS
            return REMOVED_BLOCK_IDS;
          case 4: // ADDED_BLOCKS_ON_TIERS
            return ADDED_BLOCKS_ON_TIERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WORKERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USED_BYTES_ON_TIERS, new org.apache.thrift.meta_data.FieldMetaData("usedBytesOnTiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.REMOVED_BLOCK_IDS, new org.apache.thrift.meta_data.FieldMetaData("removedBlockIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.ADDED_BLOCKS_ON_TIERS, new org.apache.thrift.meta_data.FieldMetaData("addedBlocksOnTiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerHeartbeat_args.class, metaDataMap);
    }

    public workerHeartbeat_args() {
    }

    public workerHeartbeat_args(
      long workerId,
      Map<String,Long> usedBytesOnTiers,
      List<Long> removedBlockIds,
      Map<String,List<Long>> addedBlocksOnTiers)
    {
      this();
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      this.usedBytesOnTiers = usedBytesOnTiers;
      this.removedBlockIds = removedBlockIds;
      this.addedBlocksOnTiers = addedBlocksOnTiers;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerHeartbeat_args(workerHeartbeat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.workerId = other.workerId;
      if (other.isSetUsedBytesOnTiers()) {
        Map<String,Long> __this__usedBytesOnTiers = new HashMap<String,Long>(other.usedBytesOnTiers);
        this.usedBytesOnTiers = __this__usedBytesOnTiers;
      }
      if (other.isSetRemovedBlockIds()) {
        List<Long> __this__removedBlockIds = new ArrayList<Long>(other.removedBlockIds);
        this.removedBlockIds = __this__removedBlockIds;
      }
      if (other.isSetAddedBlocksOnTiers()) {
        Map<String,List<Long>> __this__addedBlocksOnTiers = new HashMap<String,List<Long>>(other.addedBlocksOnTiers.size());
        for (Map.Entry<String, List<Long>> other_element : other.addedBlocksOnTiers.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Long> other_element_value = other_element.getValue();

          String __this__addedBlocksOnTiers_copy_key = other_element_key;

          List<Long> __this__addedBlocksOnTiers_copy_value = new ArrayList<Long>(other_element_value);

          __this__addedBlocksOnTiers.put(__this__addedBlocksOnTiers_copy_key, __this__addedBlocksOnTiers_copy_value);
        }
        this.addedBlocksOnTiers = __this__addedBlocksOnTiers;
      }
    }

    public workerHeartbeat_args deepCopy() {
      return new workerHeartbeat_args(this);
    }

    @Override
    public void clear() {
      setWorkerIdIsSet(false);
      this.workerId = 0;
      this.usedBytesOnTiers = null;
      this.removedBlockIds = null;
      this.addedBlocksOnTiers = null;
    }

    public long getWorkerId() {
      return this.workerId;
    }

    public workerHeartbeat_args setWorkerId(long workerId) {
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      return this;
    }

    public void unsetWorkerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerId() {
      return EncodingUtils.testBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    public void setWorkerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERID_ISSET_ID, value);
    }

    public int getUsedBytesOnTiersSize() {
      return (this.usedBytesOnTiers == null) ? 0 : this.usedBytesOnTiers.size();
    }

    public void putToUsedBytesOnTiers(String key, long val) {
      if (this.usedBytesOnTiers == null) {
        this.usedBytesOnTiers = new HashMap<String,Long>();
      }
      this.usedBytesOnTiers.put(key, val);
    }

    public Map<String,Long> getUsedBytesOnTiers() {
      return this.usedBytesOnTiers;
    }

    public workerHeartbeat_args setUsedBytesOnTiers(Map<String,Long> usedBytesOnTiers) {
      this.usedBytesOnTiers = usedBytesOnTiers;
      return this;
    }

    public void unsetUsedBytesOnTiers() {
      this.usedBytesOnTiers = null;
    }

    /** Returns true if field usedBytesOnTiers is set (has been assigned a value) and false otherwise */
    public boolean isSetUsedBytesOnTiers() {
      return this.usedBytesOnTiers != null;
    }

    public void setUsedBytesOnTiersIsSet(boolean value) {
      if (!value) {
        this.usedBytesOnTiers = null;
      }
    }

    public int getRemovedBlockIdsSize() {
      return (this.removedBlockIds == null) ? 0 : this.removedBlockIds.size();
    }

    public java.util.Iterator<Long> getRemovedBlockIdsIterator() {
      return (this.removedBlockIds == null) ? null : this.removedBlockIds.iterator();
    }

    public void addToRemovedBlockIds(long elem) {
      if (this.removedBlockIds == null) {
        this.removedBlockIds = new ArrayList<Long>();
      }
      this.removedBlockIds.add(elem);
    }

    public List<Long> getRemovedBlockIds() {
      return this.removedBlockIds;
    }

    public workerHeartbeat_args setRemovedBlockIds(List<Long> removedBlockIds) {
      this.removedBlockIds = removedBlockIds;
      return this;
    }

    public void unsetRemovedBlockIds() {
      this.removedBlockIds = null;
    }

    /** Returns true if field removedBlockIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRemovedBlockIds() {
      return this.removedBlockIds != null;
    }

    public void setRemovedBlockIdsIsSet(boolean value) {
      if (!value) {
        this.removedBlockIds = null;
      }
    }

    public int getAddedBlocksOnTiersSize() {
      return (this.addedBlocksOnTiers == null) ? 0 : this.addedBlocksOnTiers.size();
    }

    public void putToAddedBlocksOnTiers(String key, List<Long> val) {
      if (this.addedBlocksOnTiers == null) {
        this.addedBlocksOnTiers = new HashMap<String,List<Long>>();
      }
      this.addedBlocksOnTiers.put(key, val);
    }

    public Map<String,List<Long>> getAddedBlocksOnTiers() {
      return this.addedBlocksOnTiers;
    }

    public workerHeartbeat_args setAddedBlocksOnTiers(Map<String,List<Long>> addedBlocksOnTiers) {
      this.addedBlocksOnTiers = addedBlocksOnTiers;
      return this;
    }

    public void unsetAddedBlocksOnTiers() {
      this.addedBlocksOnTiers = null;
    }

    /** Returns true if field addedBlocksOnTiers is set (has been assigned a value) and false otherwise */
    public boolean isSetAddedBlocksOnTiers() {
      return this.addedBlocksOnTiers != null;
    }

    public void setAddedBlocksOnTiersIsSet(boolean value) {
      if (!value) {
        this.addedBlocksOnTiers = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_ID:
        if (value == null) {
          unsetWorkerId();
        } else {
          setWorkerId((Long)value);
        }
        break;

      case USED_BYTES_ON_TIERS:
        if (value == null) {
          unsetUsedBytesOnTiers();
        } else {
          setUsedBytesOnTiers((Map<String,Long>)value);
        }
        break;

      case REMOVED_BLOCK_IDS:
        if (value == null) {
          unsetRemovedBlockIds();
        } else {
          setRemovedBlockIds((List<Long>)value);
        }
        break;

      case ADDED_BLOCKS_ON_TIERS:
        if (value == null) {
          unsetAddedBlocksOnTiers();
        } else {
          setAddedBlocksOnTiers((Map<String,List<Long>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_ID:
        return Long.valueOf(getWorkerId());

      case USED_BYTES_ON_TIERS:
        return getUsedBytesOnTiers();

      case REMOVED_BLOCK_IDS:
        return getRemovedBlockIds();

      case ADDED_BLOCKS_ON_TIERS:
        return getAddedBlocksOnTiers();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_ID:
        return isSetWorkerId();
      case USED_BYTES_ON_TIERS:
        return isSetUsedBytesOnTiers();
      case REMOVED_BLOCK_IDS:
        return isSetRemovedBlockIds();
      case ADDED_BLOCKS_ON_TIERS:
        return isSetAddedBlocksOnTiers();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerHeartbeat_args)
        return this.equals((workerHeartbeat_args)that);
      return false;
    }

    public boolean equals(workerHeartbeat_args that) {
      if (that == null)
        return false;

      boolean this_present_workerId = true;
      boolean that_present_workerId = true;
      if (this_present_workerId || that_present_workerId) {
        if (!(this_present_workerId && that_present_workerId))
          return false;
        if (this.workerId != that.workerId)
          return false;
      }

      boolean this_present_usedBytesOnTiers = true && this.isSetUsedBytesOnTiers();
      boolean that_present_usedBytesOnTiers = true && that.isSetUsedBytesOnTiers();
      if (this_present_usedBytesOnTiers || that_present_usedBytesOnTiers) {
        if (!(this_present_usedBytesOnTiers && that_present_usedBytesOnTiers))
          return false;
        if (!this.usedBytesOnTiers.equals(that.usedBytesOnTiers))
          return false;
      }

      boolean this_present_removedBlockIds = true && this.isSetRemovedBlockIds();
      boolean that_present_removedBlockIds = true && that.isSetRemovedBlockIds();
      if (this_present_removedBlockIds || that_present_removedBlockIds) {
        if (!(this_present_removedBlockIds && that_present_removedBlockIds))
          return false;
        if (!this.removedBlockIds.equals(that.removedBlockIds))
          return false;
      }

      boolean this_present_addedBlocksOnTiers = true && this.isSetAddedBlocksOnTiers();
      boolean that_present_addedBlocksOnTiers = true && that.isSetAddedBlocksOnTiers();
      if (this_present_addedBlocksOnTiers || that_present_addedBlocksOnTiers) {
        if (!(this_present_addedBlocksOnTiers && that_present_addedBlocksOnTiers))
          return false;
        if (!this.addedBlocksOnTiers.equals(that.addedBlocksOnTiers))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workerId = true;
      list.add(present_workerId);
      if (present_workerId)
        list.add(workerId);

      boolean present_usedBytesOnTiers = true && (isSetUsedBytesOnTiers());
      list.add(present_usedBytesOnTiers);
      if (present_usedBytesOnTiers)
        list.add(usedBytesOnTiers);

      boolean present_removedBlockIds = true && (isSetRemovedBlockIds());
      list.add(present_removedBlockIds);
      if (present_removedBlockIds)
        list.add(removedBlockIds);

      boolean present_addedBlocksOnTiers = true && (isSetAddedBlocksOnTiers());
      list.add(present_addedBlocksOnTiers);
      if (present_addedBlocksOnTiers)
        list.add(addedBlocksOnTiers);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerHeartbeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(other.isSetWorkerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, other.workerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsedBytesOnTiers()).compareTo(other.isSetUsedBytesOnTiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsedBytesOnTiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedBytesOnTiers, other.usedBytesOnTiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemovedBlockIds()).compareTo(other.isSetRemovedBlockIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemovedBlockIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removedBlockIds, other.removedBlockIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAddedBlocksOnTiers()).compareTo(other.isSetAddedBlocksOnTiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddedBlocksOnTiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addedBlocksOnTiers, other.addedBlocksOnTiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerHeartbeat_args(");
      boolean first = true;

      sb.append("workerId:");
      sb.append(this.workerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("usedBytesOnTiers:");
      if (this.usedBytesOnTiers == null) {
        sb.append("null");
      } else {
        sb.append(this.usedBytesOnTiers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("removedBlockIds:");
      if (this.removedBlockIds == null) {
        sb.append("null");
      } else {
        sb.append(this.removedBlockIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("addedBlocksOnTiers:");
      if (this.addedBlocksOnTiers == null) {
        sb.append("null");
      } else {
        sb.append(this.addedBlocksOnTiers);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerHeartbeat_argsStandardSchemeFactory implements SchemeFactory {
      public workerHeartbeat_argsStandardScheme getScheme() {
        return new workerHeartbeat_argsStandardScheme();
      }
    }

    private static class workerHeartbeat_argsStandardScheme extends StandardScheme<workerHeartbeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerHeartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.workerId = iprot.readI64();
                struct.setWorkerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USED_BYTES_ON_TIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.usedBytesOnTiers = new HashMap<String,Long>(2*_map8.size);
                  String _key9;
                  long _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = iprot.readString();
                    _val10 = iprot.readI64();
                    struct.usedBytesOnTiers.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setUsedBytesOnTiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REMOVED_BLOCK_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                  struct.removedBlockIds = new ArrayList<Long>(_list12.size);
                  long _elem13;
                  for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                  {
                    _elem13 = iprot.readI64();
                    struct.removedBlockIds.add(_elem13);
                  }
                  iprot.readListEnd();
                }
                struct.setRemovedBlockIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ADDED_BLOCKS_ON_TIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                  struct.addedBlocksOnTiers = new HashMap<String,List<Long>>(2*_map15.size);
                  String _key16;
                  List<Long> _val17;
                  for (int _i18 = 0; _i18 < _map15.size; ++_i18)
                  {
                    _key16 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                      _val17 = new ArrayList<Long>(_list19.size);
                      long _elem20;
                      for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                      {
                        _elem20 = iprot.readI64();
                        _val17.add(_elem20);
                      }
                      iprot.readListEnd();
                    }
                    struct.addedBlocksOnTiers.put(_key16, _val17);
                  }
                  iprot.readMapEnd();
                }
                struct.setAddedBlocksOnTiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerHeartbeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
        oprot.writeI64(struct.workerId);
        oprot.writeFieldEnd();
        if (struct.usedBytesOnTiers != null) {
          oprot.writeFieldBegin(USED_BYTES_ON_TIERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.usedBytesOnTiers.size()));
            for (Map.Entry<String, Long> _iter22 : struct.usedBytesOnTiers.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeI64(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.removedBlockIds != null) {
          oprot.writeFieldBegin(REMOVED_BLOCK_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.removedBlockIds.size()));
            for (long _iter23 : struct.removedBlockIds)
            {
              oprot.writeI64(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.addedBlocksOnTiers != null) {
          oprot.writeFieldBegin(ADDED_BLOCKS_ON_TIERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.addedBlocksOnTiers.size()));
            for (Map.Entry<String, List<Long>> _iter24 : struct.addedBlocksOnTiers.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter24.getValue().size()));
                for (long _iter25 : _iter24.getValue())
                {
                  oprot.writeI64(_iter25);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerHeartbeat_argsTupleSchemeFactory implements SchemeFactory {
      public workerHeartbeat_argsTupleScheme getScheme() {
        return new workerHeartbeat_argsTupleScheme();
      }
    }

    private static class workerHeartbeat_argsTupleScheme extends TupleScheme<workerHeartbeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerId()) {
          optionals.set(0);
        }
        if (struct.isSetUsedBytesOnTiers()) {
          optionals.set(1);
        }
        if (struct.isSetRemovedBlockIds()) {
          optionals.set(2);
        }
        if (struct.isSetAddedBlocksOnTiers()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWorkerId()) {
          oprot.writeI64(struct.workerId);
        }
        if (struct.isSetUsedBytesOnTiers()) {
          {
            oprot.writeI32(struct.usedBytesOnTiers.size());
            for (Map.Entry<String, Long> _iter26 : struct.usedBytesOnTiers.entrySet())
            {
              oprot.writeString(_iter26.getKey());
              oprot.writeI64(_iter26.getValue());
            }
          }
        }
        if (struct.isSetRemovedBlockIds()) {
          {
            oprot.writeI32(struct.removedBlockIds.size());
            for (long _iter27 : struct.removedBlockIds)
            {
              oprot.writeI64(_iter27);
            }
          }
        }
        if (struct.isSetAddedBlocksOnTiers()) {
          {
            oprot.writeI32(struct.addedBlocksOnTiers.size());
            for (Map.Entry<String, List<Long>> _iter28 : struct.addedBlocksOnTiers.entrySet())
            {
              oprot.writeString(_iter28.getKey());
              {
                oprot.writeI32(_iter28.getValue().size());
                for (long _iter29 : _iter28.getValue())
                {
                  oprot.writeI64(_iter29);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.workerId = iprot.readI64();
          struct.setWorkerIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.usedBytesOnTiers = new HashMap<String,Long>(2*_map30.size);
            String _key31;
            long _val32;
            for (int _i33 = 0; _i33 < _map30.size; ++_i33)
            {
              _key31 = iprot.readString();
              _val32 = iprot.readI64();
              struct.usedBytesOnTiers.put(_key31, _val32);
            }
          }
          struct.setUsedBytesOnTiersIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.removedBlockIds = new ArrayList<Long>(_list34.size);
            long _elem35;
            for (int _i36 = 0; _i36 < _list34.size; ++_i36)
            {
              _elem35 = iprot.readI64();
              struct.removedBlockIds.add(_elem35);
            }
          }
          struct.setRemovedBlockIdsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map37 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.addedBlocksOnTiers = new HashMap<String,List<Long>>(2*_map37.size);
            String _key38;
            List<Long> _val39;
            for (int _i40 = 0; _i40 < _map37.size; ++_i40)
            {
              _key38 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _val39 = new ArrayList<Long>(_list41.size);
                long _elem42;
                for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                {
                  _elem42 = iprot.readI64();
                  _val39.add(_elem42);
                }
              }
              struct.addedBlocksOnTiers.put(_key38, _val39);
            }
          }
          struct.setAddedBlocksOnTiersIsSet(true);
        }
      }
    }

  }

  public static class workerHeartbeat_result implements org.apache.thrift.TBase<workerHeartbeat_result, workerHeartbeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<workerHeartbeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerHeartbeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerHeartbeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerHeartbeat_resultTupleSchemeFactory());
    }

    public tachyon.thrift.Command success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, tachyon.thrift.Command.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerHeartbeat_result.class, metaDataMap);
    }

    public workerHeartbeat_result() {
    }

    public workerHeartbeat_result(
      tachyon.thrift.Command success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerHeartbeat_result(workerHeartbeat_result other) {
      if (other.isSetSuccess()) {
        this.success = new tachyon.thrift.Command(other.success);
      }
    }

    public workerHeartbeat_result deepCopy() {
      return new workerHeartbeat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public tachyon.thrift.Command getSuccess() {
      return this.success;
    }

    public workerHeartbeat_result setSuccess(tachyon.thrift.Command success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((tachyon.thrift.Command)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerHeartbeat_result)
        return this.equals((workerHeartbeat_result)that);
      return false;
    }

    public boolean equals(workerHeartbeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerHeartbeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerHeartbeat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerHeartbeat_resultStandardSchemeFactory implements SchemeFactory {
      public workerHeartbeat_resultStandardScheme getScheme() {
        return new workerHeartbeat_resultStandardScheme();
      }
    }

    private static class workerHeartbeat_resultStandardScheme extends StandardScheme<workerHeartbeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerHeartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new tachyon.thrift.Command();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerHeartbeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerHeartbeat_resultTupleSchemeFactory implements SchemeFactory {
      public workerHeartbeat_resultTupleScheme getScheme() {
        return new workerHeartbeat_resultTupleScheme();
      }
    }

    private static class workerHeartbeat_resultTupleScheme extends TupleScheme<workerHeartbeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new tachyon.thrift.Command();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class workerRegister_args implements org.apache.thrift.TBase<workerRegister_args, workerRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<workerRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerRegister_args");

    private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField STORAGE_TIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("storageTiers", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TOTAL_BYTES_ON_TIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalBytesOnTiers", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField USED_BYTES_ON_TIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("usedBytesOnTiers", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField CURRENT_BLOCKS_ON_TIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("currentBlocksOnTiers", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerRegister_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerRegister_argsTupleSchemeFactory());
    }

    public long workerId; // required
    public List<String> storageTiers; // required
    public Map<String,Long> totalBytesOnTiers; // required
    public Map<String,Long> usedBytesOnTiers; // required
    public Map<String,List<Long>> currentBlocksOnTiers; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_ID((short)1, "workerId"),
      STORAGE_TIERS((short)2, "storageTiers"),
      TOTAL_BYTES_ON_TIERS((short)3, "totalBytesOnTiers"),
      USED_BYTES_ON_TIERS((short)4, "usedBytesOnTiers"),
      CURRENT_BLOCKS_ON_TIERS((short)5, "currentBlocksOnTiers");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_ID
            return WORKER_ID;
          case 2: // STORAGE_TIERS
            return STORAGE_TIERS;
          case 3: // TOTAL_BYTES_ON_TIERS
            return TOTAL_BYTES_ON_TIERS;
          case 4: // USED_BYTES_ON_TIERS
            return USED_BYTES_ON_TIERS;
          case 5: // CURRENT_BLOCKS_ON_TIERS
            return CURRENT_BLOCKS_ON_TIERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WORKERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STORAGE_TIERS, new org.apache.thrift.meta_data.FieldMetaData("storageTiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TOTAL_BYTES_ON_TIERS, new org.apache.thrift.meta_data.FieldMetaData("totalBytesOnTiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.USED_BYTES_ON_TIERS, new org.apache.thrift.meta_data.FieldMetaData("usedBytesOnTiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CURRENT_BLOCKS_ON_TIERS, new org.apache.thrift.meta_data.FieldMetaData("currentBlocksOnTiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerRegister_args.class, metaDataMap);
    }

    public workerRegister_args() {
    }

    public workerRegister_args(
      long workerId,
      List<String> storageTiers,
      Map<String,Long> totalBytesOnTiers,
      Map<String,Long> usedBytesOnTiers,
      Map<String,List<Long>> currentBlocksOnTiers)
    {
      this();
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      this.storageTiers = storageTiers;
      this.totalBytesOnTiers = totalBytesOnTiers;
      this.usedBytesOnTiers = usedBytesOnTiers;
      this.currentBlocksOnTiers = currentBlocksOnTiers;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerRegister_args(workerRegister_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.workerId = other.workerId;
      if (other.isSetStorageTiers()) {
        List<String> __this__storageTiers = new ArrayList<String>(other.storageTiers);
        this.storageTiers = __this__storageTiers;
      }
      if (other.isSetTotalBytesOnTiers()) {
        Map<String,Long> __this__totalBytesOnTiers = new HashMap<String,Long>(other.totalBytesOnTiers);
        this.totalBytesOnTiers = __this__totalBytesOnTiers;
      }
      if (other.isSetUsedBytesOnTiers()) {
        Map<String,Long> __this__usedBytesOnTiers = new HashMap<String,Long>(other.usedBytesOnTiers);
        this.usedBytesOnTiers = __this__usedBytesOnTiers;
      }
      if (other.isSetCurrentBlocksOnTiers()) {
        Map<String,List<Long>> __this__currentBlocksOnTiers = new HashMap<String,List<Long>>(other.currentBlocksOnTiers.size());
        for (Map.Entry<String, List<Long>> other_element : other.currentBlocksOnTiers.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Long> other_element_value = other_element.getValue();

          String __this__currentBlocksOnTiers_copy_key = other_element_key;

          List<Long> __this__currentBlocksOnTiers_copy_value = new ArrayList<Long>(other_element_value);

          __this__currentBlocksOnTiers.put(__this__currentBlocksOnTiers_copy_key, __this__currentBlocksOnTiers_copy_value);
        }
        this.currentBlocksOnTiers = __this__currentBlocksOnTiers;
      }
    }

    public workerRegister_args deepCopy() {
      return new workerRegister_args(this);
    }

    @Override
    public void clear() {
      setWorkerIdIsSet(false);
      this.workerId = 0;
      this.storageTiers = null;
      this.totalBytesOnTiers = null;
      this.usedBytesOnTiers = null;
      this.currentBlocksOnTiers = null;
    }

    public long getWorkerId() {
      return this.workerId;
    }

    public workerRegister_args setWorkerId(long workerId) {
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      return this;
    }

    public void unsetWorkerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerId() {
      return EncodingUtils.testBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    public void setWorkerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERID_ISSET_ID, value);
    }

    public int getStorageTiersSize() {
      return (this.storageTiers == null) ? 0 : this.storageTiers.size();
    }

    public java.util.Iterator<String> getStorageTiersIterator() {
      return (this.storageTiers == null) ? null : this.storageTiers.iterator();
    }

    public void addToStorageTiers(String elem) {
      if (this.storageTiers == null) {
        this.storageTiers = new ArrayList<String>();
      }
      this.storageTiers.add(elem);
    }

    public List<String> getStorageTiers() {
      return this.storageTiers;
    }

    public workerRegister_args setStorageTiers(List<String> storageTiers) {
      this.storageTiers = storageTiers;
      return this;
    }

    public void unsetStorageTiers() {
      this.storageTiers = null;
    }

    /** Returns true if field storageTiers is set (has been assigned a value) and false otherwise */
    public boolean isSetStorageTiers() {
      return this.storageTiers != null;
    }

    public void setStorageTiersIsSet(boolean value) {
      if (!value) {
        this.storageTiers = null;
      }
    }

    public int getTotalBytesOnTiersSize() {
      return (this.totalBytesOnTiers == null) ? 0 : this.totalBytesOnTiers.size();
    }

    public void putToTotalBytesOnTiers(String key, long val) {
      if (this.totalBytesOnTiers == null) {
        this.totalBytesOnTiers = new HashMap<String,Long>();
      }
      this.totalBytesOnTiers.put(key, val);
    }

    public Map<String,Long> getTotalBytesOnTiers() {
      return this.totalBytesOnTiers;
    }

    public workerRegister_args setTotalBytesOnTiers(Map<String,Long> totalBytesOnTiers) {
      this.totalBytesOnTiers = totalBytesOnTiers;
      return this;
    }

    public void unsetTotalBytesOnTiers() {
      this.totalBytesOnTiers = null;
    }

    /** Returns true if field totalBytesOnTiers is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalBytesOnTiers() {
      return this.totalBytesOnTiers != null;
    }

    public void setTotalBytesOnTiersIsSet(boolean value) {
      if (!value) {
        this.totalBytesOnTiers = null;
      }
    }

    public int getUsedBytesOnTiersSize() {
      return (this.usedBytesOnTiers == null) ? 0 : this.usedBytesOnTiers.size();
    }

    public void putToUsedBytesOnTiers(String key, long val) {
      if (this.usedBytesOnTiers == null) {
        this.usedBytesOnTiers = new HashMap<String,Long>();
      }
      this.usedBytesOnTiers.put(key, val);
    }

    public Map<String,Long> getUsedBytesOnTiers() {
      return this.usedBytesOnTiers;
    }

    public workerRegister_args setUsedBytesOnTiers(Map<String,Long> usedBytesOnTiers) {
      this.usedBytesOnTiers = usedBytesOnTiers;
      return this;
    }

    public void unsetUsedBytesOnTiers() {
      this.usedBytesOnTiers = null;
    }

    /** Returns true if field usedBytesOnTiers is set (has been assigned a value) and false otherwise */
    public boolean isSetUsedBytesOnTiers() {
      return this.usedBytesOnTiers != null;
    }

    public void setUsedBytesOnTiersIsSet(boolean value) {
      if (!value) {
        this.usedBytesOnTiers = null;
      }
    }

    public int getCurrentBlocksOnTiersSize() {
      return (this.currentBlocksOnTiers == null) ? 0 : this.currentBlocksOnTiers.size();
    }

    public void putToCurrentBlocksOnTiers(String key, List<Long> val) {
      if (this.currentBlocksOnTiers == null) {
        this.currentBlocksOnTiers = new HashMap<String,List<Long>>();
      }
      this.currentBlocksOnTiers.put(key, val);
    }

    public Map<String,List<Long>> getCurrentBlocksOnTiers() {
      return this.currentBlocksOnTiers;
    }

    public workerRegister_args setCurrentBlocksOnTiers(Map<String,List<Long>> currentBlocksOnTiers) {
      this.currentBlocksOnTiers = currentBlocksOnTiers;
      return this;
    }

    public void unsetCurrentBlocksOnTiers() {
      this.currentBlocksOnTiers = null;
    }

    /** Returns true if field currentBlocksOnTiers is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentBlocksOnTiers() {
      return this.currentBlocksOnTiers != null;
    }

    public void setCurrentBlocksOnTiersIsSet(boolean value) {
      if (!value) {
        this.currentBlocksOnTiers = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_ID:
        if (value == null) {
          unsetWorkerId();
        } else {
          setWorkerId((Long)value);
        }
        break;

      case STORAGE_TIERS:
        if (value == null) {
          unsetStorageTiers();
        } else {
          setStorageTiers((List<String>)value);
        }
        break;

      case TOTAL_BYTES_ON_TIERS:
        if (value == null) {
          unsetTotalBytesOnTiers();
        } else {
          setTotalBytesOnTiers((Map<String,Long>)value);
        }
        break;

      case USED_BYTES_ON_TIERS:
        if (value == null) {
          unsetUsedBytesOnTiers();
        } else {
          setUsedBytesOnTiers((Map<String,Long>)value);
        }
        break;

      case CURRENT_BLOCKS_ON_TIERS:
        if (value == null) {
          unsetCurrentBlocksOnTiers();
        } else {
          setCurrentBlocksOnTiers((Map<String,List<Long>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_ID:
        return Long.valueOf(getWorkerId());

      case STORAGE_TIERS:
        return getStorageTiers();

      case TOTAL_BYTES_ON_TIERS:
        return getTotalBytesOnTiers();

      case USED_BYTES_ON_TIERS:
        return getUsedBytesOnTiers();

      case CURRENT_BLOCKS_ON_TIERS:
        return getCurrentBlocksOnTiers();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_ID:
        return isSetWorkerId();
      case STORAGE_TIERS:
        return isSetStorageTiers();
      case TOTAL_BYTES_ON_TIERS:
        return isSetTotalBytesOnTiers();
      case USED_BYTES_ON_TIERS:
        return isSetUsedBytesOnTiers();
      case CURRENT_BLOCKS_ON_TIERS:
        return isSetCurrentBlocksOnTiers();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerRegister_args)
        return this.equals((workerRegister_args)that);
      return false;
    }

    public boolean equals(workerRegister_args that) {
      if (that == null)
        return false;

      boolean this_present_workerId = true;
      boolean that_present_workerId = true;
      if (this_present_workerId || that_present_workerId) {
        if (!(this_present_workerId && that_present_workerId))
          return false;
        if (this.workerId != that.workerId)
          return false;
      }

      boolean this_present_storageTiers = true && this.isSetStorageTiers();
      boolean that_present_storageTiers = true && that.isSetStorageTiers();
      if (this_present_storageTiers || that_present_storageTiers) {
        if (!(this_present_storageTiers && that_present_storageTiers))
          return false;
        if (!this.storageTiers.equals(that.storageTiers))
          return false;
      }

      boolean this_present_totalBytesOnTiers = true && this.isSetTotalBytesOnTiers();
      boolean that_present_totalBytesOnTiers = true && that.isSetTotalBytesOnTiers();
      if (this_present_totalBytesOnTiers || that_present_totalBytesOnTiers) {
        if (!(this_present_totalBytesOnTiers && that_present_totalBytesOnTiers))
          return false;
        if (!this.totalBytesOnTiers.equals(that.totalBytesOnTiers))
          return false;
      }

      boolean this_present_usedBytesOnTiers = true && this.isSetUsedBytesOnTiers();
      boolean that_present_usedBytesOnTiers = true && that.isSetUsedBytesOnTiers();
      if (this_present_usedBytesOnTiers || that_present_usedBytesOnTiers) {
        if (!(this_present_usedBytesOnTiers && that_present_usedBytesOnTiers))
          return false;
        if (!this.usedBytesOnTiers.equals(that.usedBytesOnTiers))
          return false;
      }

      boolean this_present_currentBlocksOnTiers = true && this.isSetCurrentBlocksOnTiers();
      boolean that_present_currentBlocksOnTiers = true && that.isSetCurrentBlocksOnTiers();
      if (this_present_currentBlocksOnTiers || that_present_currentBlocksOnTiers) {
        if (!(this_present_currentBlocksOnTiers && that_present_currentBlocksOnTiers))
          return false;
        if (!this.currentBlocksOnTiers.equals(that.currentBlocksOnTiers))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workerId = true;
      list.add(present_workerId);
      if (present_workerId)
        list.add(workerId);

      boolean present_storageTiers = true && (isSetStorageTiers());
      list.add(present_storageTiers);
      if (present_storageTiers)
        list.add(storageTiers);

      boolean present_totalBytesOnTiers = true && (isSetTotalBytesOnTiers());
      list.add(present_totalBytesOnTiers);
      if (present_totalBytesOnTiers)
        list.add(totalBytesOnTiers);

      boolean present_usedBytesOnTiers = true && (isSetUsedBytesOnTiers());
      list.add(present_usedBytesOnTiers);
      if (present_usedBytesOnTiers)
        list.add(usedBytesOnTiers);

      boolean present_currentBlocksOnTiers = true && (isSetCurrentBlocksOnTiers());
      list.add(present_currentBlocksOnTiers);
      if (present_currentBlocksOnTiers)
        list.add(currentBlocksOnTiers);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(other.isSetWorkerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, other.workerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStorageTiers()).compareTo(other.isSetStorageTiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStorageTiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storageTiers, other.storageTiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTotalBytesOnTiers()).compareTo(other.isSetTotalBytesOnTiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalBytesOnTiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalBytesOnTiers, other.totalBytesOnTiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsedBytesOnTiers()).compareTo(other.isSetUsedBytesOnTiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsedBytesOnTiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedBytesOnTiers, other.usedBytesOnTiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentBlocksOnTiers()).compareTo(other.isSetCurrentBlocksOnTiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentBlocksOnTiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentBlocksOnTiers, other.currentBlocksOnTiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerRegister_args(");
      boolean first = true;

      sb.append("workerId:");
      sb.append(this.workerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("storageTiers:");
      if (this.storageTiers == null) {
        sb.append("null");
      } else {
        sb.append(this.storageTiers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("totalBytesOnTiers:");
      if (this.totalBytesOnTiers == null) {
        sb.append("null");
      } else {
        sb.append(this.totalBytesOnTiers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("usedBytesOnTiers:");
      if (this.usedBytesOnTiers == null) {
        sb.append("null");
      } else {
        sb.append(this.usedBytesOnTiers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentBlocksOnTiers:");
      if (this.currentBlocksOnTiers == null) {
        sb.append("null");
      } else {
        sb.append(this.currentBlocksOnTiers);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerRegister_argsStandardSchemeFactory implements SchemeFactory {
      public workerRegister_argsStandardScheme getScheme() {
        return new workerRegister_argsStandardScheme();
      }
    }

    private static class workerRegister_argsStandardScheme extends StandardScheme<workerRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.workerId = iprot.readI64();
                struct.setWorkerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STORAGE_TIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.storageTiers = new ArrayList<String>(_list44.size);
                  String _elem45;
                  for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                  {
                    _elem45 = iprot.readString();
                    struct.storageTiers.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setStorageTiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOTAL_BYTES_ON_TIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map47 = iprot.readMapBegin();
                  struct.totalBytesOnTiers = new HashMap<String,Long>(2*_map47.size);
                  String _key48;
                  long _val49;
                  for (int _i50 = 0; _i50 < _map47.size; ++_i50)
                  {
                    _key48 = iprot.readString();
                    _val49 = iprot.readI64();
                    struct.totalBytesOnTiers.put(_key48, _val49);
                  }
                  iprot.readMapEnd();
                }
                struct.setTotalBytesOnTiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USED_BYTES_ON_TIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map51 = iprot.readMapBegin();
                  struct.usedBytesOnTiers = new HashMap<String,Long>(2*_map51.size);
                  String _key52;
                  long _val53;
                  for (int _i54 = 0; _i54 < _map51.size; ++_i54)
                  {
                    _key52 = iprot.readString();
                    _val53 = iprot.readI64();
                    struct.usedBytesOnTiers.put(_key52, _val53);
                  }
                  iprot.readMapEnd();
                }
                struct.setUsedBytesOnTiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CURRENT_BLOCKS_ON_TIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map55 = iprot.readMapBegin();
                  struct.currentBlocksOnTiers = new HashMap<String,List<Long>>(2*_map55.size);
                  String _key56;
                  List<Long> _val57;
                  for (int _i58 = 0; _i58 < _map55.size; ++_i58)
                  {
                    _key56 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                      _val57 = new ArrayList<Long>(_list59.size);
                      long _elem60;
                      for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                      {
                        _elem60 = iprot.readI64();
                        _val57.add(_elem60);
                      }
                      iprot.readListEnd();
                    }
                    struct.currentBlocksOnTiers.put(_key56, _val57);
                  }
                  iprot.readMapEnd();
                }
                struct.setCurrentBlocksOnTiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
        oprot.writeI64(struct.workerId);
        oprot.writeFieldEnd();
        if (struct.storageTiers != null) {
          oprot.writeFieldBegin(STORAGE_TIERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.storageTiers.size()));
            for (String _iter62 : struct.storageTiers)
            {
              oprot.writeString(_iter62);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.totalBytesOnTiers != null) {
          oprot.writeFieldBegin(TOTAL_BYTES_ON_TIERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.totalBytesOnTiers.size()));
            for (Map.Entry<String, Long> _iter63 : struct.totalBytesOnTiers.entrySet())
            {
              oprot.writeString(_iter63.getKey());
              oprot.writeI64(_iter63.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.usedBytesOnTiers != null) {
          oprot.writeFieldBegin(USED_BYTES_ON_TIERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.usedBytesOnTiers.size()));
            for (Map.Entry<String, Long> _iter64 : struct.usedBytesOnTiers.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              oprot.writeI64(_iter64.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.currentBlocksOnTiers != null) {
          oprot.writeFieldBegin(CURRENT_BLOCKS_ON_TIERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.currentBlocksOnTiers.size()));
            for (Map.Entry<String, List<Long>> _iter65 : struct.currentBlocksOnTiers.entrySet())
            {
              oprot.writeString(_iter65.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter65.getValue().size()));
                for (long _iter66 : _iter65.getValue())
                {
                  oprot.writeI64(_iter66);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerRegister_argsTupleSchemeFactory implements SchemeFactory {
      public workerRegister_argsTupleScheme getScheme() {
        return new workerRegister_argsTupleScheme();
      }
    }

    private static class workerRegister_argsTupleScheme extends TupleScheme<workerRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerId()) {
          optionals.set(0);
        }
        if (struct.isSetStorageTiers()) {
          optionals.set(1);
        }
        if (struct.isSetTotalBytesOnTiers()) {
          optionals.set(2);
        }
        if (struct.isSetUsedBytesOnTiers()) {
          optionals.set(3);
        }
        if (struct.isSetCurrentBlocksOnTiers()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetWorkerId()) {
          oprot.writeI64(struct.workerId);
        }
        if (struct.isSetStorageTiers()) {
          {
            oprot.writeI32(struct.storageTiers.size());
            for (String _iter67 : struct.storageTiers)
            {
              oprot.writeString(_iter67);
            }
          }
        }
        if (struct.isSetTotalBytesOnTiers()) {
          {
            oprot.writeI32(struct.totalBytesOnTiers.size());
            for (Map.Entry<String, Long> _iter68 : struct.totalBytesOnTiers.entrySet())
            {
              oprot.writeString(_iter68.getKey());
              oprot.writeI64(_iter68.getValue());
            }
          }
        }
        if (struct.isSetUsedBytesOnTiers()) {
          {
            oprot.writeI32(struct.usedBytesOnTiers.size());
            for (Map.Entry<String, Long> _iter69 : struct.usedBytesOnTiers.entrySet())
            {
              oprot.writeString(_iter69.getKey());
              oprot.writeI64(_iter69.getValue());
            }
          }
        }
        if (struct.isSetCurrentBlocksOnTiers()) {
          {
            oprot.writeI32(struct.currentBlocksOnTiers.size());
            for (Map.Entry<String, List<Long>> _iter70 : struct.currentBlocksOnTiers.entrySet())
            {
              oprot.writeString(_iter70.getKey());
              {
                oprot.writeI32(_iter70.getValue().size());
                for (long _iter71 : _iter70.getValue())
                {
                  oprot.writeI64(_iter71);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerRegister_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.workerId = iprot.readI64();
          struct.setWorkerIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list72 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.storageTiers = new ArrayList<String>(_list72.size);
            String _elem73;
            for (int _i74 = 0; _i74 < _list72.size; ++_i74)
            {
              _elem73 = iprot.readString();
              struct.storageTiers.add(_elem73);
            }
          }
          struct.setStorageTiersIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map75 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.totalBytesOnTiers = new HashMap<String,Long>(2*_map75.size);
            String _key76;
            long _val77;
            for (int _i78 = 0; _i78 < _map75.size; ++_i78)
            {
              _key76 = iprot.readString();
              _val77 = iprot.readI64();
              struct.totalBytesOnTiers.put(_key76, _val77);
            }
          }
          struct.setTotalBytesOnTiersIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map79 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.usedBytesOnTiers = new HashMap<String,Long>(2*_map79.size);
            String _key80;
            long _val81;
            for (int _i82 = 0; _i82 < _map79.size; ++_i82)
            {
              _key80 = iprot.readString();
              _val81 = iprot.readI64();
              struct.usedBytesOnTiers.put(_key80, _val81);
            }
          }
          struct.setUsedBytesOnTiersIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map83 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.currentBlocksOnTiers = new HashMap<String,List<Long>>(2*_map83.size);
            String _key84;
            List<Long> _val85;
            for (int _i86 = 0; _i86 < _map83.size; ++_i86)
            {
              _key84 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _val85 = new ArrayList<Long>(_list87.size);
                long _elem88;
                for (int _i89 = 0; _i89 < _list87.size; ++_i89)
                {
                  _elem88 = iprot.readI64();
                  _val85.add(_elem88);
                }
              }
              struct.currentBlocksOnTiers.put(_key84, _val85);
            }
          }
          struct.setCurrentBlocksOnTiersIsSet(true);
        }
      }
    }

  }

  public static class workerRegister_result implements org.apache.thrift.TBase<workerRegister_result, workerRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<workerRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerRegister_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerRegister_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerRegister_resultTupleSchemeFactory());
    }

    public tachyon.thrift.TachyonTException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerRegister_result.class, metaDataMap);
    }

    public workerRegister_result() {
    }

    public workerRegister_result(
      tachyon.thrift.TachyonTException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerRegister_result(workerRegister_result other) {
      if (other.isSetE()) {
        this.e = new tachyon.thrift.TachyonTException(other.e);
      }
    }

    public workerRegister_result deepCopy() {
      return new workerRegister_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public tachyon.thrift.TachyonTException getE() {
      return this.e;
    }

    public workerRegister_result setE(tachyon.thrift.TachyonTException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((tachyon.thrift.TachyonTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerRegister_result)
        return this.equals((workerRegister_result)that);
      return false;
    }

    public boolean equals(workerRegister_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerRegister_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerRegister_resultStandardSchemeFactory implements SchemeFactory {
      public workerRegister_resultStandardScheme getScheme() {
        return new workerRegister_resultStandardScheme();
      }
    }

    private static class workerRegister_resultStandardScheme extends StandardScheme<workerRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new tachyon.thrift.TachyonTException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerRegister_resultTupleSchemeFactory implements SchemeFactory {
      public workerRegister_resultTupleScheme getScheme() {
        return new workerRegister_resultTupleScheme();
      }
    }

    private static class workerRegister_resultTupleScheme extends TupleScheme<workerRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerRegister_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new tachyon.thrift.TachyonTException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
