/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-22")
public class LineageInfo implements org.apache.thrift.TBase<LineageInfo, LineageInfo._Fields>, java.io.Serializable, Cloneable, Comparable<LineageInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LineageInfo");

  private static final org.apache.thrift.protocol.TField M_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField M_INPUT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("mInputFiles", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField M_OUTPUT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("mOutputFiles", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField M_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("mJob", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField M_CREATION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("mCreationTimeMs", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PARENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("parents", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("children", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LineageInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LineageInfoTupleSchemeFactory());
  }

  public long mId; // required
  public List<Long> mInputFiles; // required
  public List<LineageFileInfo> mOutputFiles; // required
  public CommandLineJobInfo mJob; // required
  public long mCreationTimeMs; // required
  public List<Long> parents; // required
  public List<Long> children; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_ID((short)1, "mId"),
    M_INPUT_FILES((short)2, "mInputFiles"),
    M_OUTPUT_FILES((short)3, "mOutputFiles"),
    M_JOB((short)4, "mJob"),
    M_CREATION_TIME_MS((short)5, "mCreationTimeMs"),
    PARENTS((short)6, "parents"),
    CHILDREN((short)7, "children");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_ID
          return M_ID;
        case 2: // M_INPUT_FILES
          return M_INPUT_FILES;
        case 3: // M_OUTPUT_FILES
          return M_OUTPUT_FILES;
        case 4: // M_JOB
          return M_JOB;
        case 5: // M_CREATION_TIME_MS
          return M_CREATION_TIME_MS;
        case 6: // PARENTS
          return PARENTS;
        case 7: // CHILDREN
          return CHILDREN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MID_ISSET_ID = 0;
  private static final int __MCREATIONTIMEMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_ID, new org.apache.thrift.meta_data.FieldMetaData("mId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.M_INPUT_FILES, new org.apache.thrift.meta_data.FieldMetaData("mInputFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.M_OUTPUT_FILES, new org.apache.thrift.meta_data.FieldMetaData("mOutputFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LineageFileInfo.class))));
    tmpMap.put(_Fields.M_JOB, new org.apache.thrift.meta_data.FieldMetaData("mJob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommandLineJobInfo.class)));
    tmpMap.put(_Fields.M_CREATION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("mCreationTimeMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENTS, new org.apache.thrift.meta_data.FieldMetaData("parents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("children", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LineageInfo.class, metaDataMap);
  }

  public LineageInfo() {
  }

  public LineageInfo(
    long mId,
    List<Long> mInputFiles,
    List<LineageFileInfo> mOutputFiles,
    CommandLineJobInfo mJob,
    long mCreationTimeMs,
    List<Long> parents,
    List<Long> children)
  {
    this();
    this.mId = mId;
    setMIdIsSet(true);
    this.mInputFiles = mInputFiles;
    this.mOutputFiles = mOutputFiles;
    this.mJob = mJob;
    this.mCreationTimeMs = mCreationTimeMs;
    setMCreationTimeMsIsSet(true);
    this.parents = parents;
    this.children = children;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineageInfo(LineageInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mId = other.mId;
    if (other.isSetMInputFiles()) {
      List<Long> __this__mInputFiles = new ArrayList<Long>(other.mInputFiles);
      this.mInputFiles = __this__mInputFiles;
    }
    if (other.isSetMOutputFiles()) {
      List<LineageFileInfo> __this__mOutputFiles = new ArrayList<LineageFileInfo>(other.mOutputFiles.size());
      for (LineageFileInfo other_element : other.mOutputFiles) {
        __this__mOutputFiles.add(new LineageFileInfo(other_element));
      }
      this.mOutputFiles = __this__mOutputFiles;
    }
    if (other.isSetMJob()) {
      this.mJob = new CommandLineJobInfo(other.mJob);
    }
    this.mCreationTimeMs = other.mCreationTimeMs;
    if (other.isSetParents()) {
      List<Long> __this__parents = new ArrayList<Long>(other.parents);
      this.parents = __this__parents;
    }
    if (other.isSetChildren()) {
      List<Long> __this__children = new ArrayList<Long>(other.children);
      this.children = __this__children;
    }
  }

  public LineageInfo deepCopy() {
    return new LineageInfo(this);
  }

  @Override
  public void clear() {
    setMIdIsSet(false);
    this.mId = 0;
    this.mInputFiles = null;
    this.mOutputFiles = null;
    this.mJob = null;
    setMCreationTimeMsIsSet(false);
    this.mCreationTimeMs = 0;
    this.parents = null;
    this.children = null;
  }

  public long getMId() {
    return this.mId;
  }

  public LineageInfo setMId(long mId) {
    this.mId = mId;
    setMIdIsSet(true);
    return this;
  }

  public void unsetMId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mId is set (has been assigned a value) and false otherwise */
  public boolean isSetMId() {
    return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public int getMInputFilesSize() {
    return (this.mInputFiles == null) ? 0 : this.mInputFiles.size();
  }

  public java.util.Iterator<Long> getMInputFilesIterator() {
    return (this.mInputFiles == null) ? null : this.mInputFiles.iterator();
  }

  public void addToMInputFiles(long elem) {
    if (this.mInputFiles == null) {
      this.mInputFiles = new ArrayList<Long>();
    }
    this.mInputFiles.add(elem);
  }

  public List<Long> getMInputFiles() {
    return this.mInputFiles;
  }

  public LineageInfo setMInputFiles(List<Long> mInputFiles) {
    this.mInputFiles = mInputFiles;
    return this;
  }

  public void unsetMInputFiles() {
    this.mInputFiles = null;
  }

  /** Returns true if field mInputFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetMInputFiles() {
    return this.mInputFiles != null;
  }

  public void setMInputFilesIsSet(boolean value) {
    if (!value) {
      this.mInputFiles = null;
    }
  }

  public int getMOutputFilesSize() {
    return (this.mOutputFiles == null) ? 0 : this.mOutputFiles.size();
  }

  public java.util.Iterator<LineageFileInfo> getMOutputFilesIterator() {
    return (this.mOutputFiles == null) ? null : this.mOutputFiles.iterator();
  }

  public void addToMOutputFiles(LineageFileInfo elem) {
    if (this.mOutputFiles == null) {
      this.mOutputFiles = new ArrayList<LineageFileInfo>();
    }
    this.mOutputFiles.add(elem);
  }

  public List<LineageFileInfo> getMOutputFiles() {
    return this.mOutputFiles;
  }

  public LineageInfo setMOutputFiles(List<LineageFileInfo> mOutputFiles) {
    this.mOutputFiles = mOutputFiles;
    return this;
  }

  public void unsetMOutputFiles() {
    this.mOutputFiles = null;
  }

  /** Returns true if field mOutputFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetMOutputFiles() {
    return this.mOutputFiles != null;
  }

  public void setMOutputFilesIsSet(boolean value) {
    if (!value) {
      this.mOutputFiles = null;
    }
  }

  public CommandLineJobInfo getMJob() {
    return this.mJob;
  }

  public LineageInfo setMJob(CommandLineJobInfo mJob) {
    this.mJob = mJob;
    return this;
  }

  public void unsetMJob() {
    this.mJob = null;
  }

  /** Returns true if field mJob is set (has been assigned a value) and false otherwise */
  public boolean isSetMJob() {
    return this.mJob != null;
  }

  public void setMJobIsSet(boolean value) {
    if (!value) {
      this.mJob = null;
    }
  }

  public long getMCreationTimeMs() {
    return this.mCreationTimeMs;
  }

  public LineageInfo setMCreationTimeMs(long mCreationTimeMs) {
    this.mCreationTimeMs = mCreationTimeMs;
    setMCreationTimeMsIsSet(true);
    return this;
  }

  public void unsetMCreationTimeMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MCREATIONTIMEMS_ISSET_ID);
  }

  /** Returns true if field mCreationTimeMs is set (has been assigned a value) and false otherwise */
  public boolean isSetMCreationTimeMs() {
    return EncodingUtils.testBit(__isset_bitfield, __MCREATIONTIMEMS_ISSET_ID);
  }

  public void setMCreationTimeMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MCREATIONTIMEMS_ISSET_ID, value);
  }

  public int getParentsSize() {
    return (this.parents == null) ? 0 : this.parents.size();
  }

  public java.util.Iterator<Long> getParentsIterator() {
    return (this.parents == null) ? null : this.parents.iterator();
  }

  public void addToParents(long elem) {
    if (this.parents == null) {
      this.parents = new ArrayList<Long>();
    }
    this.parents.add(elem);
  }

  public List<Long> getParents() {
    return this.parents;
  }

  public LineageInfo setParents(List<Long> parents) {
    this.parents = parents;
    return this;
  }

  public void unsetParents() {
    this.parents = null;
  }

  /** Returns true if field parents is set (has been assigned a value) and false otherwise */
  public boolean isSetParents() {
    return this.parents != null;
  }

  public void setParentsIsSet(boolean value) {
    if (!value) {
      this.parents = null;
    }
  }

  public int getChildrenSize() {
    return (this.children == null) ? 0 : this.children.size();
  }

  public java.util.Iterator<Long> getChildrenIterator() {
    return (this.children == null) ? null : this.children.iterator();
  }

  public void addToChildren(long elem) {
    if (this.children == null) {
      this.children = new ArrayList<Long>();
    }
    this.children.add(elem);
  }

  public List<Long> getChildren() {
    return this.children;
  }

  public LineageInfo setChildren(List<Long> children) {
    this.children = children;
    return this;
  }

  public void unsetChildren() {
    this.children = null;
  }

  /** Returns true if field children is set (has been assigned a value) and false otherwise */
  public boolean isSetChildren() {
    return this.children != null;
  }

  public void setChildrenIsSet(boolean value) {
    if (!value) {
      this.children = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_ID:
      if (value == null) {
        unsetMId();
      } else {
        setMId((Long)value);
      }
      break;

    case M_INPUT_FILES:
      if (value == null) {
        unsetMInputFiles();
      } else {
        setMInputFiles((List<Long>)value);
      }
      break;

    case M_OUTPUT_FILES:
      if (value == null) {
        unsetMOutputFiles();
      } else {
        setMOutputFiles((List<LineageFileInfo>)value);
      }
      break;

    case M_JOB:
      if (value == null) {
        unsetMJob();
      } else {
        setMJob((CommandLineJobInfo)value);
      }
      break;

    case M_CREATION_TIME_MS:
      if (value == null) {
        unsetMCreationTimeMs();
      } else {
        setMCreationTimeMs((Long)value);
      }
      break;

    case PARENTS:
      if (value == null) {
        unsetParents();
      } else {
        setParents((List<Long>)value);
      }
      break;

    case CHILDREN:
      if (value == null) {
        unsetChildren();
      } else {
        setChildren((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_ID:
      return Long.valueOf(getMId());

    case M_INPUT_FILES:
      return getMInputFiles();

    case M_OUTPUT_FILES:
      return getMOutputFiles();

    case M_JOB:
      return getMJob();

    case M_CREATION_TIME_MS:
      return Long.valueOf(getMCreationTimeMs());

    case PARENTS:
      return getParents();

    case CHILDREN:
      return getChildren();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_ID:
      return isSetMId();
    case M_INPUT_FILES:
      return isSetMInputFiles();
    case M_OUTPUT_FILES:
      return isSetMOutputFiles();
    case M_JOB:
      return isSetMJob();
    case M_CREATION_TIME_MS:
      return isSetMCreationTimeMs();
    case PARENTS:
      return isSetParents();
    case CHILDREN:
      return isSetChildren();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LineageInfo)
      return this.equals((LineageInfo)that);
    return false;
  }

  public boolean equals(LineageInfo that) {
    if (that == null)
      return false;

    boolean this_present_mId = true;
    boolean that_present_mId = true;
    if (this_present_mId || that_present_mId) {
      if (!(this_present_mId && that_present_mId))
        return false;
      if (this.mId != that.mId)
        return false;
    }

    boolean this_present_mInputFiles = true && this.isSetMInputFiles();
    boolean that_present_mInputFiles = true && that.isSetMInputFiles();
    if (this_present_mInputFiles || that_present_mInputFiles) {
      if (!(this_present_mInputFiles && that_present_mInputFiles))
        return false;
      if (!this.mInputFiles.equals(that.mInputFiles))
        return false;
    }

    boolean this_present_mOutputFiles = true && this.isSetMOutputFiles();
    boolean that_present_mOutputFiles = true && that.isSetMOutputFiles();
    if (this_present_mOutputFiles || that_present_mOutputFiles) {
      if (!(this_present_mOutputFiles && that_present_mOutputFiles))
        return false;
      if (!this.mOutputFiles.equals(that.mOutputFiles))
        return false;
    }

    boolean this_present_mJob = true && this.isSetMJob();
    boolean that_present_mJob = true && that.isSetMJob();
    if (this_present_mJob || that_present_mJob) {
      if (!(this_present_mJob && that_present_mJob))
        return false;
      if (!this.mJob.equals(that.mJob))
        return false;
    }

    boolean this_present_mCreationTimeMs = true;
    boolean that_present_mCreationTimeMs = true;
    if (this_present_mCreationTimeMs || that_present_mCreationTimeMs) {
      if (!(this_present_mCreationTimeMs && that_present_mCreationTimeMs))
        return false;
      if (this.mCreationTimeMs != that.mCreationTimeMs)
        return false;
    }

    boolean this_present_parents = true && this.isSetParents();
    boolean that_present_parents = true && that.isSetParents();
    if (this_present_parents || that_present_parents) {
      if (!(this_present_parents && that_present_parents))
        return false;
      if (!this.parents.equals(that.parents))
        return false;
    }

    boolean this_present_children = true && this.isSetChildren();
    boolean that_present_children = true && that.isSetChildren();
    if (this_present_children || that_present_children) {
      if (!(this_present_children && that_present_children))
        return false;
      if (!this.children.equals(that.children))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mId = true;
    list.add(present_mId);
    if (present_mId)
      list.add(mId);

    boolean present_mInputFiles = true && (isSetMInputFiles());
    list.add(present_mInputFiles);
    if (present_mInputFiles)
      list.add(mInputFiles);

    boolean present_mOutputFiles = true && (isSetMOutputFiles());
    list.add(present_mOutputFiles);
    if (present_mOutputFiles)
      list.add(mOutputFiles);

    boolean present_mJob = true && (isSetMJob());
    list.add(present_mJob);
    if (present_mJob)
      list.add(mJob);

    boolean present_mCreationTimeMs = true;
    list.add(present_mCreationTimeMs);
    if (present_mCreationTimeMs)
      list.add(mCreationTimeMs);

    boolean present_parents = true && (isSetParents());
    list.add(present_parents);
    if (present_parents)
      list.add(parents);

    boolean present_children = true && (isSetChildren());
    list.add(present_children);
    if (present_children)
      list.add(children);

    return list.hashCode();
  }

  @Override
  public int compareTo(LineageInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMId()).compareTo(other.isSetMId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mId, other.mId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMInputFiles()).compareTo(other.isSetMInputFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMInputFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mInputFiles, other.mInputFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMOutputFiles()).compareTo(other.isSetMOutputFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMOutputFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mOutputFiles, other.mOutputFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMJob()).compareTo(other.isSetMJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mJob, other.mJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMCreationTimeMs()).compareTo(other.isSetMCreationTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMCreationTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mCreationTimeMs, other.mCreationTimeMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParents()).compareTo(other.isSetParents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parents, other.parents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildren()).compareTo(other.isSetChildren());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildren()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.children, other.children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LineageInfo(");
    boolean first = true;

    sb.append("mId:");
    sb.append(this.mId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mInputFiles:");
    if (this.mInputFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.mInputFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mOutputFiles:");
    if (this.mOutputFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.mOutputFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mJob:");
    if (this.mJob == null) {
      sb.append("null");
    } else {
      sb.append(this.mJob);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mCreationTimeMs:");
    sb.append(this.mCreationTimeMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parents:");
    if (this.parents == null) {
      sb.append("null");
    } else {
      sb.append(this.parents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("children:");
    if (this.children == null) {
      sb.append("null");
    } else {
      sb.append(this.children);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (mJob != null) {
      mJob.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LineageInfoStandardSchemeFactory implements SchemeFactory {
    public LineageInfoStandardScheme getScheme() {
      return new LineageInfoStandardScheme();
    }
  }

  private static class LineageInfoStandardScheme extends StandardScheme<LineageInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LineageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mId = iprot.readI64();
              struct.setMIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_INPUT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.mInputFiles = new ArrayList<Long>(_list72.size);
                long _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readI64();
                  struct.mInputFiles.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setMInputFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_OUTPUT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.mOutputFiles = new ArrayList<LineageFileInfo>(_list75.size);
                LineageFileInfo _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = new LineageFileInfo();
                  _elem76.read(iprot);
                  struct.mOutputFiles.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setMOutputFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // M_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mJob = new CommandLineJobInfo();
              struct.mJob.read(iprot);
              struct.setMJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // M_CREATION_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mCreationTimeMs = iprot.readI64();
              struct.setMCreationTimeMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.parents = new ArrayList<Long>(_list78.size);
                long _elem79;
                for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                {
                  _elem79 = iprot.readI64();
                  struct.parents.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setParentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list81 = iprot.readListBegin();
                struct.children = new ArrayList<Long>(_list81.size);
                long _elem82;
                for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                {
                  _elem82 = iprot.readI64();
                  struct.children.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setChildrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LineageInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(M_ID_FIELD_DESC);
      oprot.writeI64(struct.mId);
      oprot.writeFieldEnd();
      if (struct.mInputFiles != null) {
        oprot.writeFieldBegin(M_INPUT_FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.mInputFiles.size()));
          for (long _iter84 : struct.mInputFiles)
          {
            oprot.writeI64(_iter84);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mOutputFiles != null) {
        oprot.writeFieldBegin(M_OUTPUT_FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mOutputFiles.size()));
          for (LineageFileInfo _iter85 : struct.mOutputFiles)
          {
            _iter85.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mJob != null) {
        oprot.writeFieldBegin(M_JOB_FIELD_DESC);
        struct.mJob.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(M_CREATION_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.mCreationTimeMs);
      oprot.writeFieldEnd();
      if (struct.parents != null) {
        oprot.writeFieldBegin(PARENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.parents.size()));
          for (long _iter86 : struct.parents)
          {
            oprot.writeI64(_iter86);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.children != null) {
        oprot.writeFieldBegin(CHILDREN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.children.size()));
          for (long _iter87 : struct.children)
          {
            oprot.writeI64(_iter87);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LineageInfoTupleSchemeFactory implements SchemeFactory {
    public LineageInfoTupleScheme getScheme() {
      return new LineageInfoTupleScheme();
    }
  }

  private static class LineageInfoTupleScheme extends TupleScheme<LineageInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LineageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMId()) {
        optionals.set(0);
      }
      if (struct.isSetMInputFiles()) {
        optionals.set(1);
      }
      if (struct.isSetMOutputFiles()) {
        optionals.set(2);
      }
      if (struct.isSetMJob()) {
        optionals.set(3);
      }
      if (struct.isSetMCreationTimeMs()) {
        optionals.set(4);
      }
      if (struct.isSetParents()) {
        optionals.set(5);
      }
      if (struct.isSetChildren()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMId()) {
        oprot.writeI64(struct.mId);
      }
      if (struct.isSetMInputFiles()) {
        {
          oprot.writeI32(struct.mInputFiles.size());
          for (long _iter88 : struct.mInputFiles)
          {
            oprot.writeI64(_iter88);
          }
        }
      }
      if (struct.isSetMOutputFiles()) {
        {
          oprot.writeI32(struct.mOutputFiles.size());
          for (LineageFileInfo _iter89 : struct.mOutputFiles)
          {
            _iter89.write(oprot);
          }
        }
      }
      if (struct.isSetMJob()) {
        struct.mJob.write(oprot);
      }
      if (struct.isSetMCreationTimeMs()) {
        oprot.writeI64(struct.mCreationTimeMs);
      }
      if (struct.isSetParents()) {
        {
          oprot.writeI32(struct.parents.size());
          for (long _iter90 : struct.parents)
          {
            oprot.writeI64(_iter90);
          }
        }
      }
      if (struct.isSetChildren()) {
        {
          oprot.writeI32(struct.children.size());
          for (long _iter91 : struct.children)
          {
            oprot.writeI64(_iter91);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LineageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.mId = iprot.readI64();
        struct.setMIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mInputFiles = new ArrayList<Long>(_list92.size);
          long _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            _elem93 = iprot.readI64();
            struct.mInputFiles.add(_elem93);
          }
        }
        struct.setMInputFilesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mOutputFiles = new ArrayList<LineageFileInfo>(_list95.size);
          LineageFileInfo _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = new LineageFileInfo();
            _elem96.read(iprot);
            struct.mOutputFiles.add(_elem96);
          }
        }
        struct.setMOutputFilesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mJob = new CommandLineJobInfo();
        struct.mJob.read(iprot);
        struct.setMJobIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mCreationTimeMs = iprot.readI64();
        struct.setMCreationTimeMsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.parents = new ArrayList<Long>(_list98.size);
          long _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = iprot.readI64();
            struct.parents.add(_elem99);
          }
        }
        struct.setParentsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.children = new ArrayList<Long>(_list101.size);
          long _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = iprot.readI64();
            struct.children.add(_elem102);
          }
        }
        struct.setChildrenIsSet(true);
      }
    }
  }

}

