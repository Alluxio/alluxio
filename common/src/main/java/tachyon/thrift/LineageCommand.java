/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-18")
public class LineageCommand implements org.apache.thrift.TBase<LineageCommand, LineageCommand._Fields>, java.io.Serializable, Cloneable, Comparable<LineageCommand> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LineageCommand");

  private static final org.apache.thrift.protocol.TField M_COMMAND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mCommandType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField M_BLOCK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mBlockIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField M_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("mFilePath", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LineageCommandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LineageCommandTupleSchemeFactory());
  }

  /**
   * 
   * @see CommandType
   */
  public CommandType mCommandType; // required
  public List<Long> mBlockIds; // required
  public String mFilePath; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see CommandType
     */
    M_COMMAND_TYPE((short)1, "mCommandType"),
    M_BLOCK_IDS((short)2, "mBlockIds"),
    M_FILE_PATH((short)3, "mFilePath");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_COMMAND_TYPE
          return M_COMMAND_TYPE;
        case 2: // M_BLOCK_IDS
          return M_BLOCK_IDS;
        case 3: // M_FILE_PATH
          return M_FILE_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_COMMAND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mCommandType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommandType.class)));
    tmpMap.put(_Fields.M_BLOCK_IDS, new org.apache.thrift.meta_data.FieldMetaData("mBlockIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.M_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("mFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LineageCommand.class, metaDataMap);
  }

  public LineageCommand() {
  }

  public LineageCommand(
    CommandType mCommandType,
    List<Long> mBlockIds,
    String mFilePath)
  {
    this();
    this.mCommandType = mCommandType;
    this.mBlockIds = mBlockIds;
    this.mFilePath = mFilePath;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineageCommand(LineageCommand other) {
    if (other.isSetMCommandType()) {
      this.mCommandType = other.mCommandType;
    }
    if (other.isSetMBlockIds()) {
      List<Long> __this__mBlockIds = new ArrayList<Long>(other.mBlockIds);
      this.mBlockIds = __this__mBlockIds;
    }
    if (other.isSetMFilePath()) {
      this.mFilePath = other.mFilePath;
    }
  }

  public LineageCommand deepCopy() {
    return new LineageCommand(this);
  }

  @Override
  public void clear() {
    this.mCommandType = null;
    this.mBlockIds = null;
    this.mFilePath = null;
  }

  /**
   * 
   * @see CommandType
   */
  public CommandType getMCommandType() {
    return this.mCommandType;
  }

  /**
   * 
   * @see CommandType
   */
  public LineageCommand setMCommandType(CommandType mCommandType) {
    this.mCommandType = mCommandType;
    return this;
  }

  public void unsetMCommandType() {
    this.mCommandType = null;
  }

  /** Returns true if field mCommandType is set (has been assigned a value) and false otherwise */
  public boolean isSetMCommandType() {
    return this.mCommandType != null;
  }

  public void setMCommandTypeIsSet(boolean value) {
    if (!value) {
      this.mCommandType = null;
    }
  }

  public int getMBlockIdsSize() {
    return (this.mBlockIds == null) ? 0 : this.mBlockIds.size();
  }

  public java.util.Iterator<Long> getMBlockIdsIterator() {
    return (this.mBlockIds == null) ? null : this.mBlockIds.iterator();
  }

  public void addToMBlockIds(long elem) {
    if (this.mBlockIds == null) {
      this.mBlockIds = new ArrayList<Long>();
    }
    this.mBlockIds.add(elem);
  }

  public List<Long> getMBlockIds() {
    return this.mBlockIds;
  }

  public LineageCommand setMBlockIds(List<Long> mBlockIds) {
    this.mBlockIds = mBlockIds;
    return this;
  }

  public void unsetMBlockIds() {
    this.mBlockIds = null;
  }

  /** Returns true if field mBlockIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMBlockIds() {
    return this.mBlockIds != null;
  }

  public void setMBlockIdsIsSet(boolean value) {
    if (!value) {
      this.mBlockIds = null;
    }
  }

  public String getMFilePath() {
    return this.mFilePath;
  }

  public LineageCommand setMFilePath(String mFilePath) {
    this.mFilePath = mFilePath;
    return this;
  }

  public void unsetMFilePath() {
    this.mFilePath = null;
  }

  /** Returns true if field mFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetMFilePath() {
    return this.mFilePath != null;
  }

  public void setMFilePathIsSet(boolean value) {
    if (!value) {
      this.mFilePath = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_COMMAND_TYPE:
      if (value == null) {
        unsetMCommandType();
      } else {
        setMCommandType((CommandType)value);
      }
      break;

    case M_BLOCK_IDS:
      if (value == null) {
        unsetMBlockIds();
      } else {
        setMBlockIds((List<Long>)value);
      }
      break;

    case M_FILE_PATH:
      if (value == null) {
        unsetMFilePath();
      } else {
        setMFilePath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_COMMAND_TYPE:
      return getMCommandType();

    case M_BLOCK_IDS:
      return getMBlockIds();

    case M_FILE_PATH:
      return getMFilePath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_COMMAND_TYPE:
      return isSetMCommandType();
    case M_BLOCK_IDS:
      return isSetMBlockIds();
    case M_FILE_PATH:
      return isSetMFilePath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LineageCommand)
      return this.equals((LineageCommand)that);
    return false;
  }

  public boolean equals(LineageCommand that) {
    if (that == null)
      return false;

    boolean this_present_mCommandType = true && this.isSetMCommandType();
    boolean that_present_mCommandType = true && that.isSetMCommandType();
    if (this_present_mCommandType || that_present_mCommandType) {
      if (!(this_present_mCommandType && that_present_mCommandType))
        return false;
      if (!this.mCommandType.equals(that.mCommandType))
        return false;
    }

    boolean this_present_mBlockIds = true && this.isSetMBlockIds();
    boolean that_present_mBlockIds = true && that.isSetMBlockIds();
    if (this_present_mBlockIds || that_present_mBlockIds) {
      if (!(this_present_mBlockIds && that_present_mBlockIds))
        return false;
      if (!this.mBlockIds.equals(that.mBlockIds))
        return false;
    }

    boolean this_present_mFilePath = true && this.isSetMFilePath();
    boolean that_present_mFilePath = true && that.isSetMFilePath();
    if (this_present_mFilePath || that_present_mFilePath) {
      if (!(this_present_mFilePath && that_present_mFilePath))
        return false;
      if (!this.mFilePath.equals(that.mFilePath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mCommandType = true && (isSetMCommandType());
    list.add(present_mCommandType);
    if (present_mCommandType)
      list.add(mCommandType.getValue());

    boolean present_mBlockIds = true && (isSetMBlockIds());
    list.add(present_mBlockIds);
    if (present_mBlockIds)
      list.add(mBlockIds);

    boolean present_mFilePath = true && (isSetMFilePath());
    list.add(present_mFilePath);
    if (present_mFilePath)
      list.add(mFilePath);

    return list.hashCode();
  }

  @Override
  public int compareTo(LineageCommand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMCommandType()).compareTo(other.isSetMCommandType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMCommandType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mCommandType, other.mCommandType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMBlockIds()).compareTo(other.isSetMBlockIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMBlockIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mBlockIds, other.mBlockIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMFilePath()).compareTo(other.isSetMFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mFilePath, other.mFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LineageCommand(");
    boolean first = true;

    sb.append("mCommandType:");
    if (this.mCommandType == null) {
      sb.append("null");
    } else {
      sb.append(this.mCommandType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mBlockIds:");
    if (this.mBlockIds == null) {
      sb.append("null");
    } else {
      sb.append(this.mBlockIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mFilePath:");
    if (this.mFilePath == null) {
      sb.append("null");
    } else {
      sb.append(this.mFilePath);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LineageCommandStandardSchemeFactory implements SchemeFactory {
    public LineageCommandStandardScheme getScheme() {
      return new LineageCommandStandardScheme();
    }
  }

  private static class LineageCommandStandardScheme extends StandardScheme<LineageCommand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LineageCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_COMMAND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mCommandType = tachyon.thrift.CommandType.findByValue(iprot.readI32());
              struct.setMCommandTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_BLOCK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.mBlockIds = new ArrayList<Long>(_list56.size);
                long _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = iprot.readI64();
                  struct.mBlockIds.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setMBlockIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mFilePath = iprot.readString();
              struct.setMFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LineageCommand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mCommandType != null) {
        oprot.writeFieldBegin(M_COMMAND_TYPE_FIELD_DESC);
        oprot.writeI32(struct.mCommandType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.mBlockIds != null) {
        oprot.writeFieldBegin(M_BLOCK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.mBlockIds.size()));
          for (long _iter59 : struct.mBlockIds)
          {
            oprot.writeI64(_iter59);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mFilePath != null) {
        oprot.writeFieldBegin(M_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.mFilePath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LineageCommandTupleSchemeFactory implements SchemeFactory {
    public LineageCommandTupleScheme getScheme() {
      return new LineageCommandTupleScheme();
    }
  }

  private static class LineageCommandTupleScheme extends TupleScheme<LineageCommand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LineageCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMCommandType()) {
        optionals.set(0);
      }
      if (struct.isSetMBlockIds()) {
        optionals.set(1);
      }
      if (struct.isSetMFilePath()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMCommandType()) {
        oprot.writeI32(struct.mCommandType.getValue());
      }
      if (struct.isSetMBlockIds()) {
        {
          oprot.writeI32(struct.mBlockIds.size());
          for (long _iter60 : struct.mBlockIds)
          {
            oprot.writeI64(_iter60);
          }
        }
      }
      if (struct.isSetMFilePath()) {
        oprot.writeString(struct.mFilePath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LineageCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.mCommandType = tachyon.thrift.CommandType.findByValue(iprot.readI32());
        struct.setMCommandTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mBlockIds = new ArrayList<Long>(_list61.size);
          long _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readI64();
            struct.mBlockIds.add(_elem62);
          }
        }
        struct.setMBlockIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mFilePath = iprot.readString();
        struct.setMFilePathIsSet(true);
      }
    }
  }

}

