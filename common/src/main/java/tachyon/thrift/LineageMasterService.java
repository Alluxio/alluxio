/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-25")
public class LineageMasterService {

  public interface Iface {

    public long createLineage(List<String> inputFiles, List<String> outputFiles, CommandLineJobInfo job) throws FileAlreadyExistException, BlockInfoException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException;

    public boolean deleteLineage(long lineageId, boolean cascade) throws LineageDoesNotExistException, LineageDeletionException, org.apache.thrift.TException;

    public List<LineageInfo> listLineages() throws org.apache.thrift.TException;

    public long recreateFile(String path, long blockSizeBytes, long ttl) throws InvalidPathException, LineageDoesNotExistException, org.apache.thrift.TException;

    public void asyncCompleteFile(long fileId, String filePath) throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException;

    public LineageCommand workerLineageHeartbeat(long workerId, List<Long> persistedFiles) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createLineage(List<String> inputFiles, List<String> outputFiles, CommandLineJobInfo job, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLineage(long lineageId, boolean cascade, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listLineages(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void recreateFile(String path, long blockSizeBytes, long ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void asyncCompleteFile(long fileId, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void workerLineageHeartbeat(long workerId, List<Long> persistedFiles, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long createLineage(List<String> inputFiles, List<String> outputFiles, CommandLineJobInfo job) throws FileAlreadyExistException, BlockInfoException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException
    {
      send_createLineage(inputFiles, outputFiles, job);
      return recv_createLineage();
    }

    public void send_createLineage(List<String> inputFiles, List<String> outputFiles, CommandLineJobInfo job) throws org.apache.thrift.TException
    {
      createLineage_args args = new createLineage_args();
      args.setInputFiles(inputFiles);
      args.setOutputFiles(outputFiles);
      args.setJob(job);
      sendBase("createLineage", args);
    }

    public long recv_createLineage() throws FileAlreadyExistException, BlockInfoException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException
    {
      createLineage_result result = new createLineage_result();
      receiveBase(result, "createLineage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.faee != null) {
        throw result.faee;
      }
      if (result.bie != null) {
        throw result.bie;
      }
      if (result.sfse != null) {
        throw result.sfse;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createLineage failed: unknown result");
    }

    public boolean deleteLineage(long lineageId, boolean cascade) throws LineageDoesNotExistException, LineageDeletionException, org.apache.thrift.TException
    {
      send_deleteLineage(lineageId, cascade);
      return recv_deleteLineage();
    }

    public void send_deleteLineage(long lineageId, boolean cascade) throws org.apache.thrift.TException
    {
      deleteLineage_args args = new deleteLineage_args();
      args.setLineageId(lineageId);
      args.setCascade(cascade);
      sendBase("deleteLineage", args);
    }

    public boolean recv_deleteLineage() throws LineageDoesNotExistException, LineageDeletionException, org.apache.thrift.TException
    {
      deleteLineage_result result = new deleteLineage_result();
      receiveBase(result, "deleteLineage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.lnee != null) {
        throw result.lnee;
      }
      if (result.lde != null) {
        throw result.lde;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLineage failed: unknown result");
    }

    public List<LineageInfo> listLineages() throws org.apache.thrift.TException
    {
      send_listLineages();
      return recv_listLineages();
    }

    public void send_listLineages() throws org.apache.thrift.TException
    {
      listLineages_args args = new listLineages_args();
      sendBase("listLineages", args);
    }

    public List<LineageInfo> recv_listLineages() throws org.apache.thrift.TException
    {
      listLineages_result result = new listLineages_result();
      receiveBase(result, "listLineages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listLineages failed: unknown result");
    }

    public long recreateFile(String path, long blockSizeBytes, long ttl) throws InvalidPathException, LineageDoesNotExistException, org.apache.thrift.TException
    {
      send_recreateFile(path, blockSizeBytes, ttl);
      return recv_recreateFile();
    }

    public void send_recreateFile(String path, long blockSizeBytes, long ttl) throws org.apache.thrift.TException
    {
      recreateFile_args args = new recreateFile_args();
      args.setPath(path);
      args.setBlockSizeBytes(blockSizeBytes);
      args.setTtl(ttl);
      sendBase("recreateFile", args);
    }

    public long recv_recreateFile() throws InvalidPathException, LineageDoesNotExistException, org.apache.thrift.TException
    {
      recreateFile_result result = new recreateFile_result();
      receiveBase(result, "recreateFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ipe != null) {
        throw result.ipe;
      }
      if (result.ldee != null) {
        throw result.ldee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recreateFile failed: unknown result");
    }

    public void asyncCompleteFile(long fileId, String filePath) throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException
    {
      send_asyncCompleteFile(fileId, filePath);
      recv_asyncCompleteFile();
    }

    public void send_asyncCompleteFile(long fileId, String filePath) throws org.apache.thrift.TException
    {
      asyncCompleteFile_args args = new asyncCompleteFile_args();
      args.setFileId(fileId);
      args.setFilePath(filePath);
      sendBase("asyncCompleteFile", args);
    }

    public void recv_asyncCompleteFile() throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException
    {
      asyncCompleteFile_result result = new asyncCompleteFile_result();
      receiveBase(result, "asyncCompleteFile");
      if (result.fdnee != null) {
        throw result.fdnee;
      }
      if (result.bie != null) {
        throw result.bie;
      }
      return;
    }

    public LineageCommand workerLineageHeartbeat(long workerId, List<Long> persistedFiles) throws org.apache.thrift.TException
    {
      send_workerLineageHeartbeat(workerId, persistedFiles);
      return recv_workerLineageHeartbeat();
    }

    public void send_workerLineageHeartbeat(long workerId, List<Long> persistedFiles) throws org.apache.thrift.TException
    {
      workerLineageHeartbeat_args args = new workerLineageHeartbeat_args();
      args.setWorkerId(workerId);
      args.setPersistedFiles(persistedFiles);
      sendBase("workerLineageHeartbeat", args);
    }

    public LineageCommand recv_workerLineageHeartbeat() throws org.apache.thrift.TException
    {
      workerLineageHeartbeat_result result = new workerLineageHeartbeat_result();
      receiveBase(result, "workerLineageHeartbeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "workerLineageHeartbeat failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createLineage(List<String> inputFiles, List<String> outputFiles, CommandLineJobInfo job, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createLineage_call method_call = new createLineage_call(inputFiles, outputFiles, job, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createLineage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> inputFiles;
      private List<String> outputFiles;
      private CommandLineJobInfo job;
      public createLineage_call(List<String> inputFiles, List<String> outputFiles, CommandLineJobInfo job, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputFiles = inputFiles;
        this.outputFiles = outputFiles;
        this.job = job;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createLineage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createLineage_args args = new createLineage_args();
        args.setInputFiles(inputFiles);
        args.setOutputFiles(outputFiles);
        args.setJob(job);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws FileAlreadyExistException, BlockInfoException, SuspectedFileSizeException, TachyonException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createLineage();
      }
    }

    public void deleteLineage(long lineageId, boolean cascade, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLineage_call method_call = new deleteLineage_call(lineageId, cascade, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLineage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long lineageId;
      private boolean cascade;
      public deleteLineage_call(long lineageId, boolean cascade, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lineageId = lineageId;
        this.cascade = cascade;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLineage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLineage_args args = new deleteLineage_args();
        args.setLineageId(lineageId);
        args.setCascade(cascade);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws LineageDoesNotExistException, LineageDeletionException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLineage();
      }
    }

    public void listLineages(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listLineages_call method_call = new listLineages_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listLineages_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listLineages_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listLineages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listLineages_args args = new listLineages_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LineageInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listLineages();
      }
    }

    public void recreateFile(String path, long blockSizeBytes, long ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recreateFile_call method_call = new recreateFile_call(path, blockSizeBytes, ttl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recreateFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      private long blockSizeBytes;
      private long ttl;
      public recreateFile_call(String path, long blockSizeBytes, long ttl, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
        this.blockSizeBytes = blockSizeBytes;
        this.ttl = ttl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recreateFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recreateFile_args args = new recreateFile_args();
        args.setPath(path);
        args.setBlockSizeBytes(blockSizeBytes);
        args.setTtl(ttl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws InvalidPathException, LineageDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recreateFile();
      }
    }

    public void asyncCompleteFile(long fileId, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      asyncCompleteFile_call method_call = new asyncCompleteFile_call(fileId, filePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class asyncCompleteFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private String filePath;
      public asyncCompleteFile_call(long fileId, String filePath, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.filePath = filePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("asyncCompleteFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        asyncCompleteFile_args args = new asyncCompleteFile_args();
        args.setFileId(fileId);
        args.setFilePath(filePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FileDoesNotExistException, BlockInfoException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_asyncCompleteFile();
      }
    }

    public void workerLineageHeartbeat(long workerId, List<Long> persistedFiles, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      workerLineageHeartbeat_call method_call = new workerLineageHeartbeat_call(workerId, persistedFiles, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class workerLineageHeartbeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long workerId;
      private List<Long> persistedFiles;
      public workerLineageHeartbeat_call(long workerId, List<Long> persistedFiles, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerId = workerId;
        this.persistedFiles = persistedFiles;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("workerLineageHeartbeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        workerLineageHeartbeat_args args = new workerLineageHeartbeat_args();
        args.setWorkerId(workerId);
        args.setPersistedFiles(persistedFiles);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LineageCommand getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_workerLineageHeartbeat();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createLineage", new createLineage());
      processMap.put("deleteLineage", new deleteLineage());
      processMap.put("listLineages", new listLineages());
      processMap.put("recreateFile", new recreateFile());
      processMap.put("asyncCompleteFile", new asyncCompleteFile());
      processMap.put("workerLineageHeartbeat", new workerLineageHeartbeat());
      return processMap;
    }

    public static class createLineage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createLineage_args> {
      public createLineage() {
        super("createLineage");
      }

      public createLineage_args getEmptyArgsInstance() {
        return new createLineage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createLineage_result getResult(I iface, createLineage_args args) throws org.apache.thrift.TException {
        createLineage_result result = new createLineage_result();
        try {
          result.success = iface.createLineage(args.inputFiles, args.outputFiles, args.job);
          result.setSuccessIsSet(true);
        } catch (FileAlreadyExistException faee) {
          result.faee = faee;
        } catch (BlockInfoException bie) {
          result.bie = bie;
        } catch (SuspectedFileSizeException sfse) {
          result.sfse = sfse;
        } catch (TachyonException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class deleteLineage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLineage_args> {
      public deleteLineage() {
        super("deleteLineage");
      }

      public deleteLineage_args getEmptyArgsInstance() {
        return new deleteLineage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLineage_result getResult(I iface, deleteLineage_args args) throws org.apache.thrift.TException {
        deleteLineage_result result = new deleteLineage_result();
        try {
          result.success = iface.deleteLineage(args.lineageId, args.cascade);
          result.setSuccessIsSet(true);
        } catch (LineageDoesNotExistException lnee) {
          result.lnee = lnee;
        } catch (LineageDeletionException lde) {
          result.lde = lde;
        }
        return result;
      }
    }

    public static class listLineages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listLineages_args> {
      public listLineages() {
        super("listLineages");
      }

      public listLineages_args getEmptyArgsInstance() {
        return new listLineages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listLineages_result getResult(I iface, listLineages_args args) throws org.apache.thrift.TException {
        listLineages_result result = new listLineages_result();
        result.success = iface.listLineages();
        return result;
      }
    }

    public static class recreateFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recreateFile_args> {
      public recreateFile() {
        super("recreateFile");
      }

      public recreateFile_args getEmptyArgsInstance() {
        return new recreateFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recreateFile_result getResult(I iface, recreateFile_args args) throws org.apache.thrift.TException {
        recreateFile_result result = new recreateFile_result();
        try {
          result.success = iface.recreateFile(args.path, args.blockSizeBytes, args.ttl);
          result.setSuccessIsSet(true);
        } catch (InvalidPathException ipe) {
          result.ipe = ipe;
        } catch (LineageDoesNotExistException ldee) {
          result.ldee = ldee;
        }
        return result;
      }
    }

    public static class asyncCompleteFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, asyncCompleteFile_args> {
      public asyncCompleteFile() {
        super("asyncCompleteFile");
      }

      public asyncCompleteFile_args getEmptyArgsInstance() {
        return new asyncCompleteFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public asyncCompleteFile_result getResult(I iface, asyncCompleteFile_args args) throws org.apache.thrift.TException {
        asyncCompleteFile_result result = new asyncCompleteFile_result();
        try {
          iface.asyncCompleteFile(args.fileId, args.filePath);
        } catch (FileDoesNotExistException fdnee) {
          result.fdnee = fdnee;
        } catch (BlockInfoException bie) {
          result.bie = bie;
        }
        return result;
      }
    }

    public static class workerLineageHeartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, workerLineageHeartbeat_args> {
      public workerLineageHeartbeat() {
        super("workerLineageHeartbeat");
      }

      public workerLineageHeartbeat_args getEmptyArgsInstance() {
        return new workerLineageHeartbeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public workerLineageHeartbeat_result getResult(I iface, workerLineageHeartbeat_args args) throws org.apache.thrift.TException {
        workerLineageHeartbeat_result result = new workerLineageHeartbeat_result();
        result.success = iface.workerLineageHeartbeat(args.workerId, args.persistedFiles);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createLineage", new createLineage());
      processMap.put("deleteLineage", new deleteLineage());
      processMap.put("listLineages", new listLineages());
      processMap.put("recreateFile", new recreateFile());
      processMap.put("asyncCompleteFile", new asyncCompleteFile());
      processMap.put("workerLineageHeartbeat", new workerLineageHeartbeat());
      return processMap;
    }

    public static class createLineage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createLineage_args, Long> {
      public createLineage() {
        super("createLineage");
      }

      public createLineage_args getEmptyArgsInstance() {
        return new createLineage_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            createLineage_result result = new createLineage_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createLineage_result result = new createLineage_result();
            if (e instanceof FileAlreadyExistException) {
                        result.faee = (FileAlreadyExistException) e;
                        result.setFaeeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockInfoException) {
                        result.bie = (BlockInfoException) e;
                        result.setBieIsSet(true);
                        msg = result;
            }
            else             if (e instanceof SuspectedFileSizeException) {
                        result.sfse = (SuspectedFileSizeException) e;
                        result.setSfseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TachyonException) {
                        result.te = (TachyonException) e;
                        result.setTeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createLineage_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.createLineage(args.inputFiles, args.outputFiles, args.job,resultHandler);
      }
    }

    public static class deleteLineage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLineage_args, Boolean> {
      public deleteLineage() {
        super("deleteLineage");
      }

      public deleteLineage_args getEmptyArgsInstance() {
        return new deleteLineage_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteLineage_result result = new deleteLineage_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLineage_result result = new deleteLineage_result();
            if (e instanceof LineageDoesNotExistException) {
                        result.lnee = (LineageDoesNotExistException) e;
                        result.setLneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof LineageDeletionException) {
                        result.lde = (LineageDeletionException) e;
                        result.setLdeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLineage_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteLineage(args.lineageId, args.cascade,resultHandler);
      }
    }

    public static class listLineages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listLineages_args, List<LineageInfo>> {
      public listLineages() {
        super("listLineages");
      }

      public listLineages_args getEmptyArgsInstance() {
        return new listLineages_args();
      }

      public AsyncMethodCallback<List<LineageInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LineageInfo>>() { 
          public void onComplete(List<LineageInfo> o) {
            listLineages_result result = new listLineages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listLineages_result result = new listLineages_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listLineages_args args, org.apache.thrift.async.AsyncMethodCallback<List<LineageInfo>> resultHandler) throws TException {
        iface.listLineages(resultHandler);
      }
    }

    public static class recreateFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recreateFile_args, Long> {
      public recreateFile() {
        super("recreateFile");
      }

      public recreateFile_args getEmptyArgsInstance() {
        return new recreateFile_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            recreateFile_result result = new recreateFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            recreateFile_result result = new recreateFile_result();
            if (e instanceof InvalidPathException) {
                        result.ipe = (InvalidPathException) e;
                        result.setIpeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof LineageDoesNotExistException) {
                        result.ldee = (LineageDoesNotExistException) e;
                        result.setLdeeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recreateFile_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.recreateFile(args.path, args.blockSizeBytes, args.ttl,resultHandler);
      }
    }

    public static class asyncCompleteFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, asyncCompleteFile_args, Void> {
      public asyncCompleteFile() {
        super("asyncCompleteFile");
      }

      public asyncCompleteFile_args getEmptyArgsInstance() {
        return new asyncCompleteFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            asyncCompleteFile_result result = new asyncCompleteFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            asyncCompleteFile_result result = new asyncCompleteFile_result();
            if (e instanceof FileDoesNotExistException) {
                        result.fdnee = (FileDoesNotExistException) e;
                        result.setFdneeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockInfoException) {
                        result.bie = (BlockInfoException) e;
                        result.setBieIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, asyncCompleteFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.asyncCompleteFile(args.fileId, args.filePath,resultHandler);
      }
    }

    public static class workerLineageHeartbeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, workerLineageHeartbeat_args, LineageCommand> {
      public workerLineageHeartbeat() {
        super("workerLineageHeartbeat");
      }

      public workerLineageHeartbeat_args getEmptyArgsInstance() {
        return new workerLineageHeartbeat_args();
      }

      public AsyncMethodCallback<LineageCommand> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LineageCommand>() { 
          public void onComplete(LineageCommand o) {
            workerLineageHeartbeat_result result = new workerLineageHeartbeat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            workerLineageHeartbeat_result result = new workerLineageHeartbeat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, workerLineageHeartbeat_args args, org.apache.thrift.async.AsyncMethodCallback<LineageCommand> resultHandler) throws TException {
        iface.workerLineageHeartbeat(args.workerId, args.persistedFiles,resultHandler);
      }
    }

  }

  public static class createLineage_args implements org.apache.thrift.TBase<createLineage_args, createLineage_args._Fields>, java.io.Serializable, Cloneable, Comparable<createLineage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLineage_args");

    private static final org.apache.thrift.protocol.TField INPUT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("inputFiles", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFiles", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLineage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLineage_argsTupleSchemeFactory());
    }

    public List<String> inputFiles; // required
    public List<String> outputFiles; // required
    public CommandLineJobInfo job; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_FILES((short)1, "inputFiles"),
      OUTPUT_FILES((short)2, "outputFiles"),
      JOB((short)3, "job");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_FILES
            return INPUT_FILES;
          case 2: // OUTPUT_FILES
            return OUTPUT_FILES;
          case 3: // JOB
            return JOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_FILES, new org.apache.thrift.meta_data.FieldMetaData("inputFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUTPUT_FILES, new org.apache.thrift.meta_data.FieldMetaData("outputFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommandLineJobInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLineage_args.class, metaDataMap);
    }

    public createLineage_args() {
    }

    public createLineage_args(
      List<String> inputFiles,
      List<String> outputFiles,
      CommandLineJobInfo job)
    {
      this();
      this.inputFiles = inputFiles;
      this.outputFiles = outputFiles;
      this.job = job;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLineage_args(createLineage_args other) {
      if (other.isSetInputFiles()) {
        List<String> __this__inputFiles = new ArrayList<String>(other.inputFiles);
        this.inputFiles = __this__inputFiles;
      }
      if (other.isSetOutputFiles()) {
        List<String> __this__outputFiles = new ArrayList<String>(other.outputFiles);
        this.outputFiles = __this__outputFiles;
      }
      if (other.isSetJob()) {
        this.job = new CommandLineJobInfo(other.job);
      }
    }

    public createLineage_args deepCopy() {
      return new createLineage_args(this);
    }

    @Override
    public void clear() {
      this.inputFiles = null;
      this.outputFiles = null;
      this.job = null;
    }

    public int getInputFilesSize() {
      return (this.inputFiles == null) ? 0 : this.inputFiles.size();
    }

    public java.util.Iterator<String> getInputFilesIterator() {
      return (this.inputFiles == null) ? null : this.inputFiles.iterator();
    }

    public void addToInputFiles(String elem) {
      if (this.inputFiles == null) {
        this.inputFiles = new ArrayList<String>();
      }
      this.inputFiles.add(elem);
    }

    public List<String> getInputFiles() {
      return this.inputFiles;
    }

    public createLineage_args setInputFiles(List<String> inputFiles) {
      this.inputFiles = inputFiles;
      return this;
    }

    public void unsetInputFiles() {
      this.inputFiles = null;
    }

    /** Returns true if field inputFiles is set (has been assigned a value) and false otherwise */
    public boolean isSetInputFiles() {
      return this.inputFiles != null;
    }

    public void setInputFilesIsSet(boolean value) {
      if (!value) {
        this.inputFiles = null;
      }
    }

    public int getOutputFilesSize() {
      return (this.outputFiles == null) ? 0 : this.outputFiles.size();
    }

    public java.util.Iterator<String> getOutputFilesIterator() {
      return (this.outputFiles == null) ? null : this.outputFiles.iterator();
    }

    public void addToOutputFiles(String elem) {
      if (this.outputFiles == null) {
        this.outputFiles = new ArrayList<String>();
      }
      this.outputFiles.add(elem);
    }

    public List<String> getOutputFiles() {
      return this.outputFiles;
    }

    public createLineage_args setOutputFiles(List<String> outputFiles) {
      this.outputFiles = outputFiles;
      return this;
    }

    public void unsetOutputFiles() {
      this.outputFiles = null;
    }

    /** Returns true if field outputFiles is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputFiles() {
      return this.outputFiles != null;
    }

    public void setOutputFilesIsSet(boolean value) {
      if (!value) {
        this.outputFiles = null;
      }
    }

    public CommandLineJobInfo getJob() {
      return this.job;
    }

    public createLineage_args setJob(CommandLineJobInfo job) {
      this.job = job;
      return this;
    }

    public void unsetJob() {
      this.job = null;
    }

    /** Returns true if field job is set (has been assigned a value) and false otherwise */
    public boolean isSetJob() {
      return this.job != null;
    }

    public void setJobIsSet(boolean value) {
      if (!value) {
        this.job = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_FILES:
        if (value == null) {
          unsetInputFiles();
        } else {
          setInputFiles((List<String>)value);
        }
        break;

      case OUTPUT_FILES:
        if (value == null) {
          unsetOutputFiles();
        } else {
          setOutputFiles((List<String>)value);
        }
        break;

      case JOB:
        if (value == null) {
          unsetJob();
        } else {
          setJob((CommandLineJobInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_FILES:
        return getInputFiles();

      case OUTPUT_FILES:
        return getOutputFiles();

      case JOB:
        return getJob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_FILES:
        return isSetInputFiles();
      case OUTPUT_FILES:
        return isSetOutputFiles();
      case JOB:
        return isSetJob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLineage_args)
        return this.equals((createLineage_args)that);
      return false;
    }

    public boolean equals(createLineage_args that) {
      if (that == null)
        return false;

      boolean this_present_inputFiles = true && this.isSetInputFiles();
      boolean that_present_inputFiles = true && that.isSetInputFiles();
      if (this_present_inputFiles || that_present_inputFiles) {
        if (!(this_present_inputFiles && that_present_inputFiles))
          return false;
        if (!this.inputFiles.equals(that.inputFiles))
          return false;
      }

      boolean this_present_outputFiles = true && this.isSetOutputFiles();
      boolean that_present_outputFiles = true && that.isSetOutputFiles();
      if (this_present_outputFiles || that_present_outputFiles) {
        if (!(this_present_outputFiles && that_present_outputFiles))
          return false;
        if (!this.outputFiles.equals(that.outputFiles))
          return false;
      }

      boolean this_present_job = true && this.isSetJob();
      boolean that_present_job = true && that.isSetJob();
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputFiles = true && (isSetInputFiles());
      list.add(present_inputFiles);
      if (present_inputFiles)
        list.add(inputFiles);

      boolean present_outputFiles = true && (isSetOutputFiles());
      list.add(present_outputFiles);
      if (present_outputFiles)
        list.add(outputFiles);

      boolean present_job = true && (isSetJob());
      list.add(present_job);
      if (present_job)
        list.add(job);

      return list.hashCode();
    }

    @Override
    public int compareTo(createLineage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputFiles()).compareTo(other.isSetInputFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputFiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputFiles, other.inputFiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputFiles()).compareTo(other.isSetOutputFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputFiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFiles, other.outputFiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLineage_args(");
      boolean first = true;

      sb.append("inputFiles:");
      if (this.inputFiles == null) {
        sb.append("null");
      } else {
        sb.append(this.inputFiles);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputFiles:");
      if (this.outputFiles == null) {
        sb.append("null");
      } else {
        sb.append(this.outputFiles);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (job != null) {
        job.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLineage_argsStandardSchemeFactory implements SchemeFactory {
      public createLineage_argsStandardScheme getScheme() {
        return new createLineage_argsStandardScheme();
      }
    }

    private static class createLineage_argsStandardScheme extends StandardScheme<createLineage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLineage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list236 = iprot.readListBegin();
                  struct.inputFiles = new ArrayList<String>(_list236.size);
                  String _elem237;
                  for (int _i238 = 0; _i238 < _list236.size; ++_i238)
                  {
                    _elem237 = iprot.readString();
                    struct.inputFiles.add(_elem237);
                  }
                  iprot.readListEnd();
                }
                struct.setInputFilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUT_FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list239 = iprot.readListBegin();
                  struct.outputFiles = new ArrayList<String>(_list239.size);
                  String _elem240;
                  for (int _i241 = 0; _i241 < _list239.size; ++_i241)
                  {
                    _elem240 = iprot.readString();
                    struct.outputFiles.add(_elem240);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputFilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.job = new CommandLineJobInfo();
                struct.job.read(iprot);
                struct.setJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLineage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputFiles != null) {
          oprot.writeFieldBegin(INPUT_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.inputFiles.size()));
            for (String _iter242 : struct.inputFiles)
            {
              oprot.writeString(_iter242);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.outputFiles != null) {
          oprot.writeFieldBegin(OUTPUT_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputFiles.size()));
            for (String _iter243 : struct.outputFiles)
            {
              oprot.writeString(_iter243);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.job != null) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          struct.job.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLineage_argsTupleSchemeFactory implements SchemeFactory {
      public createLineage_argsTupleScheme getScheme() {
        return new createLineage_argsTupleScheme();
      }
    }

    private static class createLineage_argsTupleScheme extends TupleScheme<createLineage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLineage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputFiles()) {
          optionals.set(0);
        }
        if (struct.isSetOutputFiles()) {
          optionals.set(1);
        }
        if (struct.isSetJob()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInputFiles()) {
          {
            oprot.writeI32(struct.inputFiles.size());
            for (String _iter244 : struct.inputFiles)
            {
              oprot.writeString(_iter244);
            }
          }
        }
        if (struct.isSetOutputFiles()) {
          {
            oprot.writeI32(struct.outputFiles.size());
            for (String _iter245 : struct.outputFiles)
            {
              oprot.writeString(_iter245);
            }
          }
        }
        if (struct.isSetJob()) {
          struct.job.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLineage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list246 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.inputFiles = new ArrayList<String>(_list246.size);
            String _elem247;
            for (int _i248 = 0; _i248 < _list246.size; ++_i248)
            {
              _elem247 = iprot.readString();
              struct.inputFiles.add(_elem247);
            }
          }
          struct.setInputFilesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list249 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outputFiles = new ArrayList<String>(_list249.size);
            String _elem250;
            for (int _i251 = 0; _i251 < _list249.size; ++_i251)
            {
              _elem250 = iprot.readString();
              struct.outputFiles.add(_elem250);
            }
          }
          struct.setOutputFilesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.job = new CommandLineJobInfo();
          struct.job.read(iprot);
          struct.setJobIsSet(true);
        }
      }
    }

  }

  public static class createLineage_result implements org.apache.thrift.TBase<createLineage_result, createLineage_result._Fields>, java.io.Serializable, Cloneable, Comparable<createLineage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLineage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField FAEE_FIELD_DESC = new org.apache.thrift.protocol.TField("faee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIE_FIELD_DESC = new org.apache.thrift.protocol.TField("bie", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SFSE_FIELD_DESC = new org.apache.thrift.protocol.TField("sfse", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLineage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLineage_resultTupleSchemeFactory());
    }

    public long success; // required
    public FileAlreadyExistException faee; // required
    public BlockInfoException bie; // required
    public SuspectedFileSizeException sfse; // required
    public TachyonException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAEE((short)1, "faee"),
      BIE((short)2, "bie"),
      SFSE((short)3, "sfse"),
      TE((short)4, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAEE
            return FAEE;
          case 2: // BIE
            return BIE;
          case 3: // SFSE
            return SFSE;
          case 4: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FAEE, new org.apache.thrift.meta_data.FieldMetaData("faee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BIE, new org.apache.thrift.meta_data.FieldMetaData("bie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SFSE, new org.apache.thrift.meta_data.FieldMetaData("sfse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLineage_result.class, metaDataMap);
    }

    public createLineage_result() {
    }

    public createLineage_result(
      long success,
      FileAlreadyExistException faee,
      BlockInfoException bie,
      SuspectedFileSizeException sfse,
      TachyonException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.faee = faee;
      this.bie = bie;
      this.sfse = sfse;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLineage_result(createLineage_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetFaee()) {
        this.faee = new FileAlreadyExistException(other.faee);
      }
      if (other.isSetBie()) {
        this.bie = new BlockInfoException(other.bie);
      }
      if (other.isSetSfse()) {
        this.sfse = new SuspectedFileSizeException(other.sfse);
      }
      if (other.isSetTe()) {
        this.te = new TachyonException(other.te);
      }
    }

    public createLineage_result deepCopy() {
      return new createLineage_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.faee = null;
      this.bie = null;
      this.sfse = null;
      this.te = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public createLineage_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public FileAlreadyExistException getFaee() {
      return this.faee;
    }

    public createLineage_result setFaee(FileAlreadyExistException faee) {
      this.faee = faee;
      return this;
    }

    public void unsetFaee() {
      this.faee = null;
    }

    /** Returns true if field faee is set (has been assigned a value) and false otherwise */
    public boolean isSetFaee() {
      return this.faee != null;
    }

    public void setFaeeIsSet(boolean value) {
      if (!value) {
        this.faee = null;
      }
    }

    public BlockInfoException getBie() {
      return this.bie;
    }

    public createLineage_result setBie(BlockInfoException bie) {
      this.bie = bie;
      return this;
    }

    public void unsetBie() {
      this.bie = null;
    }

    /** Returns true if field bie is set (has been assigned a value) and false otherwise */
    public boolean isSetBie() {
      return this.bie != null;
    }

    public void setBieIsSet(boolean value) {
      if (!value) {
        this.bie = null;
      }
    }

    public SuspectedFileSizeException getSfse() {
      return this.sfse;
    }

    public createLineage_result setSfse(SuspectedFileSizeException sfse) {
      this.sfse = sfse;
      return this;
    }

    public void unsetSfse() {
      this.sfse = null;
    }

    /** Returns true if field sfse is set (has been assigned a value) and false otherwise */
    public boolean isSetSfse() {
      return this.sfse != null;
    }

    public void setSfseIsSet(boolean value) {
      if (!value) {
        this.sfse = null;
      }
    }

    public TachyonException getTe() {
      return this.te;
    }

    public createLineage_result setTe(TachyonException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case FAEE:
        if (value == null) {
          unsetFaee();
        } else {
          setFaee((FileAlreadyExistException)value);
        }
        break;

      case BIE:
        if (value == null) {
          unsetBie();
        } else {
          setBie((BlockInfoException)value);
        }
        break;

      case SFSE:
        if (value == null) {
          unsetSfse();
        } else {
          setSfse((SuspectedFileSizeException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TachyonException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case FAEE:
        return getFaee();

      case BIE:
        return getBie();

      case SFSE:
        return getSfse();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAEE:
        return isSetFaee();
      case BIE:
        return isSetBie();
      case SFSE:
        return isSetSfse();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLineage_result)
        return this.equals((createLineage_result)that);
      return false;
    }

    public boolean equals(createLineage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_faee = true && this.isSetFaee();
      boolean that_present_faee = true && that.isSetFaee();
      if (this_present_faee || that_present_faee) {
        if (!(this_present_faee && that_present_faee))
          return false;
        if (!this.faee.equals(that.faee))
          return false;
      }

      boolean this_present_bie = true && this.isSetBie();
      boolean that_present_bie = true && that.isSetBie();
      if (this_present_bie || that_present_bie) {
        if (!(this_present_bie && that_present_bie))
          return false;
        if (!this.bie.equals(that.bie))
          return false;
      }

      boolean this_present_sfse = true && this.isSetSfse();
      boolean that_present_sfse = true && that.isSetSfse();
      if (this_present_sfse || that_present_sfse) {
        if (!(this_present_sfse && that_present_sfse))
          return false;
        if (!this.sfse.equals(that.sfse))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_faee = true && (isSetFaee());
      list.add(present_faee);
      if (present_faee)
        list.add(faee);

      boolean present_bie = true && (isSetBie());
      list.add(present_bie);
      if (present_bie)
        list.add(bie);

      boolean present_sfse = true && (isSetSfse());
      list.add(present_sfse);
      if (present_sfse)
        list.add(sfse);

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(createLineage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaee()).compareTo(other.isSetFaee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faee, other.faee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBie()).compareTo(other.isSetBie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bie, other.bie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSfse()).compareTo(other.isSetSfse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSfse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sfse, other.sfse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLineage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faee:");
      if (this.faee == null) {
        sb.append("null");
      } else {
        sb.append(this.faee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bie:");
      if (this.bie == null) {
        sb.append("null");
      } else {
        sb.append(this.bie);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sfse:");
      if (this.sfse == null) {
        sb.append("null");
      } else {
        sb.append(this.sfse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLineage_resultStandardSchemeFactory implements SchemeFactory {
      public createLineage_resultStandardScheme getScheme() {
        return new createLineage_resultStandardScheme();
      }
    }

    private static class createLineage_resultStandardScheme extends StandardScheme<createLineage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLineage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.faee = new FileAlreadyExistException();
                struct.faee.read(iprot);
                struct.setFaeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bie = new BlockInfoException();
                struct.bie.read(iprot);
                struct.setBieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SFSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sfse = new SuspectedFileSizeException();
                struct.sfse.read(iprot);
                struct.setSfseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TachyonException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLineage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.faee != null) {
          oprot.writeFieldBegin(FAEE_FIELD_DESC);
          struct.faee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bie != null) {
          oprot.writeFieldBegin(BIE_FIELD_DESC);
          struct.bie.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sfse != null) {
          oprot.writeFieldBegin(SFSE_FIELD_DESC);
          struct.sfse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLineage_resultTupleSchemeFactory implements SchemeFactory {
      public createLineage_resultTupleScheme getScheme() {
        return new createLineage_resultTupleScheme();
      }
    }

    private static class createLineage_resultTupleScheme extends TupleScheme<createLineage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLineage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFaee()) {
          optionals.set(1);
        }
        if (struct.isSetBie()) {
          optionals.set(2);
        }
        if (struct.isSetSfse()) {
          optionals.set(3);
        }
        if (struct.isSetTe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetFaee()) {
          struct.faee.write(oprot);
        }
        if (struct.isSetBie()) {
          struct.bie.write(oprot);
        }
        if (struct.isSetSfse()) {
          struct.sfse.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLineage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.faee = new FileAlreadyExistException();
          struct.faee.read(iprot);
          struct.setFaeeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bie = new BlockInfoException();
          struct.bie.read(iprot);
          struct.setBieIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sfse = new SuspectedFileSizeException();
          struct.sfse.read(iprot);
          struct.setSfseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.te = new TachyonException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class deleteLineage_args implements org.apache.thrift.TBase<deleteLineage_args, deleteLineage_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLineage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLineage_args");

    private static final org.apache.thrift.protocol.TField LINEAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lineageId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CASCADE_FIELD_DESC = new org.apache.thrift.protocol.TField("cascade", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLineage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLineage_argsTupleSchemeFactory());
    }

    public long lineageId; // required
    public boolean cascade; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINEAGE_ID((short)1, "lineageId"),
      CASCADE((short)2, "cascade");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINEAGE_ID
            return LINEAGE_ID;
          case 2: // CASCADE
            return CASCADE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LINEAGEID_ISSET_ID = 0;
    private static final int __CASCADE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINEAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("lineageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CASCADE, new org.apache.thrift.meta_data.FieldMetaData("cascade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLineage_args.class, metaDataMap);
    }

    public deleteLineage_args() {
    }

    public deleteLineage_args(
      long lineageId,
      boolean cascade)
    {
      this();
      this.lineageId = lineageId;
      setLineageIdIsSet(true);
      this.cascade = cascade;
      setCascadeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLineage_args(deleteLineage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lineageId = other.lineageId;
      this.cascade = other.cascade;
    }

    public deleteLineage_args deepCopy() {
      return new deleteLineage_args(this);
    }

    @Override
    public void clear() {
      setLineageIdIsSet(false);
      this.lineageId = 0;
      setCascadeIsSet(false);
      this.cascade = false;
    }

    public long getLineageId() {
      return this.lineageId;
    }

    public deleteLineage_args setLineageId(long lineageId) {
      this.lineageId = lineageId;
      setLineageIdIsSet(true);
      return this;
    }

    public void unsetLineageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINEAGEID_ISSET_ID);
    }

    /** Returns true if field lineageId is set (has been assigned a value) and false otherwise */
    public boolean isSetLineageId() {
      return EncodingUtils.testBit(__isset_bitfield, __LINEAGEID_ISSET_ID);
    }

    public void setLineageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINEAGEID_ISSET_ID, value);
    }

    public boolean isCascade() {
      return this.cascade;
    }

    public deleteLineage_args setCascade(boolean cascade) {
      this.cascade = cascade;
      setCascadeIsSet(true);
      return this;
    }

    public void unsetCascade() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASCADE_ISSET_ID);
    }

    /** Returns true if field cascade is set (has been assigned a value) and false otherwise */
    public boolean isSetCascade() {
      return EncodingUtils.testBit(__isset_bitfield, __CASCADE_ISSET_ID);
    }

    public void setCascadeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASCADE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINEAGE_ID:
        if (value == null) {
          unsetLineageId();
        } else {
          setLineageId((Long)value);
        }
        break;

      case CASCADE:
        if (value == null) {
          unsetCascade();
        } else {
          setCascade((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINEAGE_ID:
        return Long.valueOf(getLineageId());

      case CASCADE:
        return Boolean.valueOf(isCascade());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINEAGE_ID:
        return isSetLineageId();
      case CASCADE:
        return isSetCascade();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLineage_args)
        return this.equals((deleteLineage_args)that);
      return false;
    }

    public boolean equals(deleteLineage_args that) {
      if (that == null)
        return false;

      boolean this_present_lineageId = true;
      boolean that_present_lineageId = true;
      if (this_present_lineageId || that_present_lineageId) {
        if (!(this_present_lineageId && that_present_lineageId))
          return false;
        if (this.lineageId != that.lineageId)
          return false;
      }

      boolean this_present_cascade = true;
      boolean that_present_cascade = true;
      if (this_present_cascade || that_present_cascade) {
        if (!(this_present_cascade && that_present_cascade))
          return false;
        if (this.cascade != that.cascade)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lineageId = true;
      list.add(present_lineageId);
      if (present_lineageId)
        list.add(lineageId);

      boolean present_cascade = true;
      list.add(present_cascade);
      if (present_cascade)
        list.add(cascade);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLineage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLineageId()).compareTo(other.isSetLineageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLineageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineageId, other.lineageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCascade()).compareTo(other.isSetCascade());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCascade()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cascade, other.cascade);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLineage_args(");
      boolean first = true;

      sb.append("lineageId:");
      sb.append(this.lineageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cascade:");
      sb.append(this.cascade);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLineage_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLineage_argsStandardScheme getScheme() {
        return new deleteLineage_argsStandardScheme();
      }
    }

    private static class deleteLineage_argsStandardScheme extends StandardScheme<deleteLineage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLineage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINEAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lineageId = iprot.readI64();
                struct.setLineageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CASCADE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.cascade = iprot.readBool();
                struct.setCascadeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLineage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LINEAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.lineageId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CASCADE_FIELD_DESC);
        oprot.writeBool(struct.cascade);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLineage_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLineage_argsTupleScheme getScheme() {
        return new deleteLineage_argsTupleScheme();
      }
    }

    private static class deleteLineage_argsTupleScheme extends TupleScheme<deleteLineage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLineage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLineageId()) {
          optionals.set(0);
        }
        if (struct.isSetCascade()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLineageId()) {
          oprot.writeI64(struct.lineageId);
        }
        if (struct.isSetCascade()) {
          oprot.writeBool(struct.cascade);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLineage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lineageId = iprot.readI64();
          struct.setLineageIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cascade = iprot.readBool();
          struct.setCascadeIsSet(true);
        }
      }
    }

  }

  public static class deleteLineage_result implements org.apache.thrift.TBase<deleteLineage_result, deleteLineage_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLineage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLineage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField LNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("lnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LDE_FIELD_DESC = new org.apache.thrift.protocol.TField("lde", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLineage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLineage_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public LineageDoesNotExistException lnee; // required
    public LineageDeletionException lde; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LNEE((short)1, "lnee"),
      LDE((short)2, "lde");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LNEE
            return LNEE;
          case 2: // LDE
            return LDE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LNEE, new org.apache.thrift.meta_data.FieldMetaData("lnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LDE, new org.apache.thrift.meta_data.FieldMetaData("lde", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLineage_result.class, metaDataMap);
    }

    public deleteLineage_result() {
    }

    public deleteLineage_result(
      boolean success,
      LineageDoesNotExistException lnee,
      LineageDeletionException lde)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.lnee = lnee;
      this.lde = lde;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLineage_result(deleteLineage_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetLnee()) {
        this.lnee = new LineageDoesNotExistException(other.lnee);
      }
      if (other.isSetLde()) {
        this.lde = new LineageDeletionException(other.lde);
      }
    }

    public deleteLineage_result deepCopy() {
      return new deleteLineage_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.lnee = null;
      this.lde = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteLineage_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public LineageDoesNotExistException getLnee() {
      return this.lnee;
    }

    public deleteLineage_result setLnee(LineageDoesNotExistException lnee) {
      this.lnee = lnee;
      return this;
    }

    public void unsetLnee() {
      this.lnee = null;
    }

    /** Returns true if field lnee is set (has been assigned a value) and false otherwise */
    public boolean isSetLnee() {
      return this.lnee != null;
    }

    public void setLneeIsSet(boolean value) {
      if (!value) {
        this.lnee = null;
      }
    }

    public LineageDeletionException getLde() {
      return this.lde;
    }

    public deleteLineage_result setLde(LineageDeletionException lde) {
      this.lde = lde;
      return this;
    }

    public void unsetLde() {
      this.lde = null;
    }

    /** Returns true if field lde is set (has been assigned a value) and false otherwise */
    public boolean isSetLde() {
      return this.lde != null;
    }

    public void setLdeIsSet(boolean value) {
      if (!value) {
        this.lde = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case LNEE:
        if (value == null) {
          unsetLnee();
        } else {
          setLnee((LineageDoesNotExistException)value);
        }
        break;

      case LDE:
        if (value == null) {
          unsetLde();
        } else {
          setLde((LineageDeletionException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case LNEE:
        return getLnee();

      case LDE:
        return getLde();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LNEE:
        return isSetLnee();
      case LDE:
        return isSetLde();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLineage_result)
        return this.equals((deleteLineage_result)that);
      return false;
    }

    public boolean equals(deleteLineage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_lnee = true && this.isSetLnee();
      boolean that_present_lnee = true && that.isSetLnee();
      if (this_present_lnee || that_present_lnee) {
        if (!(this_present_lnee && that_present_lnee))
          return false;
        if (!this.lnee.equals(that.lnee))
          return false;
      }

      boolean this_present_lde = true && this.isSetLde();
      boolean that_present_lde = true && that.isSetLde();
      if (this_present_lde || that_present_lde) {
        if (!(this_present_lde && that_present_lde))
          return false;
        if (!this.lde.equals(that.lde))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_lnee = true && (isSetLnee());
      list.add(present_lnee);
      if (present_lnee)
        list.add(lnee);

      boolean present_lde = true && (isSetLde());
      list.add(present_lde);
      if (present_lde)
        list.add(lde);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLineage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLnee()).compareTo(other.isSetLnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lnee, other.lnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLde()).compareTo(other.isSetLde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lde, other.lde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLineage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lnee:");
      if (this.lnee == null) {
        sb.append("null");
      } else {
        sb.append(this.lnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lde:");
      if (this.lde == null) {
        sb.append("null");
      } else {
        sb.append(this.lde);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLineage_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLineage_resultStandardScheme getScheme() {
        return new deleteLineage_resultStandardScheme();
      }
    }

    private static class deleteLineage_resultStandardScheme extends StandardScheme<deleteLineage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLineage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lnee = new LineageDoesNotExistException();
                struct.lnee.read(iprot);
                struct.setLneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LDE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lde = new LineageDeletionException();
                struct.lde.read(iprot);
                struct.setLdeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLineage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.lnee != null) {
          oprot.writeFieldBegin(LNEE_FIELD_DESC);
          struct.lnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lde != null) {
          oprot.writeFieldBegin(LDE_FIELD_DESC);
          struct.lde.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLineage_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLineage_resultTupleScheme getScheme() {
        return new deleteLineage_resultTupleScheme();
      }
    }

    private static class deleteLineage_resultTupleScheme extends TupleScheme<deleteLineage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLineage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLnee()) {
          optionals.set(1);
        }
        if (struct.isSetLde()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetLnee()) {
          struct.lnee.write(oprot);
        }
        if (struct.isSetLde()) {
          struct.lde.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLineage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lnee = new LineageDoesNotExistException();
          struct.lnee.read(iprot);
          struct.setLneeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lde = new LineageDeletionException();
          struct.lde.read(iprot);
          struct.setLdeIsSet(true);
        }
      }
    }

  }

  public static class listLineages_args implements org.apache.thrift.TBase<listLineages_args, listLineages_args._Fields>, java.io.Serializable, Cloneable, Comparable<listLineages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listLineages_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listLineages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listLineages_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listLineages_args.class, metaDataMap);
    }

    public listLineages_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLineages_args(listLineages_args other) {
    }

    public listLineages_args deepCopy() {
      return new listLineages_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listLineages_args)
        return this.equals((listLineages_args)that);
      return false;
    }

    public boolean equals(listLineages_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(listLineages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listLineages_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listLineages_argsStandardSchemeFactory implements SchemeFactory {
      public listLineages_argsStandardScheme getScheme() {
        return new listLineages_argsStandardScheme();
      }
    }

    private static class listLineages_argsStandardScheme extends StandardScheme<listLineages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listLineages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listLineages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listLineages_argsTupleSchemeFactory implements SchemeFactory {
      public listLineages_argsTupleScheme getScheme() {
        return new listLineages_argsTupleScheme();
      }
    }

    private static class listLineages_argsTupleScheme extends TupleScheme<listLineages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listLineages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listLineages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listLineages_result implements org.apache.thrift.TBase<listLineages_result, listLineages_result._Fields>, java.io.Serializable, Cloneable, Comparable<listLineages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listLineages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listLineages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listLineages_resultTupleSchemeFactory());
    }

    public List<LineageInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LineageInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listLineages_result.class, metaDataMap);
    }

    public listLineages_result() {
    }

    public listLineages_result(
      List<LineageInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLineages_result(listLineages_result other) {
      if (other.isSetSuccess()) {
        List<LineageInfo> __this__success = new ArrayList<LineageInfo>(other.success.size());
        for (LineageInfo other_element : other.success) {
          __this__success.add(new LineageInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public listLineages_result deepCopy() {
      return new listLineages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LineageInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LineageInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<LineageInfo>();
      }
      this.success.add(elem);
    }

    public List<LineageInfo> getSuccess() {
      return this.success;
    }

    public listLineages_result setSuccess(List<LineageInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LineageInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listLineages_result)
        return this.equals((listLineages_result)that);
      return false;
    }

    public boolean equals(listLineages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listLineages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listLineages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listLineages_resultStandardSchemeFactory implements SchemeFactory {
      public listLineages_resultStandardScheme getScheme() {
        return new listLineages_resultStandardScheme();
      }
    }

    private static class listLineages_resultStandardScheme extends StandardScheme<listLineages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listLineages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list252 = iprot.readListBegin();
                  struct.success = new ArrayList<LineageInfo>(_list252.size);
                  LineageInfo _elem253;
                  for (int _i254 = 0; _i254 < _list252.size; ++_i254)
                  {
                    _elem253 = new LineageInfo();
                    _elem253.read(iprot);
                    struct.success.add(_elem253);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listLineages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LineageInfo _iter255 : struct.success)
            {
              _iter255.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listLineages_resultTupleSchemeFactory implements SchemeFactory {
      public listLineages_resultTupleScheme getScheme() {
        return new listLineages_resultTupleScheme();
      }
    }

    private static class listLineages_resultTupleScheme extends TupleScheme<listLineages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listLineages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LineageInfo _iter256 : struct.success)
            {
              _iter256.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listLineages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list257 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LineageInfo>(_list257.size);
            LineageInfo _elem258;
            for (int _i259 = 0; _i259 < _list257.size; ++_i259)
            {
              _elem258 = new LineageInfo();
              _elem258.read(iprot);
              struct.success.add(_elem258);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class recreateFile_args implements org.apache.thrift.TBase<recreateFile_args, recreateFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<recreateFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recreateFile_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BLOCK_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSizeBytes", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recreateFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recreateFile_argsTupleSchemeFactory());
    }

    public String path; // required
    public long blockSizeBytes; // required
    public long ttl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path"),
      BLOCK_SIZE_BYTES((short)2, "blockSizeBytes"),
      TTL((short)3, "ttl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // BLOCK_SIZE_BYTES
            return BLOCK_SIZE_BYTES;
          case 3: // TTL
            return TTL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKSIZEBYTES_ISSET_ID = 0;
    private static final int __TTL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BLOCK_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("blockSizeBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recreateFile_args.class, metaDataMap);
    }

    public recreateFile_args() {
    }

    public recreateFile_args(
      String path,
      long blockSizeBytes,
      long ttl)
    {
      this();
      this.path = path;
      this.blockSizeBytes = blockSizeBytes;
      setBlockSizeBytesIsSet(true);
      this.ttl = ttl;
      setTtlIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recreateFile_args(recreateFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPath()) {
        this.path = other.path;
      }
      this.blockSizeBytes = other.blockSizeBytes;
      this.ttl = other.ttl;
    }

    public recreateFile_args deepCopy() {
      return new recreateFile_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
      setBlockSizeBytesIsSet(false);
      this.blockSizeBytes = 0;
      setTtlIsSet(false);
      this.ttl = 0;
    }

    public String getPath() {
      return this.path;
    }

    public recreateFile_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public long getBlockSizeBytes() {
      return this.blockSizeBytes;
    }

    public recreateFile_args setBlockSizeBytes(long blockSizeBytes) {
      this.blockSizeBytes = blockSizeBytes;
      setBlockSizeBytesIsSet(true);
      return this;
    }

    public void unsetBlockSizeBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID);
    }

    /** Returns true if field blockSizeBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockSizeBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID);
    }

    public void setBlockSizeBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID, value);
    }

    public long getTtl() {
      return this.ttl;
    }

    public recreateFile_args setTtl(long ttl) {
      this.ttl = ttl;
      setTtlIsSet(true);
      return this;
    }

    public void unsetTtl() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
    }

    /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
    public boolean isSetTtl() {
      return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
    }

    public void setTtlIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      case BLOCK_SIZE_BYTES:
        if (value == null) {
          unsetBlockSizeBytes();
        } else {
          setBlockSizeBytes((Long)value);
        }
        break;

      case TTL:
        if (value == null) {
          unsetTtl();
        } else {
          setTtl((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case BLOCK_SIZE_BYTES:
        return Long.valueOf(getBlockSizeBytes());

      case TTL:
        return Long.valueOf(getTtl());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case BLOCK_SIZE_BYTES:
        return isSetBlockSizeBytes();
      case TTL:
        return isSetTtl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recreateFile_args)
        return this.equals((recreateFile_args)that);
      return false;
    }

    public boolean equals(recreateFile_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_blockSizeBytes = true;
      boolean that_present_blockSizeBytes = true;
      if (this_present_blockSizeBytes || that_present_blockSizeBytes) {
        if (!(this_present_blockSizeBytes && that_present_blockSizeBytes))
          return false;
        if (this.blockSizeBytes != that.blockSizeBytes)
          return false;
      }

      boolean this_present_ttl = true;
      boolean that_present_ttl = true;
      if (this_present_ttl || that_present_ttl) {
        if (!(this_present_ttl && that_present_ttl))
          return false;
        if (this.ttl != that.ttl)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_path = true && (isSetPath());
      list.add(present_path);
      if (present_path)
        list.add(path);

      boolean present_blockSizeBytes = true;
      list.add(present_blockSizeBytes);
      if (present_blockSizeBytes)
        list.add(blockSizeBytes);

      boolean present_ttl = true;
      list.add(present_ttl);
      if (present_ttl)
        list.add(ttl);

      return list.hashCode();
    }

    @Override
    public int compareTo(recreateFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockSizeBytes()).compareTo(other.isSetBlockSizeBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockSizeBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSizeBytes, other.blockSizeBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTtl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recreateFile_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockSizeBytes:");
      sb.append(this.blockSizeBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recreateFile_argsStandardSchemeFactory implements SchemeFactory {
      public recreateFile_argsStandardScheme getScheme() {
        return new recreateFile_argsStandardScheme();
      }
    }

    private static class recreateFile_argsStandardScheme extends StandardScheme<recreateFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recreateFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLOCK_SIZE_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockSizeBytes = iprot.readI64();
                struct.setBlockSizeBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TTL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ttl = iprot.readI64();
                struct.setTtlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recreateFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BLOCK_SIZE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.blockSizeBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI64(struct.ttl);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recreateFile_argsTupleSchemeFactory implements SchemeFactory {
      public recreateFile_argsTupleScheme getScheme() {
        return new recreateFile_argsTupleScheme();
      }
    }

    private static class recreateFile_argsTupleScheme extends TupleScheme<recreateFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recreateFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetBlockSizeBytes()) {
          optionals.set(1);
        }
        if (struct.isSetTtl()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
        if (struct.isSetBlockSizeBytes()) {
          oprot.writeI64(struct.blockSizeBytes);
        }
        if (struct.isSetTtl()) {
          oprot.writeI64(struct.ttl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recreateFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.blockSizeBytes = iprot.readI64();
          struct.setBlockSizeBytesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ttl = iprot.readI64();
          struct.setTtlIsSet(true);
        }
      }
    }

  }

  public static class recreateFile_result implements org.apache.thrift.TBase<recreateFile_result, recreateFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<recreateFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recreateFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField IPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LDEE_FIELD_DESC = new org.apache.thrift.protocol.TField("ldee", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recreateFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recreateFile_resultTupleSchemeFactory());
    }

    public long success; // required
    public InvalidPathException ipe; // required
    public LineageDoesNotExistException ldee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IPE((short)1, "ipe"),
      LDEE((short)2, "ldee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IPE
            return IPE;
          case 2: // LDEE
            return LDEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IPE, new org.apache.thrift.meta_data.FieldMetaData("ipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LDEE, new org.apache.thrift.meta_data.FieldMetaData("ldee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recreateFile_result.class, metaDataMap);
    }

    public recreateFile_result() {
    }

    public recreateFile_result(
      long success,
      InvalidPathException ipe,
      LineageDoesNotExistException ldee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ipe = ipe;
      this.ldee = ldee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recreateFile_result(recreateFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIpe()) {
        this.ipe = new InvalidPathException(other.ipe);
      }
      if (other.isSetLdee()) {
        this.ldee = new LineageDoesNotExistException(other.ldee);
      }
    }

    public recreateFile_result deepCopy() {
      return new recreateFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ipe = null;
      this.ldee = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public recreateFile_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidPathException getIpe() {
      return this.ipe;
    }

    public recreateFile_result setIpe(InvalidPathException ipe) {
      this.ipe = ipe;
      return this;
    }

    public void unsetIpe() {
      this.ipe = null;
    }

    /** Returns true if field ipe is set (has been assigned a value) and false otherwise */
    public boolean isSetIpe() {
      return this.ipe != null;
    }

    public void setIpeIsSet(boolean value) {
      if (!value) {
        this.ipe = null;
      }
    }

    public LineageDoesNotExistException getLdee() {
      return this.ldee;
    }

    public recreateFile_result setLdee(LineageDoesNotExistException ldee) {
      this.ldee = ldee;
      return this;
    }

    public void unsetLdee() {
      this.ldee = null;
    }

    /** Returns true if field ldee is set (has been assigned a value) and false otherwise */
    public boolean isSetLdee() {
      return this.ldee != null;
    }

    public void setLdeeIsSet(boolean value) {
      if (!value) {
        this.ldee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case IPE:
        if (value == null) {
          unsetIpe();
        } else {
          setIpe((InvalidPathException)value);
        }
        break;

      case LDEE:
        if (value == null) {
          unsetLdee();
        } else {
          setLdee((LineageDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case IPE:
        return getIpe();

      case LDEE:
        return getLdee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IPE:
        return isSetIpe();
      case LDEE:
        return isSetLdee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recreateFile_result)
        return this.equals((recreateFile_result)that);
      return false;
    }

    public boolean equals(recreateFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ipe = true && this.isSetIpe();
      boolean that_present_ipe = true && that.isSetIpe();
      if (this_present_ipe || that_present_ipe) {
        if (!(this_present_ipe && that_present_ipe))
          return false;
        if (!this.ipe.equals(that.ipe))
          return false;
      }

      boolean this_present_ldee = true && this.isSetLdee();
      boolean that_present_ldee = true && that.isSetLdee();
      if (this_present_ldee || that_present_ldee) {
        if (!(this_present_ldee && that_present_ldee))
          return false;
        if (!this.ldee.equals(that.ldee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ipe = true && (isSetIpe());
      list.add(present_ipe);
      if (present_ipe)
        list.add(ipe);

      boolean present_ldee = true && (isSetLdee());
      list.add(present_ldee);
      if (present_ldee)
        list.add(ldee);

      return list.hashCode();
    }

    @Override
    public int compareTo(recreateFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpe()).compareTo(other.isSetIpe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipe, other.ipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLdee()).compareTo(other.isSetLdee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLdee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ldee, other.ldee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recreateFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipe:");
      if (this.ipe == null) {
        sb.append("null");
      } else {
        sb.append(this.ipe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ldee:");
      if (this.ldee == null) {
        sb.append("null");
      } else {
        sb.append(this.ldee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recreateFile_resultStandardSchemeFactory implements SchemeFactory {
      public recreateFile_resultStandardScheme getScheme() {
        return new recreateFile_resultStandardScheme();
      }
    }

    private static class recreateFile_resultStandardScheme extends StandardScheme<recreateFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recreateFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipe = new InvalidPathException();
                struct.ipe.read(iprot);
                struct.setIpeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LDEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ldee = new LineageDoesNotExistException();
                struct.ldee.read(iprot);
                struct.setLdeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recreateFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ipe != null) {
          oprot.writeFieldBegin(IPE_FIELD_DESC);
          struct.ipe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ldee != null) {
          oprot.writeFieldBegin(LDEE_FIELD_DESC);
          struct.ldee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recreateFile_resultTupleSchemeFactory implements SchemeFactory {
      public recreateFile_resultTupleScheme getScheme() {
        return new recreateFile_resultTupleScheme();
      }
    }

    private static class recreateFile_resultTupleScheme extends TupleScheme<recreateFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recreateFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIpe()) {
          optionals.set(1);
        }
        if (struct.isSetLdee()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetIpe()) {
          struct.ipe.write(oprot);
        }
        if (struct.isSetLdee()) {
          struct.ldee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recreateFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ipe = new InvalidPathException();
          struct.ipe.read(iprot);
          struct.setIpeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ldee = new LineageDoesNotExistException();
          struct.ldee.read(iprot);
          struct.setLdeeIsSet(true);
        }
      }
    }

  }

  public static class asyncCompleteFile_args implements org.apache.thrift.TBase<asyncCompleteFile_args, asyncCompleteFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<asyncCompleteFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asyncCompleteFile_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new asyncCompleteFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new asyncCompleteFile_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public String filePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      FILE_PATH((short)2, "filePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // FILE_PATH
            return FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asyncCompleteFile_args.class, metaDataMap);
    }

    public asyncCompleteFile_args() {
    }

    public asyncCompleteFile_args(
      long fileId,
      String filePath)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.filePath = filePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public asyncCompleteFile_args(asyncCompleteFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
    }

    public asyncCompleteFile_args deepCopy() {
      return new asyncCompleteFile_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      this.filePath = null;
    }

    public long getFileId() {
      return this.fileId;
    }

    public asyncCompleteFile_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public String getFilePath() {
      return this.filePath;
    }

    public asyncCompleteFile_args setFilePath(String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case FILE_PATH:
        return getFilePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case FILE_PATH:
        return isSetFilePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof asyncCompleteFile_args)
        return this.equals((asyncCompleteFile_args)that);
      return false;
    }

    public boolean equals(asyncCompleteFile_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      boolean present_filePath = true && (isSetFilePath());
      list.add(present_filePath);
      if (present_filePath)
        list.add(filePath);

      return list.hashCode();
    }

    @Override
    public int compareTo(asyncCompleteFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("asyncCompleteFile_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class asyncCompleteFile_argsStandardSchemeFactory implements SchemeFactory {
      public asyncCompleteFile_argsStandardScheme getScheme() {
        return new asyncCompleteFile_argsStandardScheme();
      }
    }

    private static class asyncCompleteFile_argsStandardScheme extends StandardScheme<asyncCompleteFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, asyncCompleteFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, asyncCompleteFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class asyncCompleteFile_argsTupleSchemeFactory implements SchemeFactory {
      public asyncCompleteFile_argsTupleScheme getScheme() {
        return new asyncCompleteFile_argsTupleScheme();
      }
    }

    private static class asyncCompleteFile_argsTupleScheme extends TupleScheme<asyncCompleteFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, asyncCompleteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetFilePath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetFilePath()) {
          oprot.writeString(struct.filePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, asyncCompleteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filePath = iprot.readString();
          struct.setFilePathIsSet(true);
        }
      }
    }

  }

  public static class asyncCompleteFile_result implements org.apache.thrift.TBase<asyncCompleteFile_result, asyncCompleteFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<asyncCompleteFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asyncCompleteFile_result");

    private static final org.apache.thrift.protocol.TField FDNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fdnee", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIE_FIELD_DESC = new org.apache.thrift.protocol.TField("bie", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new asyncCompleteFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new asyncCompleteFile_resultTupleSchemeFactory());
    }

    public FileDoesNotExistException fdnee; // required
    public BlockInfoException bie; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FDNEE((short)1, "fdnee"),
      BIE((short)2, "bie");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FDNEE
            return FDNEE;
          case 2: // BIE
            return BIE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FDNEE, new org.apache.thrift.meta_data.FieldMetaData("fdnee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BIE, new org.apache.thrift.meta_data.FieldMetaData("bie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asyncCompleteFile_result.class, metaDataMap);
    }

    public asyncCompleteFile_result() {
    }

    public asyncCompleteFile_result(
      FileDoesNotExistException fdnee,
      BlockInfoException bie)
    {
      this();
      this.fdnee = fdnee;
      this.bie = bie;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public asyncCompleteFile_result(asyncCompleteFile_result other) {
      if (other.isSetFdnee()) {
        this.fdnee = new FileDoesNotExistException(other.fdnee);
      }
      if (other.isSetBie()) {
        this.bie = new BlockInfoException(other.bie);
      }
    }

    public asyncCompleteFile_result deepCopy() {
      return new asyncCompleteFile_result(this);
    }

    @Override
    public void clear() {
      this.fdnee = null;
      this.bie = null;
    }

    public FileDoesNotExistException getFdnee() {
      return this.fdnee;
    }

    public asyncCompleteFile_result setFdnee(FileDoesNotExistException fdnee) {
      this.fdnee = fdnee;
      return this;
    }

    public void unsetFdnee() {
      this.fdnee = null;
    }

    /** Returns true if field fdnee is set (has been assigned a value) and false otherwise */
    public boolean isSetFdnee() {
      return this.fdnee != null;
    }

    public void setFdneeIsSet(boolean value) {
      if (!value) {
        this.fdnee = null;
      }
    }

    public BlockInfoException getBie() {
      return this.bie;
    }

    public asyncCompleteFile_result setBie(BlockInfoException bie) {
      this.bie = bie;
      return this;
    }

    public void unsetBie() {
      this.bie = null;
    }

    /** Returns true if field bie is set (has been assigned a value) and false otherwise */
    public boolean isSetBie() {
      return this.bie != null;
    }

    public void setBieIsSet(boolean value) {
      if (!value) {
        this.bie = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FDNEE:
        if (value == null) {
          unsetFdnee();
        } else {
          setFdnee((FileDoesNotExistException)value);
        }
        break;

      case BIE:
        if (value == null) {
          unsetBie();
        } else {
          setBie((BlockInfoException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FDNEE:
        return getFdnee();

      case BIE:
        return getBie();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FDNEE:
        return isSetFdnee();
      case BIE:
        return isSetBie();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof asyncCompleteFile_result)
        return this.equals((asyncCompleteFile_result)that);
      return false;
    }

    public boolean equals(asyncCompleteFile_result that) {
      if (that == null)
        return false;

      boolean this_present_fdnee = true && this.isSetFdnee();
      boolean that_present_fdnee = true && that.isSetFdnee();
      if (this_present_fdnee || that_present_fdnee) {
        if (!(this_present_fdnee && that_present_fdnee))
          return false;
        if (!this.fdnee.equals(that.fdnee))
          return false;
      }

      boolean this_present_bie = true && this.isSetBie();
      boolean that_present_bie = true && that.isSetBie();
      if (this_present_bie || that_present_bie) {
        if (!(this_present_bie && that_present_bie))
          return false;
        if (!this.bie.equals(that.bie))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fdnee = true && (isSetFdnee());
      list.add(present_fdnee);
      if (present_fdnee)
        list.add(fdnee);

      boolean present_bie = true && (isSetBie());
      list.add(present_bie);
      if (present_bie)
        list.add(bie);

      return list.hashCode();
    }

    @Override
    public int compareTo(asyncCompleteFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFdnee()).compareTo(other.isSetFdnee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdnee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdnee, other.fdnee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBie()).compareTo(other.isSetBie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bie, other.bie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("asyncCompleteFile_result(");
      boolean first = true;

      sb.append("fdnee:");
      if (this.fdnee == null) {
        sb.append("null");
      } else {
        sb.append(this.fdnee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bie:");
      if (this.bie == null) {
        sb.append("null");
      } else {
        sb.append(this.bie);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class asyncCompleteFile_resultStandardSchemeFactory implements SchemeFactory {
      public asyncCompleteFile_resultStandardScheme getScheme() {
        return new asyncCompleteFile_resultStandardScheme();
      }
    }

    private static class asyncCompleteFile_resultStandardScheme extends StandardScheme<asyncCompleteFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, asyncCompleteFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FDNEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fdnee = new FileDoesNotExistException();
                struct.fdnee.read(iprot);
                struct.setFdneeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bie = new BlockInfoException();
                struct.bie.read(iprot);
                struct.setBieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, asyncCompleteFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fdnee != null) {
          oprot.writeFieldBegin(FDNEE_FIELD_DESC);
          struct.fdnee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bie != null) {
          oprot.writeFieldBegin(BIE_FIELD_DESC);
          struct.bie.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class asyncCompleteFile_resultTupleSchemeFactory implements SchemeFactory {
      public asyncCompleteFile_resultTupleScheme getScheme() {
        return new asyncCompleteFile_resultTupleScheme();
      }
    }

    private static class asyncCompleteFile_resultTupleScheme extends TupleScheme<asyncCompleteFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, asyncCompleteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFdnee()) {
          optionals.set(0);
        }
        if (struct.isSetBie()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFdnee()) {
          struct.fdnee.write(oprot);
        }
        if (struct.isSetBie()) {
          struct.bie.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, asyncCompleteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fdnee = new FileDoesNotExistException();
          struct.fdnee.read(iprot);
          struct.setFdneeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bie = new BlockInfoException();
          struct.bie.read(iprot);
          struct.setBieIsSet(true);
        }
      }
    }

  }

  public static class workerLineageHeartbeat_args implements org.apache.thrift.TBase<workerLineageHeartbeat_args, workerLineageHeartbeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<workerLineageHeartbeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerLineageHeartbeat_args");

    private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PERSISTED_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("persistedFiles", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerLineageHeartbeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerLineageHeartbeat_argsTupleSchemeFactory());
    }

    public long workerId; // required
    public List<Long> persistedFiles; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_ID((short)1, "workerId"),
      PERSISTED_FILES((short)2, "persistedFiles");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_ID
            return WORKER_ID;
          case 2: // PERSISTED_FILES
            return PERSISTED_FILES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WORKERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PERSISTED_FILES, new org.apache.thrift.meta_data.FieldMetaData("persistedFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerLineageHeartbeat_args.class, metaDataMap);
    }

    public workerLineageHeartbeat_args() {
    }

    public workerLineageHeartbeat_args(
      long workerId,
      List<Long> persistedFiles)
    {
      this();
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      this.persistedFiles = persistedFiles;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerLineageHeartbeat_args(workerLineageHeartbeat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.workerId = other.workerId;
      if (other.isSetPersistedFiles()) {
        List<Long> __this__persistedFiles = new ArrayList<Long>(other.persistedFiles);
        this.persistedFiles = __this__persistedFiles;
      }
    }

    public workerLineageHeartbeat_args deepCopy() {
      return new workerLineageHeartbeat_args(this);
    }

    @Override
    public void clear() {
      setWorkerIdIsSet(false);
      this.workerId = 0;
      this.persistedFiles = null;
    }

    public long getWorkerId() {
      return this.workerId;
    }

    public workerLineageHeartbeat_args setWorkerId(long workerId) {
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      return this;
    }

    public void unsetWorkerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerId() {
      return EncodingUtils.testBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    public void setWorkerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERID_ISSET_ID, value);
    }

    public int getPersistedFilesSize() {
      return (this.persistedFiles == null) ? 0 : this.persistedFiles.size();
    }

    public java.util.Iterator<Long> getPersistedFilesIterator() {
      return (this.persistedFiles == null) ? null : this.persistedFiles.iterator();
    }

    public void addToPersistedFiles(long elem) {
      if (this.persistedFiles == null) {
        this.persistedFiles = new ArrayList<Long>();
      }
      this.persistedFiles.add(elem);
    }

    public List<Long> getPersistedFiles() {
      return this.persistedFiles;
    }

    public workerLineageHeartbeat_args setPersistedFiles(List<Long> persistedFiles) {
      this.persistedFiles = persistedFiles;
      return this;
    }

    public void unsetPersistedFiles() {
      this.persistedFiles = null;
    }

    /** Returns true if field persistedFiles is set (has been assigned a value) and false otherwise */
    public boolean isSetPersistedFiles() {
      return this.persistedFiles != null;
    }

    public void setPersistedFilesIsSet(boolean value) {
      if (!value) {
        this.persistedFiles = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_ID:
        if (value == null) {
          unsetWorkerId();
        } else {
          setWorkerId((Long)value);
        }
        break;

      case PERSISTED_FILES:
        if (value == null) {
          unsetPersistedFiles();
        } else {
          setPersistedFiles((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_ID:
        return Long.valueOf(getWorkerId());

      case PERSISTED_FILES:
        return getPersistedFiles();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_ID:
        return isSetWorkerId();
      case PERSISTED_FILES:
        return isSetPersistedFiles();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerLineageHeartbeat_args)
        return this.equals((workerLineageHeartbeat_args)that);
      return false;
    }

    public boolean equals(workerLineageHeartbeat_args that) {
      if (that == null)
        return false;

      boolean this_present_workerId = true;
      boolean that_present_workerId = true;
      if (this_present_workerId || that_present_workerId) {
        if (!(this_present_workerId && that_present_workerId))
          return false;
        if (this.workerId != that.workerId)
          return false;
      }

      boolean this_present_persistedFiles = true && this.isSetPersistedFiles();
      boolean that_present_persistedFiles = true && that.isSetPersistedFiles();
      if (this_present_persistedFiles || that_present_persistedFiles) {
        if (!(this_present_persistedFiles && that_present_persistedFiles))
          return false;
        if (!this.persistedFiles.equals(that.persistedFiles))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_workerId = true;
      list.add(present_workerId);
      if (present_workerId)
        list.add(workerId);

      boolean present_persistedFiles = true && (isSetPersistedFiles());
      list.add(present_persistedFiles);
      if (present_persistedFiles)
        list.add(persistedFiles);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerLineageHeartbeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(other.isSetWorkerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, other.workerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPersistedFiles()).compareTo(other.isSetPersistedFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPersistedFiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persistedFiles, other.persistedFiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerLineageHeartbeat_args(");
      boolean first = true;

      sb.append("workerId:");
      sb.append(this.workerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("persistedFiles:");
      if (this.persistedFiles == null) {
        sb.append("null");
      } else {
        sb.append(this.persistedFiles);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerLineageHeartbeat_argsStandardSchemeFactory implements SchemeFactory {
      public workerLineageHeartbeat_argsStandardScheme getScheme() {
        return new workerLineageHeartbeat_argsStandardScheme();
      }
    }

    private static class workerLineageHeartbeat_argsStandardScheme extends StandardScheme<workerLineageHeartbeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerLineageHeartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.workerId = iprot.readI64();
                struct.setWorkerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERSISTED_FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list260 = iprot.readListBegin();
                  struct.persistedFiles = new ArrayList<Long>(_list260.size);
                  long _elem261;
                  for (int _i262 = 0; _i262 < _list260.size; ++_i262)
                  {
                    _elem261 = iprot.readI64();
                    struct.persistedFiles.add(_elem261);
                  }
                  iprot.readListEnd();
                }
                struct.setPersistedFilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerLineageHeartbeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
        oprot.writeI64(struct.workerId);
        oprot.writeFieldEnd();
        if (struct.persistedFiles != null) {
          oprot.writeFieldBegin(PERSISTED_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.persistedFiles.size()));
            for (long _iter263 : struct.persistedFiles)
            {
              oprot.writeI64(_iter263);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerLineageHeartbeat_argsTupleSchemeFactory implements SchemeFactory {
      public workerLineageHeartbeat_argsTupleScheme getScheme() {
        return new workerLineageHeartbeat_argsTupleScheme();
      }
    }

    private static class workerLineageHeartbeat_argsTupleScheme extends TupleScheme<workerLineageHeartbeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerLineageHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerId()) {
          optionals.set(0);
        }
        if (struct.isSetPersistedFiles()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWorkerId()) {
          oprot.writeI64(struct.workerId);
        }
        if (struct.isSetPersistedFiles()) {
          {
            oprot.writeI32(struct.persistedFiles.size());
            for (long _iter264 : struct.persistedFiles)
            {
              oprot.writeI64(_iter264);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerLineageHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.workerId = iprot.readI64();
          struct.setWorkerIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.persistedFiles = new ArrayList<Long>(_list265.size);
            long _elem266;
            for (int _i267 = 0; _i267 < _list265.size; ++_i267)
            {
              _elem266 = iprot.readI64();
              struct.persistedFiles.add(_elem266);
            }
          }
          struct.setPersistedFilesIsSet(true);
        }
      }
    }

  }

  public static class workerLineageHeartbeat_result implements org.apache.thrift.TBase<workerLineageHeartbeat_result, workerLineageHeartbeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<workerLineageHeartbeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("workerLineageHeartbeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new workerLineageHeartbeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new workerLineageHeartbeat_resultTupleSchemeFactory());
    }

    public LineageCommand success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LineageCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(workerLineageHeartbeat_result.class, metaDataMap);
    }

    public workerLineageHeartbeat_result() {
    }

    public workerLineageHeartbeat_result(
      LineageCommand success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public workerLineageHeartbeat_result(workerLineageHeartbeat_result other) {
      if (other.isSetSuccess()) {
        this.success = new LineageCommand(other.success);
      }
    }

    public workerLineageHeartbeat_result deepCopy() {
      return new workerLineageHeartbeat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LineageCommand getSuccess() {
      return this.success;
    }

    public workerLineageHeartbeat_result setSuccess(LineageCommand success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LineageCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof workerLineageHeartbeat_result)
        return this.equals((workerLineageHeartbeat_result)that);
      return false;
    }

    public boolean equals(workerLineageHeartbeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(workerLineageHeartbeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("workerLineageHeartbeat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class workerLineageHeartbeat_resultStandardSchemeFactory implements SchemeFactory {
      public workerLineageHeartbeat_resultStandardScheme getScheme() {
        return new workerLineageHeartbeat_resultStandardScheme();
      }
    }

    private static class workerLineageHeartbeat_resultStandardScheme extends StandardScheme<workerLineageHeartbeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, workerLineageHeartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LineageCommand();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, workerLineageHeartbeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class workerLineageHeartbeat_resultTupleSchemeFactory implements SchemeFactory {
      public workerLineageHeartbeat_resultTupleScheme getScheme() {
        return new workerLineageHeartbeat_resultTupleScheme();
      }
    }

    private static class workerLineageHeartbeat_resultTupleScheme extends TupleScheme<workerLineageHeartbeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, workerLineageHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, workerLineageHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LineageCommand();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
