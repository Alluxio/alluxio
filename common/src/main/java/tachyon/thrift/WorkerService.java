/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-16")
public class WorkerService {

  public interface Iface {

    public void accessBlock(long blockId) throws BlockDoesNotExistException, org.apache.thrift.TException;

    public void addCheckpoint(long sessionId, long fileId) throws FileDoesNotExistException, FailedToCheckpointException, org.apache.thrift.TException;

    public boolean asyncCheckpoint(long fileId) throws org.apache.thrift.TException;

    /**
     * Used to cache a block into Tachyon space, worker will move the temporary block file from session
     * folder to data folder, and update the space usage information related. then update the block
     * information to master.
     * 
     * @param sessionId
     * @param blockId
     */
    public void cacheBlock(long sessionId, long blockId) throws WorkerOutOfSpaceException, BlockDoesNotExistException, InvalidWorkerStateException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException;

    /**
     * Used to cancel a block which is being written. worker will delete the temporary block file and
     * the location and space information related, then reclaim space allocated to the block.
     * 
     * @param sessionId
     * @param blockId
     */
    public void cancelBlock(long sessionId, long blockId) throws InvalidWorkerStateException, BlockAlreadyExistsException, BlockDoesNotExistException, ThriftIOException, org.apache.thrift.TException;

    /**
     * Used to get session's temporary folder on under file system, and the path of the session's temporary
     * folder will be returned.
     * 
     * @param sessionId
     */
    public String getSessionUfsTempFolder(long sessionId) throws org.apache.thrift.TException;

    /**
     * Lock the file in Tachyon's space while the session is reading it, and the path of the block file
     * locked will be returned, if the block file is not found, FileDoesNotExistException will be
     * thrown.
     * 
     * @param blockId
     * @param sessionId
     */
    public String lockBlock(long blockId, long sessionId) throws FileDoesNotExistException, InvalidWorkerStateException, org.apache.thrift.TException;

    /**
     * Used to promote block on under storage layer to top storage layer when there are more than one
     * storage layers in Tachyon's space. return true if the block is successfully promoted, false
     * otherwise.
     * 
     * @param blockId
     */
    public boolean promoteBlock(long blockId) throws WorkerOutOfSpaceException, BlockDoesNotExistException, InvalidWorkerStateException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException;

    /**
     * Used to allocate location and space for a new coming block, worker will choose the appropriate
     * storage directory which fits the initial block size by some allocation strategy, and the
     * temporary file path of the block file will be returned. if there is no enough space on Tachyon
     * storage OutOfSpaceException will be thrown, if the file is already being written by the session,
     * FileAlreadyExistException will be thrown.
     * 
     * @param sessionId
     * @param blockId
     * @param initialBytes
     */
    public String requestBlockLocation(long sessionId, long blockId, long initialBytes) throws InvalidWorkerStateException, WorkerOutOfSpaceException, BlockDoesNotExistException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException;

    /**
     * Used to request space for some block file. return true if the worker successfully allocates
     * space for the block on blockâ€™s location, false if there is no enough space, if there is no
     * information of the block on worker, FileDoesNotExistException will be thrown.
     * 
     * @param sessionId
     * @param blockId
     * @param requestBytes
     */
    public boolean requestSpace(long sessionId, long blockId, long requestBytes) throws org.apache.thrift.TException;

    /**
     * Used to unlock a block after the block is accessed, if the block is to be removed, delete the
     * block file. return true if successfully unlock the block, return false if the block is not
     * found or failed to delete the block.
     * 
     * @param blockId
     * @param sessionId
     */
    public boolean unlockBlock(long blockId, long sessionId) throws BlockDoesNotExistException, org.apache.thrift.TException;

    /**
     * Local session send heartbeat to local worker to keep its temporary folder. It also sends client
     * metrics to the worker.
     * 
     * @param sessionId
     * @param metrics
     */
    public void sessionHeartbeat(long sessionId, List<Long> metrics) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void accessBlock(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addCheckpoint(long sessionId, long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void asyncCheckpoint(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cacheBlock(long sessionId, long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelBlock(long sessionId, long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSessionUfsTempFolder(long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lockBlock(long blockId, long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void promoteBlock(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void requestBlockLocation(long sessionId, long blockId, long initialBytes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void requestSpace(long sessionId, long blockId, long requestBytes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unlockBlock(long blockId, long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sessionHeartbeat(long sessionId, List<Long> metrics, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void accessBlock(long blockId) throws BlockDoesNotExistException, org.apache.thrift.TException
    {
      send_accessBlock(blockId);
      recv_accessBlock();
    }

    public void send_accessBlock(long blockId) throws org.apache.thrift.TException
    {
      accessBlock_args args = new accessBlock_args();
      args.setBlockId(blockId);
      sendBase("accessBlock", args);
    }

    public void recv_accessBlock() throws BlockDoesNotExistException, org.apache.thrift.TException
    {
      accessBlock_result result = new accessBlock_result();
      receiveBase(result, "accessBlock");
      if (result.bE != null) {
        throw result.bE;
      }
      return;
    }

    public void addCheckpoint(long sessionId, long fileId) throws FileDoesNotExistException, FailedToCheckpointException, org.apache.thrift.TException
    {
      send_addCheckpoint(sessionId, fileId);
      recv_addCheckpoint();
    }

    public void send_addCheckpoint(long sessionId, long fileId) throws org.apache.thrift.TException
    {
      addCheckpoint_args args = new addCheckpoint_args();
      args.setSessionId(sessionId);
      args.setFileId(fileId);
      sendBase("addCheckpoint", args);
    }

    public void recv_addCheckpoint() throws FileDoesNotExistException, FailedToCheckpointException, org.apache.thrift.TException
    {
      addCheckpoint_result result = new addCheckpoint_result();
      receiveBase(result, "addCheckpoint");
      if (result.eP != null) {
        throw result.eP;
      }
      if (result.eF != null) {
        throw result.eF;
      }
      return;
    }

    public boolean asyncCheckpoint(long fileId) throws org.apache.thrift.TException
    {
      send_asyncCheckpoint(fileId);
      return recv_asyncCheckpoint();
    }

    public void send_asyncCheckpoint(long fileId) throws org.apache.thrift.TException
    {
      asyncCheckpoint_args args = new asyncCheckpoint_args();
      args.setFileId(fileId);
      sendBase("asyncCheckpoint", args);
    }

    public boolean recv_asyncCheckpoint() throws org.apache.thrift.TException
    {
      asyncCheckpoint_result result = new asyncCheckpoint_result();
      receiveBase(result, "asyncCheckpoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "asyncCheckpoint failed: unknown result");
    }

    public void cacheBlock(long sessionId, long blockId) throws WorkerOutOfSpaceException, BlockDoesNotExistException, InvalidWorkerStateException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException
    {
      send_cacheBlock(sessionId, blockId);
      recv_cacheBlock();
    }

    public void send_cacheBlock(long sessionId, long blockId) throws org.apache.thrift.TException
    {
      cacheBlock_args args = new cacheBlock_args();
      args.setSessionId(sessionId);
      args.setBlockId(blockId);
      sendBase("cacheBlock", args);
    }

    public void recv_cacheBlock() throws WorkerOutOfSpaceException, BlockDoesNotExistException, InvalidWorkerStateException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException
    {
      cacheBlock_result result = new cacheBlock_result();
      receiveBase(result, "cacheBlock");
      if (result.eW != null) {
        throw result.eW;
      }
      if (result.eDNE != null) {
        throw result.eDNE;
      }
      if (result.iW != null) {
        throw result.iW;
      }
      if (result.eAE != null) {
        throw result.eAE;
      }
      if (result.eT != null) {
        throw result.eT;
      }
      return;
    }

    public void cancelBlock(long sessionId, long blockId) throws InvalidWorkerStateException, BlockAlreadyExistsException, BlockDoesNotExistException, ThriftIOException, org.apache.thrift.TException
    {
      send_cancelBlock(sessionId, blockId);
      recv_cancelBlock();
    }

    public void send_cancelBlock(long sessionId, long blockId) throws org.apache.thrift.TException
    {
      cancelBlock_args args = new cancelBlock_args();
      args.setSessionId(sessionId);
      args.setBlockId(blockId);
      sendBase("cancelBlock", args);
    }

    public void recv_cancelBlock() throws InvalidWorkerStateException, BlockAlreadyExistsException, BlockDoesNotExistException, ThriftIOException, org.apache.thrift.TException
    {
      cancelBlock_result result = new cancelBlock_result();
      receiveBase(result, "cancelBlock");
      if (result.eW != null) {
        throw result.eW;
      }
      if (result.eAE != null) {
        throw result.eAE;
      }
      if (result.eDNE != null) {
        throw result.eDNE;
      }
      if (result.eT != null) {
        throw result.eT;
      }
      return;
    }

    public String getSessionUfsTempFolder(long sessionId) throws org.apache.thrift.TException
    {
      send_getSessionUfsTempFolder(sessionId);
      return recv_getSessionUfsTempFolder();
    }

    public void send_getSessionUfsTempFolder(long sessionId) throws org.apache.thrift.TException
    {
      getSessionUfsTempFolder_args args = new getSessionUfsTempFolder_args();
      args.setSessionId(sessionId);
      sendBase("getSessionUfsTempFolder", args);
    }

    public String recv_getSessionUfsTempFolder() throws org.apache.thrift.TException
    {
      getSessionUfsTempFolder_result result = new getSessionUfsTempFolder_result();
      receiveBase(result, "getSessionUfsTempFolder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSessionUfsTempFolder failed: unknown result");
    }

    public String lockBlock(long blockId, long sessionId) throws FileDoesNotExistException, InvalidWorkerStateException, org.apache.thrift.TException
    {
      send_lockBlock(blockId, sessionId);
      return recv_lockBlock();
    }

    public void send_lockBlock(long blockId, long sessionId) throws org.apache.thrift.TException
    {
      lockBlock_args args = new lockBlock_args();
      args.setBlockId(blockId);
      args.setSessionId(sessionId);
      sendBase("lockBlock", args);
    }

    public String recv_lockBlock() throws FileDoesNotExistException, InvalidWorkerStateException, org.apache.thrift.TException
    {
      lockBlock_result result = new lockBlock_result();
      receiveBase(result, "lockBlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eP != null) {
        throw result.eP;
      }
      if (result.eW != null) {
        throw result.eW;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lockBlock failed: unknown result");
    }

    public boolean promoteBlock(long blockId) throws WorkerOutOfSpaceException, BlockDoesNotExistException, InvalidWorkerStateException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException
    {
      send_promoteBlock(blockId);
      return recv_promoteBlock();
    }

    public void send_promoteBlock(long blockId) throws org.apache.thrift.TException
    {
      promoteBlock_args args = new promoteBlock_args();
      args.setBlockId(blockId);
      sendBase("promoteBlock", args);
    }

    public boolean recv_promoteBlock() throws WorkerOutOfSpaceException, BlockDoesNotExistException, InvalidWorkerStateException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException
    {
      promoteBlock_result result = new promoteBlock_result();
      receiveBase(result, "promoteBlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eWSpace != null) {
        throw result.eWSpace;
      }
      if (result.eDNE != null) {
        throw result.eDNE;
      }
      if (result.eWState != null) {
        throw result.eWState;
      }
      if (result.eAE != null) {
        throw result.eAE;
      }
      if (result.eT != null) {
        throw result.eT;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "promoteBlock failed: unknown result");
    }

    public String requestBlockLocation(long sessionId, long blockId, long initialBytes) throws InvalidWorkerStateException, WorkerOutOfSpaceException, BlockDoesNotExistException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException
    {
      send_requestBlockLocation(sessionId, blockId, initialBytes);
      return recv_requestBlockLocation();
    }

    public void send_requestBlockLocation(long sessionId, long blockId, long initialBytes) throws org.apache.thrift.TException
    {
      requestBlockLocation_args args = new requestBlockLocation_args();
      args.setSessionId(sessionId);
      args.setBlockId(blockId);
      args.setInitialBytes(initialBytes);
      sendBase("requestBlockLocation", args);
    }

    public String recv_requestBlockLocation() throws InvalidWorkerStateException, WorkerOutOfSpaceException, BlockDoesNotExistException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException
    {
      requestBlockLocation_result result = new requestBlockLocation_result();
      receiveBase(result, "requestBlockLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eWState != null) {
        throw result.eWState;
      }
      if (result.eWSpace != null) {
        throw result.eWSpace;
      }
      if (result.eDNE != null) {
        throw result.eDNE;
      }
      if (result.eAE != null) {
        throw result.eAE;
      }
      if (result.eT != null) {
        throw result.eT;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestBlockLocation failed: unknown result");
    }

    public boolean requestSpace(long sessionId, long blockId, long requestBytes) throws org.apache.thrift.TException
    {
      send_requestSpace(sessionId, blockId, requestBytes);
      return recv_requestSpace();
    }

    public void send_requestSpace(long sessionId, long blockId, long requestBytes) throws org.apache.thrift.TException
    {
      requestSpace_args args = new requestSpace_args();
      args.setSessionId(sessionId);
      args.setBlockId(blockId);
      args.setRequestBytes(requestBytes);
      sendBase("requestSpace", args);
    }

    public boolean recv_requestSpace() throws org.apache.thrift.TException
    {
      requestSpace_result result = new requestSpace_result();
      receiveBase(result, "requestSpace");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestSpace failed: unknown result");
    }

    public boolean unlockBlock(long blockId, long sessionId) throws BlockDoesNotExistException, org.apache.thrift.TException
    {
      send_unlockBlock(blockId, sessionId);
      return recv_unlockBlock();
    }

    public void send_unlockBlock(long blockId, long sessionId) throws org.apache.thrift.TException
    {
      unlockBlock_args args = new unlockBlock_args();
      args.setBlockId(blockId);
      args.setSessionId(sessionId);
      sendBase("unlockBlock", args);
    }

    public boolean recv_unlockBlock() throws BlockDoesNotExistException, org.apache.thrift.TException
    {
      unlockBlock_result result = new unlockBlock_result();
      receiveBase(result, "unlockBlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eDNE != null) {
        throw result.eDNE;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unlockBlock failed: unknown result");
    }

    public void sessionHeartbeat(long sessionId, List<Long> metrics) throws org.apache.thrift.TException
    {
      send_sessionHeartbeat(sessionId, metrics);
      recv_sessionHeartbeat();
    }

    public void send_sessionHeartbeat(long sessionId, List<Long> metrics) throws org.apache.thrift.TException
    {
      sessionHeartbeat_args args = new sessionHeartbeat_args();
      args.setSessionId(sessionId);
      args.setMetrics(metrics);
      sendBase("sessionHeartbeat", args);
    }

    public void recv_sessionHeartbeat() throws org.apache.thrift.TException
    {
      sessionHeartbeat_result result = new sessionHeartbeat_result();
      receiveBase(result, "sessionHeartbeat");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void accessBlock(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      accessBlock_call method_call = new accessBlock_call(blockId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class accessBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long blockId;
      public accessBlock_call(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blockId = blockId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("accessBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        accessBlock_args args = new accessBlock_args();
        args.setBlockId(blockId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BlockDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_accessBlock();
      }
    }

    public void addCheckpoint(long sessionId, long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCheckpoint_call method_call = new addCheckpoint_call(sessionId, fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCheckpoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sessionId;
      private long fileId;
      public addCheckpoint_call(long sessionId, long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCheckpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCheckpoint_args args = new addCheckpoint_args();
        args.setSessionId(sessionId);
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FileDoesNotExistException, FailedToCheckpointException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addCheckpoint();
      }
    }

    public void asyncCheckpoint(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      asyncCheckpoint_call method_call = new asyncCheckpoint_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class asyncCheckpoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public asyncCheckpoint_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("asyncCheckpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        asyncCheckpoint_args args = new asyncCheckpoint_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_asyncCheckpoint();
      }
    }

    public void cacheBlock(long sessionId, long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cacheBlock_call method_call = new cacheBlock_call(sessionId, blockId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cacheBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sessionId;
      private long blockId;
      public cacheBlock_call(long sessionId, long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.blockId = blockId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cacheBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cacheBlock_args args = new cacheBlock_args();
        args.setSessionId(sessionId);
        args.setBlockId(blockId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws WorkerOutOfSpaceException, BlockDoesNotExistException, InvalidWorkerStateException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cacheBlock();
      }
    }

    public void cancelBlock(long sessionId, long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelBlock_call method_call = new cancelBlock_call(sessionId, blockId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sessionId;
      private long blockId;
      public cancelBlock_call(long sessionId, long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.blockId = blockId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelBlock_args args = new cancelBlock_args();
        args.setSessionId(sessionId);
        args.setBlockId(blockId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidWorkerStateException, BlockAlreadyExistsException, BlockDoesNotExistException, ThriftIOException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancelBlock();
      }
    }

    public void getSessionUfsTempFolder(long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSessionUfsTempFolder_call method_call = new getSessionUfsTempFolder_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSessionUfsTempFolder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sessionId;
      public getSessionUfsTempFolder_call(long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSessionUfsTempFolder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSessionUfsTempFolder_args args = new getSessionUfsTempFolder_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSessionUfsTempFolder();
      }
    }

    public void lockBlock(long blockId, long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lockBlock_call method_call = new lockBlock_call(blockId, sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lockBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long blockId;
      private long sessionId;
      public lockBlock_call(long blockId, long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blockId = blockId;
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lockBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lockBlock_args args = new lockBlock_args();
        args.setBlockId(blockId);
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws FileDoesNotExistException, InvalidWorkerStateException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lockBlock();
      }
    }

    public void promoteBlock(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      promoteBlock_call method_call = new promoteBlock_call(blockId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class promoteBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long blockId;
      public promoteBlock_call(long blockId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blockId = blockId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("promoteBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        promoteBlock_args args = new promoteBlock_args();
        args.setBlockId(blockId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws WorkerOutOfSpaceException, BlockDoesNotExistException, InvalidWorkerStateException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_promoteBlock();
      }
    }

    public void requestBlockLocation(long sessionId, long blockId, long initialBytes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestBlockLocation_call method_call = new requestBlockLocation_call(sessionId, blockId, initialBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestBlockLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sessionId;
      private long blockId;
      private long initialBytes;
      public requestBlockLocation_call(long sessionId, long blockId, long initialBytes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.blockId = blockId;
        this.initialBytes = initialBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestBlockLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestBlockLocation_args args = new requestBlockLocation_args();
        args.setSessionId(sessionId);
        args.setBlockId(blockId);
        args.setInitialBytes(initialBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws InvalidWorkerStateException, WorkerOutOfSpaceException, BlockDoesNotExistException, BlockAlreadyExistsException, ThriftIOException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestBlockLocation();
      }
    }

    public void requestSpace(long sessionId, long blockId, long requestBytes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestSpace_call method_call = new requestSpace_call(sessionId, blockId, requestBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestSpace_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sessionId;
      private long blockId;
      private long requestBytes;
      public requestSpace_call(long sessionId, long blockId, long requestBytes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.blockId = blockId;
        this.requestBytes = requestBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestSpace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestSpace_args args = new requestSpace_args();
        args.setSessionId(sessionId);
        args.setBlockId(blockId);
        args.setRequestBytes(requestBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestSpace();
      }
    }

    public void unlockBlock(long blockId, long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unlockBlock_call method_call = new unlockBlock_call(blockId, sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unlockBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long blockId;
      private long sessionId;
      public unlockBlock_call(long blockId, long sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blockId = blockId;
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unlockBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unlockBlock_args args = new unlockBlock_args();
        args.setBlockId(blockId);
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BlockDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unlockBlock();
      }
    }

    public void sessionHeartbeat(long sessionId, List<Long> metrics, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sessionHeartbeat_call method_call = new sessionHeartbeat_call(sessionId, metrics, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sessionHeartbeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sessionId;
      private List<Long> metrics;
      public sessionHeartbeat_call(long sessionId, List<Long> metrics, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.metrics = metrics;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sessionHeartbeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sessionHeartbeat_args args = new sessionHeartbeat_args();
        args.setSessionId(sessionId);
        args.setMetrics(metrics);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sessionHeartbeat();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("accessBlock", new accessBlock());
      processMap.put("addCheckpoint", new addCheckpoint());
      processMap.put("asyncCheckpoint", new asyncCheckpoint());
      processMap.put("cacheBlock", new cacheBlock());
      processMap.put("cancelBlock", new cancelBlock());
      processMap.put("getSessionUfsTempFolder", new getSessionUfsTempFolder());
      processMap.put("lockBlock", new lockBlock());
      processMap.put("promoteBlock", new promoteBlock());
      processMap.put("requestBlockLocation", new requestBlockLocation());
      processMap.put("requestSpace", new requestSpace());
      processMap.put("unlockBlock", new unlockBlock());
      processMap.put("sessionHeartbeat", new sessionHeartbeat());
      return processMap;
    }

    public static class accessBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, accessBlock_args> {
      public accessBlock() {
        super("accessBlock");
      }

      public accessBlock_args getEmptyArgsInstance() {
        return new accessBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public accessBlock_result getResult(I iface, accessBlock_args args) throws org.apache.thrift.TException {
        accessBlock_result result = new accessBlock_result();
        try {
          iface.accessBlock(args.blockId);
        } catch (BlockDoesNotExistException bE) {
          result.bE = bE;
        }
        return result;
      }
    }

    public static class addCheckpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCheckpoint_args> {
      public addCheckpoint() {
        super("addCheckpoint");
      }

      public addCheckpoint_args getEmptyArgsInstance() {
        return new addCheckpoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addCheckpoint_result getResult(I iface, addCheckpoint_args args) throws org.apache.thrift.TException {
        addCheckpoint_result result = new addCheckpoint_result();
        try {
          iface.addCheckpoint(args.sessionId, args.fileId);
        } catch (FileDoesNotExistException eP) {
          result.eP = eP;
        } catch (FailedToCheckpointException eF) {
          result.eF = eF;
        }
        return result;
      }
    }

    public static class asyncCheckpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, asyncCheckpoint_args> {
      public asyncCheckpoint() {
        super("asyncCheckpoint");
      }

      public asyncCheckpoint_args getEmptyArgsInstance() {
        return new asyncCheckpoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public asyncCheckpoint_result getResult(I iface, asyncCheckpoint_args args) throws org.apache.thrift.TException {
        asyncCheckpoint_result result = new asyncCheckpoint_result();
        result.success = iface.asyncCheckpoint(args.fileId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class cacheBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cacheBlock_args> {
      public cacheBlock() {
        super("cacheBlock");
      }

      public cacheBlock_args getEmptyArgsInstance() {
        return new cacheBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cacheBlock_result getResult(I iface, cacheBlock_args args) throws org.apache.thrift.TException {
        cacheBlock_result result = new cacheBlock_result();
        try {
          iface.cacheBlock(args.sessionId, args.blockId);
        } catch (WorkerOutOfSpaceException eW) {
          result.eW = eW;
        } catch (BlockDoesNotExistException eDNE) {
          result.eDNE = eDNE;
        } catch (InvalidWorkerStateException iW) {
          result.iW = iW;
        } catch (BlockAlreadyExistsException eAE) {
          result.eAE = eAE;
        } catch (ThriftIOException eT) {
          result.eT = eT;
        }
        return result;
      }
    }

    public static class cancelBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelBlock_args> {
      public cancelBlock() {
        super("cancelBlock");
      }

      public cancelBlock_args getEmptyArgsInstance() {
        return new cancelBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelBlock_result getResult(I iface, cancelBlock_args args) throws org.apache.thrift.TException {
        cancelBlock_result result = new cancelBlock_result();
        try {
          iface.cancelBlock(args.sessionId, args.blockId);
        } catch (InvalidWorkerStateException eW) {
          result.eW = eW;
        } catch (BlockAlreadyExistsException eAE) {
          result.eAE = eAE;
        } catch (BlockDoesNotExistException eDNE) {
          result.eDNE = eDNE;
        } catch (ThriftIOException eT) {
          result.eT = eT;
        }
        return result;
      }
    }

    public static class getSessionUfsTempFolder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSessionUfsTempFolder_args> {
      public getSessionUfsTempFolder() {
        super("getSessionUfsTempFolder");
      }

      public getSessionUfsTempFolder_args getEmptyArgsInstance() {
        return new getSessionUfsTempFolder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSessionUfsTempFolder_result getResult(I iface, getSessionUfsTempFolder_args args) throws org.apache.thrift.TException {
        getSessionUfsTempFolder_result result = new getSessionUfsTempFolder_result();
        result.success = iface.getSessionUfsTempFolder(args.sessionId);
        return result;
      }
    }

    public static class lockBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lockBlock_args> {
      public lockBlock() {
        super("lockBlock");
      }

      public lockBlock_args getEmptyArgsInstance() {
        return new lockBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lockBlock_result getResult(I iface, lockBlock_args args) throws org.apache.thrift.TException {
        lockBlock_result result = new lockBlock_result();
        try {
          result.success = iface.lockBlock(args.blockId, args.sessionId);
        } catch (FileDoesNotExistException eP) {
          result.eP = eP;
        } catch (InvalidWorkerStateException eW) {
          result.eW = eW;
        }
        return result;
      }
    }

    public static class promoteBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, promoteBlock_args> {
      public promoteBlock() {
        super("promoteBlock");
      }

      public promoteBlock_args getEmptyArgsInstance() {
        return new promoteBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public promoteBlock_result getResult(I iface, promoteBlock_args args) throws org.apache.thrift.TException {
        promoteBlock_result result = new promoteBlock_result();
        try {
          result.success = iface.promoteBlock(args.blockId);
          result.setSuccessIsSet(true);
        } catch (WorkerOutOfSpaceException eWSpace) {
          result.eWSpace = eWSpace;
        } catch (BlockDoesNotExistException eDNE) {
          result.eDNE = eDNE;
        } catch (InvalidWorkerStateException eWState) {
          result.eWState = eWState;
        } catch (BlockAlreadyExistsException eAE) {
          result.eAE = eAE;
        } catch (ThriftIOException eT) {
          result.eT = eT;
        }
        return result;
      }
    }

    public static class requestBlockLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestBlockLocation_args> {
      public requestBlockLocation() {
        super("requestBlockLocation");
      }

      public requestBlockLocation_args getEmptyArgsInstance() {
        return new requestBlockLocation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestBlockLocation_result getResult(I iface, requestBlockLocation_args args) throws org.apache.thrift.TException {
        requestBlockLocation_result result = new requestBlockLocation_result();
        try {
          result.success = iface.requestBlockLocation(args.sessionId, args.blockId, args.initialBytes);
        } catch (InvalidWorkerStateException eWState) {
          result.eWState = eWState;
        } catch (WorkerOutOfSpaceException eWSpace) {
          result.eWSpace = eWSpace;
        } catch (BlockDoesNotExistException eDNE) {
          result.eDNE = eDNE;
        } catch (BlockAlreadyExistsException eAE) {
          result.eAE = eAE;
        } catch (ThriftIOException eT) {
          result.eT = eT;
        }
        return result;
      }
    }

    public static class requestSpace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestSpace_args> {
      public requestSpace() {
        super("requestSpace");
      }

      public requestSpace_args getEmptyArgsInstance() {
        return new requestSpace_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestSpace_result getResult(I iface, requestSpace_args args) throws org.apache.thrift.TException {
        requestSpace_result result = new requestSpace_result();
        result.success = iface.requestSpace(args.sessionId, args.blockId, args.requestBytes);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class unlockBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unlockBlock_args> {
      public unlockBlock() {
        super("unlockBlock");
      }

      public unlockBlock_args getEmptyArgsInstance() {
        return new unlockBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unlockBlock_result getResult(I iface, unlockBlock_args args) throws org.apache.thrift.TException {
        unlockBlock_result result = new unlockBlock_result();
        try {
          result.success = iface.unlockBlock(args.blockId, args.sessionId);
          result.setSuccessIsSet(true);
        } catch (BlockDoesNotExistException eDNE) {
          result.eDNE = eDNE;
        }
        return result;
      }
    }

    public static class sessionHeartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sessionHeartbeat_args> {
      public sessionHeartbeat() {
        super("sessionHeartbeat");
      }

      public sessionHeartbeat_args getEmptyArgsInstance() {
        return new sessionHeartbeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sessionHeartbeat_result getResult(I iface, sessionHeartbeat_args args) throws org.apache.thrift.TException {
        sessionHeartbeat_result result = new sessionHeartbeat_result();
        iface.sessionHeartbeat(args.sessionId, args.metrics);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("accessBlock", new accessBlock());
      processMap.put("addCheckpoint", new addCheckpoint());
      processMap.put("asyncCheckpoint", new asyncCheckpoint());
      processMap.put("cacheBlock", new cacheBlock());
      processMap.put("cancelBlock", new cancelBlock());
      processMap.put("getSessionUfsTempFolder", new getSessionUfsTempFolder());
      processMap.put("lockBlock", new lockBlock());
      processMap.put("promoteBlock", new promoteBlock());
      processMap.put("requestBlockLocation", new requestBlockLocation());
      processMap.put("requestSpace", new requestSpace());
      processMap.put("unlockBlock", new unlockBlock());
      processMap.put("sessionHeartbeat", new sessionHeartbeat());
      return processMap;
    }

    public static class accessBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, accessBlock_args, Void> {
      public accessBlock() {
        super("accessBlock");
      }

      public accessBlock_args getEmptyArgsInstance() {
        return new accessBlock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            accessBlock_result result = new accessBlock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            accessBlock_result result = new accessBlock_result();
            if (e instanceof BlockDoesNotExistException) {
                        result.bE = (BlockDoesNotExistException) e;
                        result.setBEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, accessBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.accessBlock(args.blockId,resultHandler);
      }
    }

    public static class addCheckpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCheckpoint_args, Void> {
      public addCheckpoint() {
        super("addCheckpoint");
      }

      public addCheckpoint_args getEmptyArgsInstance() {
        return new addCheckpoint_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addCheckpoint_result result = new addCheckpoint_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addCheckpoint_result result = new addCheckpoint_result();
            if (e instanceof FileDoesNotExistException) {
                        result.eP = (FileDoesNotExistException) e;
                        result.setEPIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FailedToCheckpointException) {
                        result.eF = (FailedToCheckpointException) e;
                        result.setEFIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCheckpoint_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addCheckpoint(args.sessionId, args.fileId,resultHandler);
      }
    }

    public static class asyncCheckpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, asyncCheckpoint_args, Boolean> {
      public asyncCheckpoint() {
        super("asyncCheckpoint");
      }

      public asyncCheckpoint_args getEmptyArgsInstance() {
        return new asyncCheckpoint_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            asyncCheckpoint_result result = new asyncCheckpoint_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            asyncCheckpoint_result result = new asyncCheckpoint_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, asyncCheckpoint_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.asyncCheckpoint(args.fileId,resultHandler);
      }
    }

    public static class cacheBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cacheBlock_args, Void> {
      public cacheBlock() {
        super("cacheBlock");
      }

      public cacheBlock_args getEmptyArgsInstance() {
        return new cacheBlock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            cacheBlock_result result = new cacheBlock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cacheBlock_result result = new cacheBlock_result();
            if (e instanceof WorkerOutOfSpaceException) {
                        result.eW = (WorkerOutOfSpaceException) e;
                        result.setEWIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockDoesNotExistException) {
                        result.eDNE = (BlockDoesNotExistException) e;
                        result.setEDNEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidWorkerStateException) {
                        result.iW = (InvalidWorkerStateException) e;
                        result.setIWIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockAlreadyExistsException) {
                        result.eAE = (BlockAlreadyExistsException) e;
                        result.setEAEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftIOException) {
                        result.eT = (ThriftIOException) e;
                        result.setETIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cacheBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.cacheBlock(args.sessionId, args.blockId,resultHandler);
      }
    }

    public static class cancelBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelBlock_args, Void> {
      public cancelBlock() {
        super("cancelBlock");
      }

      public cancelBlock_args getEmptyArgsInstance() {
        return new cancelBlock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            cancelBlock_result result = new cancelBlock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelBlock_result result = new cancelBlock_result();
            if (e instanceof InvalidWorkerStateException) {
                        result.eW = (InvalidWorkerStateException) e;
                        result.setEWIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockAlreadyExistsException) {
                        result.eAE = (BlockAlreadyExistsException) e;
                        result.setEAEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockDoesNotExistException) {
                        result.eDNE = (BlockDoesNotExistException) e;
                        result.setEDNEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftIOException) {
                        result.eT = (ThriftIOException) e;
                        result.setETIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.cancelBlock(args.sessionId, args.blockId,resultHandler);
      }
    }

    public static class getSessionUfsTempFolder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSessionUfsTempFolder_args, String> {
      public getSessionUfsTempFolder() {
        super("getSessionUfsTempFolder");
      }

      public getSessionUfsTempFolder_args getEmptyArgsInstance() {
        return new getSessionUfsTempFolder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getSessionUfsTempFolder_result result = new getSessionUfsTempFolder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSessionUfsTempFolder_result result = new getSessionUfsTempFolder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSessionUfsTempFolder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getSessionUfsTempFolder(args.sessionId,resultHandler);
      }
    }

    public static class lockBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lockBlock_args, String> {
      public lockBlock() {
        super("lockBlock");
      }

      public lockBlock_args getEmptyArgsInstance() {
        return new lockBlock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            lockBlock_result result = new lockBlock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lockBlock_result result = new lockBlock_result();
            if (e instanceof FileDoesNotExistException) {
                        result.eP = (FileDoesNotExistException) e;
                        result.setEPIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidWorkerStateException) {
                        result.eW = (InvalidWorkerStateException) e;
                        result.setEWIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lockBlock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.lockBlock(args.blockId, args.sessionId,resultHandler);
      }
    }

    public static class promoteBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, promoteBlock_args, Boolean> {
      public promoteBlock() {
        super("promoteBlock");
      }

      public promoteBlock_args getEmptyArgsInstance() {
        return new promoteBlock_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            promoteBlock_result result = new promoteBlock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            promoteBlock_result result = new promoteBlock_result();
            if (e instanceof WorkerOutOfSpaceException) {
                        result.eWSpace = (WorkerOutOfSpaceException) e;
                        result.setEWSpaceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockDoesNotExistException) {
                        result.eDNE = (BlockDoesNotExistException) e;
                        result.setEDNEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidWorkerStateException) {
                        result.eWState = (InvalidWorkerStateException) e;
                        result.setEWStateIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockAlreadyExistsException) {
                        result.eAE = (BlockAlreadyExistsException) e;
                        result.setEAEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftIOException) {
                        result.eT = (ThriftIOException) e;
                        result.setETIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, promoteBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.promoteBlock(args.blockId,resultHandler);
      }
    }

    public static class requestBlockLocation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestBlockLocation_args, String> {
      public requestBlockLocation() {
        super("requestBlockLocation");
      }

      public requestBlockLocation_args getEmptyArgsInstance() {
        return new requestBlockLocation_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            requestBlockLocation_result result = new requestBlockLocation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            requestBlockLocation_result result = new requestBlockLocation_result();
            if (e instanceof InvalidWorkerStateException) {
                        result.eWState = (InvalidWorkerStateException) e;
                        result.setEWStateIsSet(true);
                        msg = result;
            }
            else             if (e instanceof WorkerOutOfSpaceException) {
                        result.eWSpace = (WorkerOutOfSpaceException) e;
                        result.setEWSpaceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockDoesNotExistException) {
                        result.eDNE = (BlockDoesNotExistException) e;
                        result.setEDNEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BlockAlreadyExistsException) {
                        result.eAE = (BlockAlreadyExistsException) e;
                        result.setEAEIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ThriftIOException) {
                        result.eT = (ThriftIOException) e;
                        result.setETIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestBlockLocation_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.requestBlockLocation(args.sessionId, args.blockId, args.initialBytes,resultHandler);
      }
    }

    public static class requestSpace<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestSpace_args, Boolean> {
      public requestSpace() {
        super("requestSpace");
      }

      public requestSpace_args getEmptyArgsInstance() {
        return new requestSpace_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            requestSpace_result result = new requestSpace_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            requestSpace_result result = new requestSpace_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestSpace_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.requestSpace(args.sessionId, args.blockId, args.requestBytes,resultHandler);
      }
    }

    public static class unlockBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unlockBlock_args, Boolean> {
      public unlockBlock() {
        super("unlockBlock");
      }

      public unlockBlock_args getEmptyArgsInstance() {
        return new unlockBlock_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            unlockBlock_result result = new unlockBlock_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unlockBlock_result result = new unlockBlock_result();
            if (e instanceof BlockDoesNotExistException) {
                        result.eDNE = (BlockDoesNotExistException) e;
                        result.setEDNEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unlockBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.unlockBlock(args.blockId, args.sessionId,resultHandler);
      }
    }

    public static class sessionHeartbeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sessionHeartbeat_args, Void> {
      public sessionHeartbeat() {
        super("sessionHeartbeat");
      }

      public sessionHeartbeat_args getEmptyArgsInstance() {
        return new sessionHeartbeat_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sessionHeartbeat_result result = new sessionHeartbeat_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sessionHeartbeat_result result = new sessionHeartbeat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sessionHeartbeat_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sessionHeartbeat(args.sessionId, args.metrics,resultHandler);
      }
    }

  }

  public static class accessBlock_args implements org.apache.thrift.TBase<accessBlock_args, accessBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<accessBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accessBlock_args");

    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new accessBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new accessBlock_argsTupleSchemeFactory());
    }

    public long blockId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_ID((short)1, "blockId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_ID
            return BLOCK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accessBlock_args.class, metaDataMap);
    }

    public accessBlock_args() {
    }

    public accessBlock_args(
      long blockId)
    {
      this();
      this.blockId = blockId;
      setBlockIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public accessBlock_args(accessBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.blockId = other.blockId;
    }

    public accessBlock_args deepCopy() {
      return new accessBlock_args(this);
    }

    @Override
    public void clear() {
      setBlockIdIsSet(false);
      this.blockId = 0;
    }

    public long getBlockId() {
      return this.blockId;
    }

    public accessBlock_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_ID:
        return isSetBlockId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof accessBlock_args)
        return this.equals((accessBlock_args)that);
      return false;
    }

    public boolean equals(accessBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      return list.hashCode();
    }

    @Override
    public int compareTo(accessBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("accessBlock_args(");
      boolean first = true;

      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class accessBlock_argsStandardSchemeFactory implements SchemeFactory {
      public accessBlock_argsStandardScheme getScheme() {
        return new accessBlock_argsStandardScheme();
      }
    }

    private static class accessBlock_argsStandardScheme extends StandardScheme<accessBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, accessBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, accessBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class accessBlock_argsTupleSchemeFactory implements SchemeFactory {
      public accessBlock_argsTupleScheme getScheme() {
        return new accessBlock_argsTupleScheme();
      }
    }

    private static class accessBlock_argsTupleScheme extends TupleScheme<accessBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, accessBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlockId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, accessBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
      }
    }

  }

  public static class accessBlock_result implements org.apache.thrift.TBase<accessBlock_result, accessBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<accessBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accessBlock_result");

    private static final org.apache.thrift.protocol.TField B_E_FIELD_DESC = new org.apache.thrift.protocol.TField("bE", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new accessBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new accessBlock_resultTupleSchemeFactory());
    }

    public BlockDoesNotExistException bE; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      B_E((short)1, "bE");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // B_E
            return B_E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.B_E, new org.apache.thrift.meta_data.FieldMetaData("bE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accessBlock_result.class, metaDataMap);
    }

    public accessBlock_result() {
    }

    public accessBlock_result(
      BlockDoesNotExistException bE)
    {
      this();
      this.bE = bE;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public accessBlock_result(accessBlock_result other) {
      if (other.isSetBE()) {
        this.bE = new BlockDoesNotExistException(other.bE);
      }
    }

    public accessBlock_result deepCopy() {
      return new accessBlock_result(this);
    }

    @Override
    public void clear() {
      this.bE = null;
    }

    public BlockDoesNotExistException getBE() {
      return this.bE;
    }

    public accessBlock_result setBE(BlockDoesNotExistException bE) {
      this.bE = bE;
      return this;
    }

    public void unsetBE() {
      this.bE = null;
    }

    /** Returns true if field bE is set (has been assigned a value) and false otherwise */
    public boolean isSetBE() {
      return this.bE != null;
    }

    public void setBEIsSet(boolean value) {
      if (!value) {
        this.bE = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case B_E:
        if (value == null) {
          unsetBE();
        } else {
          setBE((BlockDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case B_E:
        return getBE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case B_E:
        return isSetBE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof accessBlock_result)
        return this.equals((accessBlock_result)that);
      return false;
    }

    public boolean equals(accessBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_bE = true && this.isSetBE();
      boolean that_present_bE = true && that.isSetBE();
      if (this_present_bE || that_present_bE) {
        if (!(this_present_bE && that_present_bE))
          return false;
        if (!this.bE.equals(that.bE))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bE = true && (isSetBE());
      list.add(present_bE);
      if (present_bE)
        list.add(bE);

      return list.hashCode();
    }

    @Override
    public int compareTo(accessBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBE()).compareTo(other.isSetBE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bE, other.bE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("accessBlock_result(");
      boolean first = true;

      sb.append("bE:");
      if (this.bE == null) {
        sb.append("null");
      } else {
        sb.append(this.bE);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class accessBlock_resultStandardSchemeFactory implements SchemeFactory {
      public accessBlock_resultStandardScheme getScheme() {
        return new accessBlock_resultStandardScheme();
      }
    }

    private static class accessBlock_resultStandardScheme extends StandardScheme<accessBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, accessBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // B_E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bE = new BlockDoesNotExistException();
                struct.bE.read(iprot);
                struct.setBEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, accessBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bE != null) {
          oprot.writeFieldBegin(B_E_FIELD_DESC);
          struct.bE.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class accessBlock_resultTupleSchemeFactory implements SchemeFactory {
      public accessBlock_resultTupleScheme getScheme() {
        return new accessBlock_resultTupleScheme();
      }
    }

    private static class accessBlock_resultTupleScheme extends TupleScheme<accessBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, accessBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBE()) {
          struct.bE.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, accessBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bE = new BlockDoesNotExistException();
          struct.bE.read(iprot);
          struct.setBEIsSet(true);
        }
      }
    }

  }

  public static class addCheckpoint_args implements org.apache.thrift.TBase<addCheckpoint_args, addCheckpoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCheckpoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCheckpoint_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCheckpoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCheckpoint_argsTupleSchemeFactory());
    }

    public long sessionId; // required
    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      FILE_ID((short)2, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private static final int __FILEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCheckpoint_args.class, metaDataMap);
    }

    public addCheckpoint_args() {
    }

    public addCheckpoint_args(
      long sessionId,
      long fileId)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCheckpoint_args(addCheckpoint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionId = other.sessionId;
      this.fileId = other.fileId;
    }

    public addCheckpoint_args deepCopy() {
      return new addCheckpoint_args(this);
    }

    @Override
    public void clear() {
      setSessionIdIsSet(false);
      this.sessionId = 0;
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public addCheckpoint_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public long getFileId() {
      return this.fileId;
    }

    public addCheckpoint_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Long.valueOf(getSessionId());

      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCheckpoint_args)
        return this.equals((addCheckpoint_args)that);
      return false;
    }

    public boolean equals(addCheckpoint_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCheckpoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCheckpoint_args(");
      boolean first = true;

      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCheckpoint_argsStandardSchemeFactory implements SchemeFactory {
      public addCheckpoint_argsStandardScheme getScheme() {
        return new addCheckpoint_argsStandardScheme();
      }
    }

    private static class addCheckpoint_argsStandardScheme extends StandardScheme<addCheckpoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCheckpoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCheckpoint_argsTupleSchemeFactory implements SchemeFactory {
      public addCheckpoint_argsTupleScheme getScheme() {
        return new addCheckpoint_argsTupleScheme();
      }
    }

    private static class addCheckpoint_argsTupleScheme extends TupleScheme<addCheckpoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCheckpoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetFileId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCheckpoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class addCheckpoint_result implements org.apache.thrift.TBase<addCheckpoint_result, addCheckpoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCheckpoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCheckpoint_result");

    private static final org.apache.thrift.protocol.TField E_P_FIELD_DESC = new org.apache.thrift.protocol.TField("eP", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_F_FIELD_DESC = new org.apache.thrift.protocol.TField("eF", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCheckpoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCheckpoint_resultTupleSchemeFactory());
    }

    public FileDoesNotExistException eP; // required
    public FailedToCheckpointException eF; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E_P((short)1, "eP"),
      E_F((short)2, "eF");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E_P
            return E_P;
          case 2: // E_F
            return E_F;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E_P, new org.apache.thrift.meta_data.FieldMetaData("eP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_F, new org.apache.thrift.meta_data.FieldMetaData("eF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCheckpoint_result.class, metaDataMap);
    }

    public addCheckpoint_result() {
    }

    public addCheckpoint_result(
      FileDoesNotExistException eP,
      FailedToCheckpointException eF)
    {
      this();
      this.eP = eP;
      this.eF = eF;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCheckpoint_result(addCheckpoint_result other) {
      if (other.isSetEP()) {
        this.eP = new FileDoesNotExistException(other.eP);
      }
      if (other.isSetEF()) {
        this.eF = new FailedToCheckpointException(other.eF);
      }
    }

    public addCheckpoint_result deepCopy() {
      return new addCheckpoint_result(this);
    }

    @Override
    public void clear() {
      this.eP = null;
      this.eF = null;
    }

    public FileDoesNotExistException getEP() {
      return this.eP;
    }

    public addCheckpoint_result setEP(FileDoesNotExistException eP) {
      this.eP = eP;
      return this;
    }

    public void unsetEP() {
      this.eP = null;
    }

    /** Returns true if field eP is set (has been assigned a value) and false otherwise */
    public boolean isSetEP() {
      return this.eP != null;
    }

    public void setEPIsSet(boolean value) {
      if (!value) {
        this.eP = null;
      }
    }

    public FailedToCheckpointException getEF() {
      return this.eF;
    }

    public addCheckpoint_result setEF(FailedToCheckpointException eF) {
      this.eF = eF;
      return this;
    }

    public void unsetEF() {
      this.eF = null;
    }

    /** Returns true if field eF is set (has been assigned a value) and false otherwise */
    public boolean isSetEF() {
      return this.eF != null;
    }

    public void setEFIsSet(boolean value) {
      if (!value) {
        this.eF = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E_P:
        if (value == null) {
          unsetEP();
        } else {
          setEP((FileDoesNotExistException)value);
        }
        break;

      case E_F:
        if (value == null) {
          unsetEF();
        } else {
          setEF((FailedToCheckpointException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E_P:
        return getEP();

      case E_F:
        return getEF();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E_P:
        return isSetEP();
      case E_F:
        return isSetEF();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCheckpoint_result)
        return this.equals((addCheckpoint_result)that);
      return false;
    }

    public boolean equals(addCheckpoint_result that) {
      if (that == null)
        return false;

      boolean this_present_eP = true && this.isSetEP();
      boolean that_present_eP = true && that.isSetEP();
      if (this_present_eP || that_present_eP) {
        if (!(this_present_eP && that_present_eP))
          return false;
        if (!this.eP.equals(that.eP))
          return false;
      }

      boolean this_present_eF = true && this.isSetEF();
      boolean that_present_eF = true && that.isSetEF();
      if (this_present_eF || that_present_eF) {
        if (!(this_present_eF && that_present_eF))
          return false;
        if (!this.eF.equals(that.eF))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_eP = true && (isSetEP());
      list.add(present_eP);
      if (present_eP)
        list.add(eP);

      boolean present_eF = true && (isSetEF());
      list.add(present_eF);
      if (present_eF)
        list.add(eF);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCheckpoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEP()).compareTo(other.isSetEP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eP, other.eP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEF()).compareTo(other.isSetEF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eF, other.eF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCheckpoint_result(");
      boolean first = true;

      sb.append("eP:");
      if (this.eP == null) {
        sb.append("null");
      } else {
        sb.append(this.eP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eF:");
      if (this.eF == null) {
        sb.append("null");
      } else {
        sb.append(this.eF);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCheckpoint_resultStandardSchemeFactory implements SchemeFactory {
      public addCheckpoint_resultStandardScheme getScheme() {
        return new addCheckpoint_resultStandardScheme();
      }
    }

    private static class addCheckpoint_resultStandardScheme extends StandardScheme<addCheckpoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E_P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eP = new FileDoesNotExistException();
                struct.eP.read(iprot);
                struct.setEPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_F
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eF = new FailedToCheckpointException();
                struct.eF.read(iprot);
                struct.setEFIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCheckpoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eP != null) {
          oprot.writeFieldBegin(E_P_FIELD_DESC);
          struct.eP.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eF != null) {
          oprot.writeFieldBegin(E_F_FIELD_DESC);
          struct.eF.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCheckpoint_resultTupleSchemeFactory implements SchemeFactory {
      public addCheckpoint_resultTupleScheme getScheme() {
        return new addCheckpoint_resultTupleScheme();
      }
    }

    private static class addCheckpoint_resultTupleScheme extends TupleScheme<addCheckpoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCheckpoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEP()) {
          optionals.set(0);
        }
        if (struct.isSetEF()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEP()) {
          struct.eP.write(oprot);
        }
        if (struct.isSetEF()) {
          struct.eF.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCheckpoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.eP = new FileDoesNotExistException();
          struct.eP.read(iprot);
          struct.setEPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eF = new FailedToCheckpointException();
          struct.eF.read(iprot);
          struct.setEFIsSet(true);
        }
      }
    }

  }

  public static class asyncCheckpoint_args implements org.apache.thrift.TBase<asyncCheckpoint_args, asyncCheckpoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<asyncCheckpoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asyncCheckpoint_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new asyncCheckpoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new asyncCheckpoint_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asyncCheckpoint_args.class, metaDataMap);
    }

    public asyncCheckpoint_args() {
    }

    public asyncCheckpoint_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public asyncCheckpoint_args(asyncCheckpoint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public asyncCheckpoint_args deepCopy() {
      return new asyncCheckpoint_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public asyncCheckpoint_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof asyncCheckpoint_args)
        return this.equals((asyncCheckpoint_args)that);
      return false;
    }

    public boolean equals(asyncCheckpoint_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileId = true;
      list.add(present_fileId);
      if (present_fileId)
        list.add(fileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(asyncCheckpoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("asyncCheckpoint_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class asyncCheckpoint_argsStandardSchemeFactory implements SchemeFactory {
      public asyncCheckpoint_argsStandardScheme getScheme() {
        return new asyncCheckpoint_argsStandardScheme();
      }
    }

    private static class asyncCheckpoint_argsStandardScheme extends StandardScheme<asyncCheckpoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, asyncCheckpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, asyncCheckpoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class asyncCheckpoint_argsTupleSchemeFactory implements SchemeFactory {
      public asyncCheckpoint_argsTupleScheme getScheme() {
        return new asyncCheckpoint_argsTupleScheme();
      }
    }

    private static class asyncCheckpoint_argsTupleScheme extends TupleScheme<asyncCheckpoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, asyncCheckpoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, asyncCheckpoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class asyncCheckpoint_result implements org.apache.thrift.TBase<asyncCheckpoint_result, asyncCheckpoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<asyncCheckpoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asyncCheckpoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new asyncCheckpoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new asyncCheckpoint_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asyncCheckpoint_result.class, metaDataMap);
    }

    public asyncCheckpoint_result() {
    }

    public asyncCheckpoint_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public asyncCheckpoint_result(asyncCheckpoint_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public asyncCheckpoint_result deepCopy() {
      return new asyncCheckpoint_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public asyncCheckpoint_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof asyncCheckpoint_result)
        return this.equals((asyncCheckpoint_result)that);
      return false;
    }

    public boolean equals(asyncCheckpoint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(asyncCheckpoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("asyncCheckpoint_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class asyncCheckpoint_resultStandardSchemeFactory implements SchemeFactory {
      public asyncCheckpoint_resultStandardScheme getScheme() {
        return new asyncCheckpoint_resultStandardScheme();
      }
    }

    private static class asyncCheckpoint_resultStandardScheme extends StandardScheme<asyncCheckpoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, asyncCheckpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, asyncCheckpoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class asyncCheckpoint_resultTupleSchemeFactory implements SchemeFactory {
      public asyncCheckpoint_resultTupleScheme getScheme() {
        return new asyncCheckpoint_resultTupleScheme();
      }
    }

    private static class asyncCheckpoint_resultTupleScheme extends TupleScheme<asyncCheckpoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, asyncCheckpoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, asyncCheckpoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cacheBlock_args implements org.apache.thrift.TBase<cacheBlock_args, cacheBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<cacheBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cacheBlock_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cacheBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cacheBlock_argsTupleSchemeFactory());
    }

    public long sessionId; // required
    public long blockId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      BLOCK_ID((short)2, "blockId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // BLOCK_ID
            return BLOCK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private static final int __BLOCKID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cacheBlock_args.class, metaDataMap);
    }

    public cacheBlock_args() {
    }

    public cacheBlock_args(
      long sessionId,
      long blockId)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.blockId = blockId;
      setBlockIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cacheBlock_args(cacheBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionId = other.sessionId;
      this.blockId = other.blockId;
    }

    public cacheBlock_args deepCopy() {
      return new cacheBlock_args(this);
    }

    @Override
    public void clear() {
      setSessionIdIsSet(false);
      this.sessionId = 0;
      setBlockIdIsSet(false);
      this.blockId = 0;
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public cacheBlock_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public long getBlockId() {
      return this.blockId;
    }

    public cacheBlock_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Long.valueOf(getSessionId());

      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case BLOCK_ID:
        return isSetBlockId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cacheBlock_args)
        return this.equals((cacheBlock_args)that);
      return false;
    }

    public boolean equals(cacheBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      return list.hashCode();
    }

    @Override
    public int compareTo(cacheBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cacheBlock_args(");
      boolean first = true;

      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cacheBlock_argsStandardSchemeFactory implements SchemeFactory {
      public cacheBlock_argsStandardScheme getScheme() {
        return new cacheBlock_argsStandardScheme();
      }
    }

    private static class cacheBlock_argsStandardScheme extends StandardScheme<cacheBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cacheBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cacheBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cacheBlock_argsTupleSchemeFactory implements SchemeFactory {
      public cacheBlock_argsTupleScheme getScheme() {
        return new cacheBlock_argsTupleScheme();
      }
    }

    private static class cacheBlock_argsTupleScheme extends TupleScheme<cacheBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cacheBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetBlockId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cacheBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
      }
    }

  }

  public static class cacheBlock_result implements org.apache.thrift.TBase<cacheBlock_result, cacheBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<cacheBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cacheBlock_result");

    private static final org.apache.thrift.protocol.TField E_W_FIELD_DESC = new org.apache.thrift.protocol.TField("eW", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_DNE_FIELD_DESC = new org.apache.thrift.protocol.TField("eDNE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField I_W_FIELD_DESC = new org.apache.thrift.protocol.TField("iW", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_AE_FIELD_DESC = new org.apache.thrift.protocol.TField("eAE", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_T_FIELD_DESC = new org.apache.thrift.protocol.TField("eT", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cacheBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cacheBlock_resultTupleSchemeFactory());
    }

    public WorkerOutOfSpaceException eW; // required
    public BlockDoesNotExistException eDNE; // required
    public InvalidWorkerStateException iW; // required
    public BlockAlreadyExistsException eAE; // required
    public ThriftIOException eT; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E_W((short)1, "eW"),
      E_DNE((short)2, "eDNE"),
      I_W((short)3, "iW"),
      E_AE((short)4, "eAE"),
      E_T((short)5, "eT");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E_W
            return E_W;
          case 2: // E_DNE
            return E_DNE;
          case 3: // I_W
            return I_W;
          case 4: // E_AE
            return E_AE;
          case 5: // E_T
            return E_T;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E_W, new org.apache.thrift.meta_data.FieldMetaData("eW", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_DNE, new org.apache.thrift.meta_data.FieldMetaData("eDNE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.I_W, new org.apache.thrift.meta_data.FieldMetaData("iW", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_AE, new org.apache.thrift.meta_data.FieldMetaData("eAE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_T, new org.apache.thrift.meta_data.FieldMetaData("eT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cacheBlock_result.class, metaDataMap);
    }

    public cacheBlock_result() {
    }

    public cacheBlock_result(
      WorkerOutOfSpaceException eW,
      BlockDoesNotExistException eDNE,
      InvalidWorkerStateException iW,
      BlockAlreadyExistsException eAE,
      ThriftIOException eT)
    {
      this();
      this.eW = eW;
      this.eDNE = eDNE;
      this.iW = iW;
      this.eAE = eAE;
      this.eT = eT;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cacheBlock_result(cacheBlock_result other) {
      if (other.isSetEW()) {
        this.eW = new WorkerOutOfSpaceException(other.eW);
      }
      if (other.isSetEDNE()) {
        this.eDNE = new BlockDoesNotExistException(other.eDNE);
      }
      if (other.isSetIW()) {
        this.iW = new InvalidWorkerStateException(other.iW);
      }
      if (other.isSetEAE()) {
        this.eAE = new BlockAlreadyExistsException(other.eAE);
      }
      if (other.isSetET()) {
        this.eT = new ThriftIOException(other.eT);
      }
    }

    public cacheBlock_result deepCopy() {
      return new cacheBlock_result(this);
    }

    @Override
    public void clear() {
      this.eW = null;
      this.eDNE = null;
      this.iW = null;
      this.eAE = null;
      this.eT = null;
    }

    public WorkerOutOfSpaceException getEW() {
      return this.eW;
    }

    public cacheBlock_result setEW(WorkerOutOfSpaceException eW) {
      this.eW = eW;
      return this;
    }

    public void unsetEW() {
      this.eW = null;
    }

    /** Returns true if field eW is set (has been assigned a value) and false otherwise */
    public boolean isSetEW() {
      return this.eW != null;
    }

    public void setEWIsSet(boolean value) {
      if (!value) {
        this.eW = null;
      }
    }

    public BlockDoesNotExistException getEDNE() {
      return this.eDNE;
    }

    public cacheBlock_result setEDNE(BlockDoesNotExistException eDNE) {
      this.eDNE = eDNE;
      return this;
    }

    public void unsetEDNE() {
      this.eDNE = null;
    }

    /** Returns true if field eDNE is set (has been assigned a value) and false otherwise */
    public boolean isSetEDNE() {
      return this.eDNE != null;
    }

    public void setEDNEIsSet(boolean value) {
      if (!value) {
        this.eDNE = null;
      }
    }

    public InvalidWorkerStateException getIW() {
      return this.iW;
    }

    public cacheBlock_result setIW(InvalidWorkerStateException iW) {
      this.iW = iW;
      return this;
    }

    public void unsetIW() {
      this.iW = null;
    }

    /** Returns true if field iW is set (has been assigned a value) and false otherwise */
    public boolean isSetIW() {
      return this.iW != null;
    }

    public void setIWIsSet(boolean value) {
      if (!value) {
        this.iW = null;
      }
    }

    public BlockAlreadyExistsException getEAE() {
      return this.eAE;
    }

    public cacheBlock_result setEAE(BlockAlreadyExistsException eAE) {
      this.eAE = eAE;
      return this;
    }

    public void unsetEAE() {
      this.eAE = null;
    }

    /** Returns true if field eAE is set (has been assigned a value) and false otherwise */
    public boolean isSetEAE() {
      return this.eAE != null;
    }

    public void setEAEIsSet(boolean value) {
      if (!value) {
        this.eAE = null;
      }
    }

    public ThriftIOException getET() {
      return this.eT;
    }

    public cacheBlock_result setET(ThriftIOException eT) {
      this.eT = eT;
      return this;
    }

    public void unsetET() {
      this.eT = null;
    }

    /** Returns true if field eT is set (has been assigned a value) and false otherwise */
    public boolean isSetET() {
      return this.eT != null;
    }

    public void setETIsSet(boolean value) {
      if (!value) {
        this.eT = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E_W:
        if (value == null) {
          unsetEW();
        } else {
          setEW((WorkerOutOfSpaceException)value);
        }
        break;

      case E_DNE:
        if (value == null) {
          unsetEDNE();
        } else {
          setEDNE((BlockDoesNotExistException)value);
        }
        break;

      case I_W:
        if (value == null) {
          unsetIW();
        } else {
          setIW((InvalidWorkerStateException)value);
        }
        break;

      case E_AE:
        if (value == null) {
          unsetEAE();
        } else {
          setEAE((BlockAlreadyExistsException)value);
        }
        break;

      case E_T:
        if (value == null) {
          unsetET();
        } else {
          setET((ThriftIOException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E_W:
        return getEW();

      case E_DNE:
        return getEDNE();

      case I_W:
        return getIW();

      case E_AE:
        return getEAE();

      case E_T:
        return getET();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E_W:
        return isSetEW();
      case E_DNE:
        return isSetEDNE();
      case I_W:
        return isSetIW();
      case E_AE:
        return isSetEAE();
      case E_T:
        return isSetET();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cacheBlock_result)
        return this.equals((cacheBlock_result)that);
      return false;
    }

    public boolean equals(cacheBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_eW = true && this.isSetEW();
      boolean that_present_eW = true && that.isSetEW();
      if (this_present_eW || that_present_eW) {
        if (!(this_present_eW && that_present_eW))
          return false;
        if (!this.eW.equals(that.eW))
          return false;
      }

      boolean this_present_eDNE = true && this.isSetEDNE();
      boolean that_present_eDNE = true && that.isSetEDNE();
      if (this_present_eDNE || that_present_eDNE) {
        if (!(this_present_eDNE && that_present_eDNE))
          return false;
        if (!this.eDNE.equals(that.eDNE))
          return false;
      }

      boolean this_present_iW = true && this.isSetIW();
      boolean that_present_iW = true && that.isSetIW();
      if (this_present_iW || that_present_iW) {
        if (!(this_present_iW && that_present_iW))
          return false;
        if (!this.iW.equals(that.iW))
          return false;
      }

      boolean this_present_eAE = true && this.isSetEAE();
      boolean that_present_eAE = true && that.isSetEAE();
      if (this_present_eAE || that_present_eAE) {
        if (!(this_present_eAE && that_present_eAE))
          return false;
        if (!this.eAE.equals(that.eAE))
          return false;
      }

      boolean this_present_eT = true && this.isSetET();
      boolean that_present_eT = true && that.isSetET();
      if (this_present_eT || that_present_eT) {
        if (!(this_present_eT && that_present_eT))
          return false;
        if (!this.eT.equals(that.eT))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_eW = true && (isSetEW());
      list.add(present_eW);
      if (present_eW)
        list.add(eW);

      boolean present_eDNE = true && (isSetEDNE());
      list.add(present_eDNE);
      if (present_eDNE)
        list.add(eDNE);

      boolean present_iW = true && (isSetIW());
      list.add(present_iW);
      if (present_iW)
        list.add(iW);

      boolean present_eAE = true && (isSetEAE());
      list.add(present_eAE);
      if (present_eAE)
        list.add(eAE);

      boolean present_eT = true && (isSetET());
      list.add(present_eT);
      if (present_eT)
        list.add(eT);

      return list.hashCode();
    }

    @Override
    public int compareTo(cacheBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEW()).compareTo(other.isSetEW());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEW()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eW, other.eW);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEDNE()).compareTo(other.isSetEDNE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEDNE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eDNE, other.eDNE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIW()).compareTo(other.isSetIW());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIW()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iW, other.iW);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEAE()).compareTo(other.isSetEAE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEAE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eAE, other.eAE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetET()).compareTo(other.isSetET());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetET()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eT, other.eT);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cacheBlock_result(");
      boolean first = true;

      sb.append("eW:");
      if (this.eW == null) {
        sb.append("null");
      } else {
        sb.append(this.eW);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eDNE:");
      if (this.eDNE == null) {
        sb.append("null");
      } else {
        sb.append(this.eDNE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iW:");
      if (this.iW == null) {
        sb.append("null");
      } else {
        sb.append(this.iW);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eAE:");
      if (this.eAE == null) {
        sb.append("null");
      } else {
        sb.append(this.eAE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eT:");
      if (this.eT == null) {
        sb.append("null");
      } else {
        sb.append(this.eT);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cacheBlock_resultStandardSchemeFactory implements SchemeFactory {
      public cacheBlock_resultStandardScheme getScheme() {
        return new cacheBlock_resultStandardScheme();
      }
    }

    private static class cacheBlock_resultStandardScheme extends StandardScheme<cacheBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cacheBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E_W
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eW = new WorkerOutOfSpaceException();
                struct.eW.read(iprot);
                struct.setEWIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_DNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eDNE = new BlockDoesNotExistException();
                struct.eDNE.read(iprot);
                struct.setEDNEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // I_W
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iW = new InvalidWorkerStateException();
                struct.iW.read(iprot);
                struct.setIWIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // E_AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eAE = new BlockAlreadyExistsException();
                struct.eAE.read(iprot);
                struct.setEAEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E_T
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eT = new ThriftIOException();
                struct.eT.read(iprot);
                struct.setETIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cacheBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eW != null) {
          oprot.writeFieldBegin(E_W_FIELD_DESC);
          struct.eW.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eDNE != null) {
          oprot.writeFieldBegin(E_DNE_FIELD_DESC);
          struct.eDNE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iW != null) {
          oprot.writeFieldBegin(I_W_FIELD_DESC);
          struct.iW.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eAE != null) {
          oprot.writeFieldBegin(E_AE_FIELD_DESC);
          struct.eAE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eT != null) {
          oprot.writeFieldBegin(E_T_FIELD_DESC);
          struct.eT.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cacheBlock_resultTupleSchemeFactory implements SchemeFactory {
      public cacheBlock_resultTupleScheme getScheme() {
        return new cacheBlock_resultTupleScheme();
      }
    }

    private static class cacheBlock_resultTupleScheme extends TupleScheme<cacheBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cacheBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEW()) {
          optionals.set(0);
        }
        if (struct.isSetEDNE()) {
          optionals.set(1);
        }
        if (struct.isSetIW()) {
          optionals.set(2);
        }
        if (struct.isSetEAE()) {
          optionals.set(3);
        }
        if (struct.isSetET()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetEW()) {
          struct.eW.write(oprot);
        }
        if (struct.isSetEDNE()) {
          struct.eDNE.write(oprot);
        }
        if (struct.isSetIW()) {
          struct.iW.write(oprot);
        }
        if (struct.isSetEAE()) {
          struct.eAE.write(oprot);
        }
        if (struct.isSetET()) {
          struct.eT.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cacheBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.eW = new WorkerOutOfSpaceException();
          struct.eW.read(iprot);
          struct.setEWIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eDNE = new BlockDoesNotExistException();
          struct.eDNE.read(iprot);
          struct.setEDNEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iW = new InvalidWorkerStateException();
          struct.iW.read(iprot);
          struct.setIWIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eAE = new BlockAlreadyExistsException();
          struct.eAE.read(iprot);
          struct.setEAEIsSet(true);
        }
        if (incoming.get(4)) {
          struct.eT = new ThriftIOException();
          struct.eT.read(iprot);
          struct.setETIsSet(true);
        }
      }
    }

  }

  public static class cancelBlock_args implements org.apache.thrift.TBase<cancelBlock_args, cancelBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelBlock_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelBlock_argsTupleSchemeFactory());
    }

    public long sessionId; // required
    public long blockId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      BLOCK_ID((short)2, "blockId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // BLOCK_ID
            return BLOCK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private static final int __BLOCKID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelBlock_args.class, metaDataMap);
    }

    public cancelBlock_args() {
    }

    public cancelBlock_args(
      long sessionId,
      long blockId)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.blockId = blockId;
      setBlockIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelBlock_args(cancelBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionId = other.sessionId;
      this.blockId = other.blockId;
    }

    public cancelBlock_args deepCopy() {
      return new cancelBlock_args(this);
    }

    @Override
    public void clear() {
      setSessionIdIsSet(false);
      this.sessionId = 0;
      setBlockIdIsSet(false);
      this.blockId = 0;
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public cancelBlock_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public long getBlockId() {
      return this.blockId;
    }

    public cancelBlock_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Long.valueOf(getSessionId());

      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case BLOCK_ID:
        return isSetBlockId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelBlock_args)
        return this.equals((cancelBlock_args)that);
      return false;
    }

    public boolean equals(cancelBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelBlock_args(");
      boolean first = true;

      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelBlock_argsStandardSchemeFactory implements SchemeFactory {
      public cancelBlock_argsStandardScheme getScheme() {
        return new cancelBlock_argsStandardScheme();
      }
    }

    private static class cancelBlock_argsStandardScheme extends StandardScheme<cancelBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelBlock_argsTupleSchemeFactory implements SchemeFactory {
      public cancelBlock_argsTupleScheme getScheme() {
        return new cancelBlock_argsTupleScheme();
      }
    }

    private static class cancelBlock_argsTupleScheme extends TupleScheme<cancelBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetBlockId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
      }
    }

  }

  public static class cancelBlock_result implements org.apache.thrift.TBase<cancelBlock_result, cancelBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelBlock_result");

    private static final org.apache.thrift.protocol.TField E_W_FIELD_DESC = new org.apache.thrift.protocol.TField("eW", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_AE_FIELD_DESC = new org.apache.thrift.protocol.TField("eAE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_DNE_FIELD_DESC = new org.apache.thrift.protocol.TField("eDNE", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_T_FIELD_DESC = new org.apache.thrift.protocol.TField("eT", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelBlock_resultTupleSchemeFactory());
    }

    public InvalidWorkerStateException eW; // required
    public BlockAlreadyExistsException eAE; // required
    public BlockDoesNotExistException eDNE; // required
    public ThriftIOException eT; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E_W((short)1, "eW"),
      E_AE((short)2, "eAE"),
      E_DNE((short)3, "eDNE"),
      E_T((short)4, "eT");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E_W
            return E_W;
          case 2: // E_AE
            return E_AE;
          case 3: // E_DNE
            return E_DNE;
          case 4: // E_T
            return E_T;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E_W, new org.apache.thrift.meta_data.FieldMetaData("eW", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_AE, new org.apache.thrift.meta_data.FieldMetaData("eAE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_DNE, new org.apache.thrift.meta_data.FieldMetaData("eDNE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_T, new org.apache.thrift.meta_data.FieldMetaData("eT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelBlock_result.class, metaDataMap);
    }

    public cancelBlock_result() {
    }

    public cancelBlock_result(
      InvalidWorkerStateException eW,
      BlockAlreadyExistsException eAE,
      BlockDoesNotExistException eDNE,
      ThriftIOException eT)
    {
      this();
      this.eW = eW;
      this.eAE = eAE;
      this.eDNE = eDNE;
      this.eT = eT;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelBlock_result(cancelBlock_result other) {
      if (other.isSetEW()) {
        this.eW = new InvalidWorkerStateException(other.eW);
      }
      if (other.isSetEAE()) {
        this.eAE = new BlockAlreadyExistsException(other.eAE);
      }
      if (other.isSetEDNE()) {
        this.eDNE = new BlockDoesNotExistException(other.eDNE);
      }
      if (other.isSetET()) {
        this.eT = new ThriftIOException(other.eT);
      }
    }

    public cancelBlock_result deepCopy() {
      return new cancelBlock_result(this);
    }

    @Override
    public void clear() {
      this.eW = null;
      this.eAE = null;
      this.eDNE = null;
      this.eT = null;
    }

    public InvalidWorkerStateException getEW() {
      return this.eW;
    }

    public cancelBlock_result setEW(InvalidWorkerStateException eW) {
      this.eW = eW;
      return this;
    }

    public void unsetEW() {
      this.eW = null;
    }

    /** Returns true if field eW is set (has been assigned a value) and false otherwise */
    public boolean isSetEW() {
      return this.eW != null;
    }

    public void setEWIsSet(boolean value) {
      if (!value) {
        this.eW = null;
      }
    }

    public BlockAlreadyExistsException getEAE() {
      return this.eAE;
    }

    public cancelBlock_result setEAE(BlockAlreadyExistsException eAE) {
      this.eAE = eAE;
      return this;
    }

    public void unsetEAE() {
      this.eAE = null;
    }

    /** Returns true if field eAE is set (has been assigned a value) and false otherwise */
    public boolean isSetEAE() {
      return this.eAE != null;
    }

    public void setEAEIsSet(boolean value) {
      if (!value) {
        this.eAE = null;
      }
    }

    public BlockDoesNotExistException getEDNE() {
      return this.eDNE;
    }

    public cancelBlock_result setEDNE(BlockDoesNotExistException eDNE) {
      this.eDNE = eDNE;
      return this;
    }

    public void unsetEDNE() {
      this.eDNE = null;
    }

    /** Returns true if field eDNE is set (has been assigned a value) and false otherwise */
    public boolean isSetEDNE() {
      return this.eDNE != null;
    }

    public void setEDNEIsSet(boolean value) {
      if (!value) {
        this.eDNE = null;
      }
    }

    public ThriftIOException getET() {
      return this.eT;
    }

    public cancelBlock_result setET(ThriftIOException eT) {
      this.eT = eT;
      return this;
    }

    public void unsetET() {
      this.eT = null;
    }

    /** Returns true if field eT is set (has been assigned a value) and false otherwise */
    public boolean isSetET() {
      return this.eT != null;
    }

    public void setETIsSet(boolean value) {
      if (!value) {
        this.eT = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E_W:
        if (value == null) {
          unsetEW();
        } else {
          setEW((InvalidWorkerStateException)value);
        }
        break;

      case E_AE:
        if (value == null) {
          unsetEAE();
        } else {
          setEAE((BlockAlreadyExistsException)value);
        }
        break;

      case E_DNE:
        if (value == null) {
          unsetEDNE();
        } else {
          setEDNE((BlockDoesNotExistException)value);
        }
        break;

      case E_T:
        if (value == null) {
          unsetET();
        } else {
          setET((ThriftIOException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E_W:
        return getEW();

      case E_AE:
        return getEAE();

      case E_DNE:
        return getEDNE();

      case E_T:
        return getET();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E_W:
        return isSetEW();
      case E_AE:
        return isSetEAE();
      case E_DNE:
        return isSetEDNE();
      case E_T:
        return isSetET();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelBlock_result)
        return this.equals((cancelBlock_result)that);
      return false;
    }

    public boolean equals(cancelBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_eW = true && this.isSetEW();
      boolean that_present_eW = true && that.isSetEW();
      if (this_present_eW || that_present_eW) {
        if (!(this_present_eW && that_present_eW))
          return false;
        if (!this.eW.equals(that.eW))
          return false;
      }

      boolean this_present_eAE = true && this.isSetEAE();
      boolean that_present_eAE = true && that.isSetEAE();
      if (this_present_eAE || that_present_eAE) {
        if (!(this_present_eAE && that_present_eAE))
          return false;
        if (!this.eAE.equals(that.eAE))
          return false;
      }

      boolean this_present_eDNE = true && this.isSetEDNE();
      boolean that_present_eDNE = true && that.isSetEDNE();
      if (this_present_eDNE || that_present_eDNE) {
        if (!(this_present_eDNE && that_present_eDNE))
          return false;
        if (!this.eDNE.equals(that.eDNE))
          return false;
      }

      boolean this_present_eT = true && this.isSetET();
      boolean that_present_eT = true && that.isSetET();
      if (this_present_eT || that_present_eT) {
        if (!(this_present_eT && that_present_eT))
          return false;
        if (!this.eT.equals(that.eT))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_eW = true && (isSetEW());
      list.add(present_eW);
      if (present_eW)
        list.add(eW);

      boolean present_eAE = true && (isSetEAE());
      list.add(present_eAE);
      if (present_eAE)
        list.add(eAE);

      boolean present_eDNE = true && (isSetEDNE());
      list.add(present_eDNE);
      if (present_eDNE)
        list.add(eDNE);

      boolean present_eT = true && (isSetET());
      list.add(present_eT);
      if (present_eT)
        list.add(eT);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEW()).compareTo(other.isSetEW());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEW()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eW, other.eW);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEAE()).compareTo(other.isSetEAE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEAE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eAE, other.eAE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEDNE()).compareTo(other.isSetEDNE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEDNE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eDNE, other.eDNE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetET()).compareTo(other.isSetET());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetET()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eT, other.eT);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelBlock_result(");
      boolean first = true;

      sb.append("eW:");
      if (this.eW == null) {
        sb.append("null");
      } else {
        sb.append(this.eW);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eAE:");
      if (this.eAE == null) {
        sb.append("null");
      } else {
        sb.append(this.eAE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eDNE:");
      if (this.eDNE == null) {
        sb.append("null");
      } else {
        sb.append(this.eDNE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eT:");
      if (this.eT == null) {
        sb.append("null");
      } else {
        sb.append(this.eT);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelBlock_resultStandardSchemeFactory implements SchemeFactory {
      public cancelBlock_resultStandardScheme getScheme() {
        return new cancelBlock_resultStandardScheme();
      }
    }

    private static class cancelBlock_resultStandardScheme extends StandardScheme<cancelBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E_W
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eW = new InvalidWorkerStateException();
                struct.eW.read(iprot);
                struct.setEWIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eAE = new BlockAlreadyExistsException();
                struct.eAE.read(iprot);
                struct.setEAEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E_DNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eDNE = new BlockDoesNotExistException();
                struct.eDNE.read(iprot);
                struct.setEDNEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // E_T
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eT = new ThriftIOException();
                struct.eT.read(iprot);
                struct.setETIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eW != null) {
          oprot.writeFieldBegin(E_W_FIELD_DESC);
          struct.eW.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eAE != null) {
          oprot.writeFieldBegin(E_AE_FIELD_DESC);
          struct.eAE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eDNE != null) {
          oprot.writeFieldBegin(E_DNE_FIELD_DESC);
          struct.eDNE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eT != null) {
          oprot.writeFieldBegin(E_T_FIELD_DESC);
          struct.eT.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelBlock_resultTupleSchemeFactory implements SchemeFactory {
      public cancelBlock_resultTupleScheme getScheme() {
        return new cancelBlock_resultTupleScheme();
      }
    }

    private static class cancelBlock_resultTupleScheme extends TupleScheme<cancelBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEW()) {
          optionals.set(0);
        }
        if (struct.isSetEAE()) {
          optionals.set(1);
        }
        if (struct.isSetEDNE()) {
          optionals.set(2);
        }
        if (struct.isSetET()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetEW()) {
          struct.eW.write(oprot);
        }
        if (struct.isSetEAE()) {
          struct.eAE.write(oprot);
        }
        if (struct.isSetEDNE()) {
          struct.eDNE.write(oprot);
        }
        if (struct.isSetET()) {
          struct.eT.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.eW = new InvalidWorkerStateException();
          struct.eW.read(iprot);
          struct.setEWIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eAE = new BlockAlreadyExistsException();
          struct.eAE.read(iprot);
          struct.setEAEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eDNE = new BlockDoesNotExistException();
          struct.eDNE.read(iprot);
          struct.setEDNEIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eT = new ThriftIOException();
          struct.eT.read(iprot);
          struct.setETIsSet(true);
        }
      }
    }

  }

  public static class getSessionUfsTempFolder_args implements org.apache.thrift.TBase<getSessionUfsTempFolder_args, getSessionUfsTempFolder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSessionUfsTempFolder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSessionUfsTempFolder_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSessionUfsTempFolder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSessionUfsTempFolder_argsTupleSchemeFactory());
    }

    public long sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSessionUfsTempFolder_args.class, metaDataMap);
    }

    public getSessionUfsTempFolder_args() {
    }

    public getSessionUfsTempFolder_args(
      long sessionId)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSessionUfsTempFolder_args(getSessionUfsTempFolder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionId = other.sessionId;
    }

    public getSessionUfsTempFolder_args deepCopy() {
      return new getSessionUfsTempFolder_args(this);
    }

    @Override
    public void clear() {
      setSessionIdIsSet(false);
      this.sessionId = 0;
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public getSessionUfsTempFolder_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Long.valueOf(getSessionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSessionUfsTempFolder_args)
        return this.equals((getSessionUfsTempFolder_args)that);
      return false;
    }

    public boolean equals(getSessionUfsTempFolder_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSessionUfsTempFolder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSessionUfsTempFolder_args(");
      boolean first = true;

      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSessionUfsTempFolder_argsStandardSchemeFactory implements SchemeFactory {
      public getSessionUfsTempFolder_argsStandardScheme getScheme() {
        return new getSessionUfsTempFolder_argsStandardScheme();
      }
    }

    private static class getSessionUfsTempFolder_argsStandardScheme extends StandardScheme<getSessionUfsTempFolder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSessionUfsTempFolder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSessionUfsTempFolder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSessionUfsTempFolder_argsTupleSchemeFactory implements SchemeFactory {
      public getSessionUfsTempFolder_argsTupleScheme getScheme() {
        return new getSessionUfsTempFolder_argsTupleScheme();
      }
    }

    private static class getSessionUfsTempFolder_argsTupleScheme extends TupleScheme<getSessionUfsTempFolder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSessionUfsTempFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSessionUfsTempFolder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class getSessionUfsTempFolder_result implements org.apache.thrift.TBase<getSessionUfsTempFolder_result, getSessionUfsTempFolder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSessionUfsTempFolder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSessionUfsTempFolder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSessionUfsTempFolder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSessionUfsTempFolder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSessionUfsTempFolder_result.class, metaDataMap);
    }

    public getSessionUfsTempFolder_result() {
    }

    public getSessionUfsTempFolder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSessionUfsTempFolder_result(getSessionUfsTempFolder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getSessionUfsTempFolder_result deepCopy() {
      return new getSessionUfsTempFolder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getSessionUfsTempFolder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSessionUfsTempFolder_result)
        return this.equals((getSessionUfsTempFolder_result)that);
      return false;
    }

    public boolean equals(getSessionUfsTempFolder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSessionUfsTempFolder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSessionUfsTempFolder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSessionUfsTempFolder_resultStandardSchemeFactory implements SchemeFactory {
      public getSessionUfsTempFolder_resultStandardScheme getScheme() {
        return new getSessionUfsTempFolder_resultStandardScheme();
      }
    }

    private static class getSessionUfsTempFolder_resultStandardScheme extends StandardScheme<getSessionUfsTempFolder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSessionUfsTempFolder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSessionUfsTempFolder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSessionUfsTempFolder_resultTupleSchemeFactory implements SchemeFactory {
      public getSessionUfsTempFolder_resultTupleScheme getScheme() {
        return new getSessionUfsTempFolder_resultTupleScheme();
      }
    }

    private static class getSessionUfsTempFolder_resultTupleScheme extends TupleScheme<getSessionUfsTempFolder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSessionUfsTempFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSessionUfsTempFolder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class lockBlock_args implements org.apache.thrift.TBase<lockBlock_args, lockBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<lockBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lockBlock_args");

    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lockBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lockBlock_argsTupleSchemeFactory());
    }

    public long blockId; // required
    public long sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_ID((short)1, "blockId"),
      SESSION_ID((short)2, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_ID
            return BLOCK_ID;
          case 2: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKID_ISSET_ID = 0;
    private static final int __SESSIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lockBlock_args.class, metaDataMap);
    }

    public lockBlock_args() {
    }

    public lockBlock_args(
      long blockId,
      long sessionId)
    {
      this();
      this.blockId = blockId;
      setBlockIdIsSet(true);
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lockBlock_args(lockBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.blockId = other.blockId;
      this.sessionId = other.sessionId;
    }

    public lockBlock_args deepCopy() {
      return new lockBlock_args(this);
    }

    @Override
    public void clear() {
      setBlockIdIsSet(false);
      this.blockId = 0;
      setSessionIdIsSet(false);
      this.sessionId = 0;
    }

    public long getBlockId() {
      return this.blockId;
    }

    public lockBlock_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public lockBlock_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      case SESSION_ID:
        return Long.valueOf(getSessionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_ID:
        return isSetBlockId();
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lockBlock_args)
        return this.equals((lockBlock_args)that);
      return false;
    }

    public boolean equals(lockBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(lockBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lockBlock_args(");
      boolean first = true;

      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lockBlock_argsStandardSchemeFactory implements SchemeFactory {
      public lockBlock_argsStandardScheme getScheme() {
        return new lockBlock_argsStandardScheme();
      }
    }

    private static class lockBlock_argsStandardScheme extends StandardScheme<lockBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lockBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lockBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lockBlock_argsTupleSchemeFactory implements SchemeFactory {
      public lockBlock_argsTupleScheme getScheme() {
        return new lockBlock_argsTupleScheme();
      }
    }

    private static class lockBlock_argsTupleScheme extends TupleScheme<lockBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lockBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlockId()) {
          optionals.set(0);
        }
        if (struct.isSetSessionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lockBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class lockBlock_result implements org.apache.thrift.TBase<lockBlock_result, lockBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<lockBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lockBlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_P_FIELD_DESC = new org.apache.thrift.protocol.TField("eP", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_W_FIELD_DESC = new org.apache.thrift.protocol.TField("eW", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lockBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lockBlock_resultTupleSchemeFactory());
    }

    public String success; // required
    public FileDoesNotExistException eP; // required
    public InvalidWorkerStateException eW; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_P((short)1, "eP"),
      E_W((short)2, "eW");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_P
            return E_P;
          case 2: // E_W
            return E_W;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_P, new org.apache.thrift.meta_data.FieldMetaData("eP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_W, new org.apache.thrift.meta_data.FieldMetaData("eW", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lockBlock_result.class, metaDataMap);
    }

    public lockBlock_result() {
    }

    public lockBlock_result(
      String success,
      FileDoesNotExistException eP,
      InvalidWorkerStateException eW)
    {
      this();
      this.success = success;
      this.eP = eP;
      this.eW = eW;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lockBlock_result(lockBlock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEP()) {
        this.eP = new FileDoesNotExistException(other.eP);
      }
      if (other.isSetEW()) {
        this.eW = new InvalidWorkerStateException(other.eW);
      }
    }

    public lockBlock_result deepCopy() {
      return new lockBlock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eP = null;
      this.eW = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lockBlock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileDoesNotExistException getEP() {
      return this.eP;
    }

    public lockBlock_result setEP(FileDoesNotExistException eP) {
      this.eP = eP;
      return this;
    }

    public void unsetEP() {
      this.eP = null;
    }

    /** Returns true if field eP is set (has been assigned a value) and false otherwise */
    public boolean isSetEP() {
      return this.eP != null;
    }

    public void setEPIsSet(boolean value) {
      if (!value) {
        this.eP = null;
      }
    }

    public InvalidWorkerStateException getEW() {
      return this.eW;
    }

    public lockBlock_result setEW(InvalidWorkerStateException eW) {
      this.eW = eW;
      return this;
    }

    public void unsetEW() {
      this.eW = null;
    }

    /** Returns true if field eW is set (has been assigned a value) and false otherwise */
    public boolean isSetEW() {
      return this.eW != null;
    }

    public void setEWIsSet(boolean value) {
      if (!value) {
        this.eW = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E_P:
        if (value == null) {
          unsetEP();
        } else {
          setEP((FileDoesNotExistException)value);
        }
        break;

      case E_W:
        if (value == null) {
          unsetEW();
        } else {
          setEW((InvalidWorkerStateException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_P:
        return getEP();

      case E_W:
        return getEW();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_P:
        return isSetEP();
      case E_W:
        return isSetEW();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lockBlock_result)
        return this.equals((lockBlock_result)that);
      return false;
    }

    public boolean equals(lockBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eP = true && this.isSetEP();
      boolean that_present_eP = true && that.isSetEP();
      if (this_present_eP || that_present_eP) {
        if (!(this_present_eP && that_present_eP))
          return false;
        if (!this.eP.equals(that.eP))
          return false;
      }

      boolean this_present_eW = true && this.isSetEW();
      boolean that_present_eW = true && that.isSetEW();
      if (this_present_eW || that_present_eW) {
        if (!(this_present_eW && that_present_eW))
          return false;
        if (!this.eW.equals(that.eW))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_eP = true && (isSetEP());
      list.add(present_eP);
      if (present_eP)
        list.add(eP);

      boolean present_eW = true && (isSetEW());
      list.add(present_eW);
      if (present_eW)
        list.add(eW);

      return list.hashCode();
    }

    @Override
    public int compareTo(lockBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEP()).compareTo(other.isSetEP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eP, other.eP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEW()).compareTo(other.isSetEW());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEW()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eW, other.eW);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lockBlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eP:");
      if (this.eP == null) {
        sb.append("null");
      } else {
        sb.append(this.eP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eW:");
      if (this.eW == null) {
        sb.append("null");
      } else {
        sb.append(this.eW);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lockBlock_resultStandardSchemeFactory implements SchemeFactory {
      public lockBlock_resultStandardScheme getScheme() {
        return new lockBlock_resultStandardScheme();
      }
    }

    private static class lockBlock_resultStandardScheme extends StandardScheme<lockBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lockBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E_P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eP = new FileDoesNotExistException();
                struct.eP.read(iprot);
                struct.setEPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_W
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eW = new InvalidWorkerStateException();
                struct.eW.read(iprot);
                struct.setEWIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lockBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.eP != null) {
          oprot.writeFieldBegin(E_P_FIELD_DESC);
          struct.eP.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eW != null) {
          oprot.writeFieldBegin(E_W_FIELD_DESC);
          struct.eW.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lockBlock_resultTupleSchemeFactory implements SchemeFactory {
      public lockBlock_resultTupleScheme getScheme() {
        return new lockBlock_resultTupleScheme();
      }
    }

    private static class lockBlock_resultTupleScheme extends TupleScheme<lockBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lockBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEP()) {
          optionals.set(1);
        }
        if (struct.isSetEW()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEP()) {
          struct.eP.write(oprot);
        }
        if (struct.isSetEW()) {
          struct.eW.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lockBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eP = new FileDoesNotExistException();
          struct.eP.read(iprot);
          struct.setEPIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eW = new InvalidWorkerStateException();
          struct.eW.read(iprot);
          struct.setEWIsSet(true);
        }
      }
    }

  }

  public static class promoteBlock_args implements org.apache.thrift.TBase<promoteBlock_args, promoteBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<promoteBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("promoteBlock_args");

    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new promoteBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new promoteBlock_argsTupleSchemeFactory());
    }

    public long blockId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_ID((short)1, "blockId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_ID
            return BLOCK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(promoteBlock_args.class, metaDataMap);
    }

    public promoteBlock_args() {
    }

    public promoteBlock_args(
      long blockId)
    {
      this();
      this.blockId = blockId;
      setBlockIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public promoteBlock_args(promoteBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.blockId = other.blockId;
    }

    public promoteBlock_args deepCopy() {
      return new promoteBlock_args(this);
    }

    @Override
    public void clear() {
      setBlockIdIsSet(false);
      this.blockId = 0;
    }

    public long getBlockId() {
      return this.blockId;
    }

    public promoteBlock_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_ID:
        return isSetBlockId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof promoteBlock_args)
        return this.equals((promoteBlock_args)that);
      return false;
    }

    public boolean equals(promoteBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      return list.hashCode();
    }

    @Override
    public int compareTo(promoteBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("promoteBlock_args(");
      boolean first = true;

      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class promoteBlock_argsStandardSchemeFactory implements SchemeFactory {
      public promoteBlock_argsStandardScheme getScheme() {
        return new promoteBlock_argsStandardScheme();
      }
    }

    private static class promoteBlock_argsStandardScheme extends StandardScheme<promoteBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, promoteBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, promoteBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class promoteBlock_argsTupleSchemeFactory implements SchemeFactory {
      public promoteBlock_argsTupleScheme getScheme() {
        return new promoteBlock_argsTupleScheme();
      }
    }

    private static class promoteBlock_argsTupleScheme extends TupleScheme<promoteBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, promoteBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlockId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, promoteBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
      }
    }

  }

  public static class promoteBlock_result implements org.apache.thrift.TBase<promoteBlock_result, promoteBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<promoteBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("promoteBlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_WSPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("eWSpace", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_DNE_FIELD_DESC = new org.apache.thrift.protocol.TField("eDNE", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_WSTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("eWState", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_AE_FIELD_DESC = new org.apache.thrift.protocol.TField("eAE", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_T_FIELD_DESC = new org.apache.thrift.protocol.TField("eT", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new promoteBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new promoteBlock_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public WorkerOutOfSpaceException eWSpace; // required
    public BlockDoesNotExistException eDNE; // required
    public InvalidWorkerStateException eWState; // required
    public BlockAlreadyExistsException eAE; // required
    public ThriftIOException eT; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_WSPACE((short)1, "eWSpace"),
      E_DNE((short)2, "eDNE"),
      E_WSTATE((short)3, "eWState"),
      E_AE((short)4, "eAE"),
      E_T((short)5, "eT");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_WSPACE
            return E_WSPACE;
          case 2: // E_DNE
            return E_DNE;
          case 3: // E_WSTATE
            return E_WSTATE;
          case 4: // E_AE
            return E_AE;
          case 5: // E_T
            return E_T;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E_WSPACE, new org.apache.thrift.meta_data.FieldMetaData("eWSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_DNE, new org.apache.thrift.meta_data.FieldMetaData("eDNE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_WSTATE, new org.apache.thrift.meta_data.FieldMetaData("eWState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_AE, new org.apache.thrift.meta_data.FieldMetaData("eAE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_T, new org.apache.thrift.meta_data.FieldMetaData("eT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(promoteBlock_result.class, metaDataMap);
    }

    public promoteBlock_result() {
    }

    public promoteBlock_result(
      boolean success,
      WorkerOutOfSpaceException eWSpace,
      BlockDoesNotExistException eDNE,
      InvalidWorkerStateException eWState,
      BlockAlreadyExistsException eAE,
      ThriftIOException eT)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.eWSpace = eWSpace;
      this.eDNE = eDNE;
      this.eWState = eWState;
      this.eAE = eAE;
      this.eT = eT;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public promoteBlock_result(promoteBlock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEWSpace()) {
        this.eWSpace = new WorkerOutOfSpaceException(other.eWSpace);
      }
      if (other.isSetEDNE()) {
        this.eDNE = new BlockDoesNotExistException(other.eDNE);
      }
      if (other.isSetEWState()) {
        this.eWState = new InvalidWorkerStateException(other.eWState);
      }
      if (other.isSetEAE()) {
        this.eAE = new BlockAlreadyExistsException(other.eAE);
      }
      if (other.isSetET()) {
        this.eT = new ThriftIOException(other.eT);
      }
    }

    public promoteBlock_result deepCopy() {
      return new promoteBlock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.eWSpace = null;
      this.eDNE = null;
      this.eWState = null;
      this.eAE = null;
      this.eT = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public promoteBlock_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public WorkerOutOfSpaceException getEWSpace() {
      return this.eWSpace;
    }

    public promoteBlock_result setEWSpace(WorkerOutOfSpaceException eWSpace) {
      this.eWSpace = eWSpace;
      return this;
    }

    public void unsetEWSpace() {
      this.eWSpace = null;
    }

    /** Returns true if field eWSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetEWSpace() {
      return this.eWSpace != null;
    }

    public void setEWSpaceIsSet(boolean value) {
      if (!value) {
        this.eWSpace = null;
      }
    }

    public BlockDoesNotExistException getEDNE() {
      return this.eDNE;
    }

    public promoteBlock_result setEDNE(BlockDoesNotExistException eDNE) {
      this.eDNE = eDNE;
      return this;
    }

    public void unsetEDNE() {
      this.eDNE = null;
    }

    /** Returns true if field eDNE is set (has been assigned a value) and false otherwise */
    public boolean isSetEDNE() {
      return this.eDNE != null;
    }

    public void setEDNEIsSet(boolean value) {
      if (!value) {
        this.eDNE = null;
      }
    }

    public InvalidWorkerStateException getEWState() {
      return this.eWState;
    }

    public promoteBlock_result setEWState(InvalidWorkerStateException eWState) {
      this.eWState = eWState;
      return this;
    }

    public void unsetEWState() {
      this.eWState = null;
    }

    /** Returns true if field eWState is set (has been assigned a value) and false otherwise */
    public boolean isSetEWState() {
      return this.eWState != null;
    }

    public void setEWStateIsSet(boolean value) {
      if (!value) {
        this.eWState = null;
      }
    }

    public BlockAlreadyExistsException getEAE() {
      return this.eAE;
    }

    public promoteBlock_result setEAE(BlockAlreadyExistsException eAE) {
      this.eAE = eAE;
      return this;
    }

    public void unsetEAE() {
      this.eAE = null;
    }

    /** Returns true if field eAE is set (has been assigned a value) and false otherwise */
    public boolean isSetEAE() {
      return this.eAE != null;
    }

    public void setEAEIsSet(boolean value) {
      if (!value) {
        this.eAE = null;
      }
    }

    public ThriftIOException getET() {
      return this.eT;
    }

    public promoteBlock_result setET(ThriftIOException eT) {
      this.eT = eT;
      return this;
    }

    public void unsetET() {
      this.eT = null;
    }

    /** Returns true if field eT is set (has been assigned a value) and false otherwise */
    public boolean isSetET() {
      return this.eT != null;
    }

    public void setETIsSet(boolean value) {
      if (!value) {
        this.eT = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E_WSPACE:
        if (value == null) {
          unsetEWSpace();
        } else {
          setEWSpace((WorkerOutOfSpaceException)value);
        }
        break;

      case E_DNE:
        if (value == null) {
          unsetEDNE();
        } else {
          setEDNE((BlockDoesNotExistException)value);
        }
        break;

      case E_WSTATE:
        if (value == null) {
          unsetEWState();
        } else {
          setEWState((InvalidWorkerStateException)value);
        }
        break;

      case E_AE:
        if (value == null) {
          unsetEAE();
        } else {
          setEAE((BlockAlreadyExistsException)value);
        }
        break;

      case E_T:
        if (value == null) {
          unsetET();
        } else {
          setET((ThriftIOException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E_WSPACE:
        return getEWSpace();

      case E_DNE:
        return getEDNE();

      case E_WSTATE:
        return getEWState();

      case E_AE:
        return getEAE();

      case E_T:
        return getET();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_WSPACE:
        return isSetEWSpace();
      case E_DNE:
        return isSetEDNE();
      case E_WSTATE:
        return isSetEWState();
      case E_AE:
        return isSetEAE();
      case E_T:
        return isSetET();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof promoteBlock_result)
        return this.equals((promoteBlock_result)that);
      return false;
    }

    public boolean equals(promoteBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_eWSpace = true && this.isSetEWSpace();
      boolean that_present_eWSpace = true && that.isSetEWSpace();
      if (this_present_eWSpace || that_present_eWSpace) {
        if (!(this_present_eWSpace && that_present_eWSpace))
          return false;
        if (!this.eWSpace.equals(that.eWSpace))
          return false;
      }

      boolean this_present_eDNE = true && this.isSetEDNE();
      boolean that_present_eDNE = true && that.isSetEDNE();
      if (this_present_eDNE || that_present_eDNE) {
        if (!(this_present_eDNE && that_present_eDNE))
          return false;
        if (!this.eDNE.equals(that.eDNE))
          return false;
      }

      boolean this_present_eWState = true && this.isSetEWState();
      boolean that_present_eWState = true && that.isSetEWState();
      if (this_present_eWState || that_present_eWState) {
        if (!(this_present_eWState && that_present_eWState))
          return false;
        if (!this.eWState.equals(that.eWState))
          return false;
      }

      boolean this_present_eAE = true && this.isSetEAE();
      boolean that_present_eAE = true && that.isSetEAE();
      if (this_present_eAE || that_present_eAE) {
        if (!(this_present_eAE && that_present_eAE))
          return false;
        if (!this.eAE.equals(that.eAE))
          return false;
      }

      boolean this_present_eT = true && this.isSetET();
      boolean that_present_eT = true && that.isSetET();
      if (this_present_eT || that_present_eT) {
        if (!(this_present_eT && that_present_eT))
          return false;
        if (!this.eT.equals(that.eT))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_eWSpace = true && (isSetEWSpace());
      list.add(present_eWSpace);
      if (present_eWSpace)
        list.add(eWSpace);

      boolean present_eDNE = true && (isSetEDNE());
      list.add(present_eDNE);
      if (present_eDNE)
        list.add(eDNE);

      boolean present_eWState = true && (isSetEWState());
      list.add(present_eWState);
      if (present_eWState)
        list.add(eWState);

      boolean present_eAE = true && (isSetEAE());
      list.add(present_eAE);
      if (present_eAE)
        list.add(eAE);

      boolean present_eT = true && (isSetET());
      list.add(present_eT);
      if (present_eT)
        list.add(eT);

      return list.hashCode();
    }

    @Override
    public int compareTo(promoteBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEWSpace()).compareTo(other.isSetEWSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEWSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eWSpace, other.eWSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEDNE()).compareTo(other.isSetEDNE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEDNE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eDNE, other.eDNE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEWState()).compareTo(other.isSetEWState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEWState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eWState, other.eWState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEAE()).compareTo(other.isSetEAE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEAE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eAE, other.eAE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetET()).compareTo(other.isSetET());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetET()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eT, other.eT);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("promoteBlock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("eWSpace:");
      if (this.eWSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.eWSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eDNE:");
      if (this.eDNE == null) {
        sb.append("null");
      } else {
        sb.append(this.eDNE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eWState:");
      if (this.eWState == null) {
        sb.append("null");
      } else {
        sb.append(this.eWState);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eAE:");
      if (this.eAE == null) {
        sb.append("null");
      } else {
        sb.append(this.eAE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eT:");
      if (this.eT == null) {
        sb.append("null");
      } else {
        sb.append(this.eT);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class promoteBlock_resultStandardSchemeFactory implements SchemeFactory {
      public promoteBlock_resultStandardScheme getScheme() {
        return new promoteBlock_resultStandardScheme();
      }
    }

    private static class promoteBlock_resultStandardScheme extends StandardScheme<promoteBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, promoteBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E_WSPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eWSpace = new WorkerOutOfSpaceException();
                struct.eWSpace.read(iprot);
                struct.setEWSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_DNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eDNE = new BlockDoesNotExistException();
                struct.eDNE.read(iprot);
                struct.setEDNEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E_WSTATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eWState = new InvalidWorkerStateException();
                struct.eWState.read(iprot);
                struct.setEWStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // E_AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eAE = new BlockAlreadyExistsException();
                struct.eAE.read(iprot);
                struct.setEAEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E_T
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eT = new ThriftIOException();
                struct.eT.read(iprot);
                struct.setETIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, promoteBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.eWSpace != null) {
          oprot.writeFieldBegin(E_WSPACE_FIELD_DESC);
          struct.eWSpace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eDNE != null) {
          oprot.writeFieldBegin(E_DNE_FIELD_DESC);
          struct.eDNE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eWState != null) {
          oprot.writeFieldBegin(E_WSTATE_FIELD_DESC);
          struct.eWState.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eAE != null) {
          oprot.writeFieldBegin(E_AE_FIELD_DESC);
          struct.eAE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eT != null) {
          oprot.writeFieldBegin(E_T_FIELD_DESC);
          struct.eT.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class promoteBlock_resultTupleSchemeFactory implements SchemeFactory {
      public promoteBlock_resultTupleScheme getScheme() {
        return new promoteBlock_resultTupleScheme();
      }
    }

    private static class promoteBlock_resultTupleScheme extends TupleScheme<promoteBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, promoteBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEWSpace()) {
          optionals.set(1);
        }
        if (struct.isSetEDNE()) {
          optionals.set(2);
        }
        if (struct.isSetEWState()) {
          optionals.set(3);
        }
        if (struct.isSetEAE()) {
          optionals.set(4);
        }
        if (struct.isSetET()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEWSpace()) {
          struct.eWSpace.write(oprot);
        }
        if (struct.isSetEDNE()) {
          struct.eDNE.write(oprot);
        }
        if (struct.isSetEWState()) {
          struct.eWState.write(oprot);
        }
        if (struct.isSetEAE()) {
          struct.eAE.write(oprot);
        }
        if (struct.isSetET()) {
          struct.eT.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, promoteBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eWSpace = new WorkerOutOfSpaceException();
          struct.eWSpace.read(iprot);
          struct.setEWSpaceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eDNE = new BlockDoesNotExistException();
          struct.eDNE.read(iprot);
          struct.setEDNEIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eWState = new InvalidWorkerStateException();
          struct.eWState.read(iprot);
          struct.setEWStateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.eAE = new BlockAlreadyExistsException();
          struct.eAE.read(iprot);
          struct.setEAEIsSet(true);
        }
        if (incoming.get(5)) {
          struct.eT = new ThriftIOException();
          struct.eT.read(iprot);
          struct.setETIsSet(true);
        }
      }
    }

  }

  public static class requestBlockLocation_args implements org.apache.thrift.TBase<requestBlockLocation_args, requestBlockLocation_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestBlockLocation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestBlockLocation_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField INITIAL_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("initialBytes", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestBlockLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestBlockLocation_argsTupleSchemeFactory());
    }

    public long sessionId; // required
    public long blockId; // required
    public long initialBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      BLOCK_ID((short)2, "blockId"),
      INITIAL_BYTES((short)3, "initialBytes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // BLOCK_ID
            return BLOCK_ID;
          case 3: // INITIAL_BYTES
            return INITIAL_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private static final int __BLOCKID_ISSET_ID = 1;
    private static final int __INITIALBYTES_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INITIAL_BYTES, new org.apache.thrift.meta_data.FieldMetaData("initialBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestBlockLocation_args.class, metaDataMap);
    }

    public requestBlockLocation_args() {
    }

    public requestBlockLocation_args(
      long sessionId,
      long blockId,
      long initialBytes)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.blockId = blockId;
      setBlockIdIsSet(true);
      this.initialBytes = initialBytes;
      setInitialBytesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestBlockLocation_args(requestBlockLocation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionId = other.sessionId;
      this.blockId = other.blockId;
      this.initialBytes = other.initialBytes;
    }

    public requestBlockLocation_args deepCopy() {
      return new requestBlockLocation_args(this);
    }

    @Override
    public void clear() {
      setSessionIdIsSet(false);
      this.sessionId = 0;
      setBlockIdIsSet(false);
      this.blockId = 0;
      setInitialBytesIsSet(false);
      this.initialBytes = 0;
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public requestBlockLocation_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public long getBlockId() {
      return this.blockId;
    }

    public requestBlockLocation_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public long getInitialBytes() {
      return this.initialBytes;
    }

    public requestBlockLocation_args setInitialBytes(long initialBytes) {
      this.initialBytes = initialBytes;
      setInitialBytesIsSet(true);
      return this;
    }

    public void unsetInitialBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIALBYTES_ISSET_ID);
    }

    /** Returns true if field initialBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetInitialBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __INITIALBYTES_ISSET_ID);
    }

    public void setInitialBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIALBYTES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      case INITIAL_BYTES:
        if (value == null) {
          unsetInitialBytes();
        } else {
          setInitialBytes((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Long.valueOf(getSessionId());

      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      case INITIAL_BYTES:
        return Long.valueOf(getInitialBytes());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case BLOCK_ID:
        return isSetBlockId();
      case INITIAL_BYTES:
        return isSetInitialBytes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestBlockLocation_args)
        return this.equals((requestBlockLocation_args)that);
      return false;
    }

    public boolean equals(requestBlockLocation_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      boolean this_present_initialBytes = true;
      boolean that_present_initialBytes = true;
      if (this_present_initialBytes || that_present_initialBytes) {
        if (!(this_present_initialBytes && that_present_initialBytes))
          return false;
        if (this.initialBytes != that.initialBytes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      boolean present_initialBytes = true;
      list.add(present_initialBytes);
      if (present_initialBytes)
        list.add(initialBytes);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestBlockLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInitialBytes()).compareTo(other.isSetInitialBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInitialBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialBytes, other.initialBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestBlockLocation_args(");
      boolean first = true;

      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("initialBytes:");
      sb.append(this.initialBytes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestBlockLocation_argsStandardSchemeFactory implements SchemeFactory {
      public requestBlockLocation_argsStandardScheme getScheme() {
        return new requestBlockLocation_argsStandardScheme();
      }
    }

    private static class requestBlockLocation_argsStandardScheme extends StandardScheme<requestBlockLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestBlockLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INITIAL_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.initialBytes = iprot.readI64();
                struct.setInitialBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestBlockLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INITIAL_BYTES_FIELD_DESC);
        oprot.writeI64(struct.initialBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestBlockLocation_argsTupleSchemeFactory implements SchemeFactory {
      public requestBlockLocation_argsTupleScheme getScheme() {
        return new requestBlockLocation_argsTupleScheme();
      }
    }

    private static class requestBlockLocation_argsTupleScheme extends TupleScheme<requestBlockLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestBlockLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetBlockId()) {
          optionals.set(1);
        }
        if (struct.isSetInitialBytes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
        if (struct.isSetInitialBytes()) {
          oprot.writeI64(struct.initialBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestBlockLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.initialBytes = iprot.readI64();
          struct.setInitialBytesIsSet(true);
        }
      }
    }

  }

  public static class requestBlockLocation_result implements org.apache.thrift.TBase<requestBlockLocation_result, requestBlockLocation_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestBlockLocation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestBlockLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_WSTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("eWState", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_WSPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("eWSpace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E_DNE_FIELD_DESC = new org.apache.thrift.protocol.TField("eDNE", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E_AE_FIELD_DESC = new org.apache.thrift.protocol.TField("eAE", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField E_T_FIELD_DESC = new org.apache.thrift.protocol.TField("eT", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestBlockLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestBlockLocation_resultTupleSchemeFactory());
    }

    public String success; // required
    public InvalidWorkerStateException eWState; // required
    public WorkerOutOfSpaceException eWSpace; // required
    public BlockDoesNotExistException eDNE; // required
    public BlockAlreadyExistsException eAE; // required
    public ThriftIOException eT; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_WSTATE((short)1, "eWState"),
      E_WSPACE((short)2, "eWSpace"),
      E_DNE((short)3, "eDNE"),
      E_AE((short)4, "eAE"),
      E_T((short)5, "eT");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_WSTATE
            return E_WSTATE;
          case 2: // E_WSPACE
            return E_WSPACE;
          case 3: // E_DNE
            return E_DNE;
          case 4: // E_AE
            return E_AE;
          case 5: // E_T
            return E_T;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_WSTATE, new org.apache.thrift.meta_data.FieldMetaData("eWState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_WSPACE, new org.apache.thrift.meta_data.FieldMetaData("eWSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_DNE, new org.apache.thrift.meta_data.FieldMetaData("eDNE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_AE, new org.apache.thrift.meta_data.FieldMetaData("eAE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_T, new org.apache.thrift.meta_data.FieldMetaData("eT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestBlockLocation_result.class, metaDataMap);
    }

    public requestBlockLocation_result() {
    }

    public requestBlockLocation_result(
      String success,
      InvalidWorkerStateException eWState,
      WorkerOutOfSpaceException eWSpace,
      BlockDoesNotExistException eDNE,
      BlockAlreadyExistsException eAE,
      ThriftIOException eT)
    {
      this();
      this.success = success;
      this.eWState = eWState;
      this.eWSpace = eWSpace;
      this.eDNE = eDNE;
      this.eAE = eAE;
      this.eT = eT;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestBlockLocation_result(requestBlockLocation_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEWState()) {
        this.eWState = new InvalidWorkerStateException(other.eWState);
      }
      if (other.isSetEWSpace()) {
        this.eWSpace = new WorkerOutOfSpaceException(other.eWSpace);
      }
      if (other.isSetEDNE()) {
        this.eDNE = new BlockDoesNotExistException(other.eDNE);
      }
      if (other.isSetEAE()) {
        this.eAE = new BlockAlreadyExistsException(other.eAE);
      }
      if (other.isSetET()) {
        this.eT = new ThriftIOException(other.eT);
      }
    }

    public requestBlockLocation_result deepCopy() {
      return new requestBlockLocation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.eWState = null;
      this.eWSpace = null;
      this.eDNE = null;
      this.eAE = null;
      this.eT = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public requestBlockLocation_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidWorkerStateException getEWState() {
      return this.eWState;
    }

    public requestBlockLocation_result setEWState(InvalidWorkerStateException eWState) {
      this.eWState = eWState;
      return this;
    }

    public void unsetEWState() {
      this.eWState = null;
    }

    /** Returns true if field eWState is set (has been assigned a value) and false otherwise */
    public boolean isSetEWState() {
      return this.eWState != null;
    }

    public void setEWStateIsSet(boolean value) {
      if (!value) {
        this.eWState = null;
      }
    }

    public WorkerOutOfSpaceException getEWSpace() {
      return this.eWSpace;
    }

    public requestBlockLocation_result setEWSpace(WorkerOutOfSpaceException eWSpace) {
      this.eWSpace = eWSpace;
      return this;
    }

    public void unsetEWSpace() {
      this.eWSpace = null;
    }

    /** Returns true if field eWSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetEWSpace() {
      return this.eWSpace != null;
    }

    public void setEWSpaceIsSet(boolean value) {
      if (!value) {
        this.eWSpace = null;
      }
    }

    public BlockDoesNotExistException getEDNE() {
      return this.eDNE;
    }

    public requestBlockLocation_result setEDNE(BlockDoesNotExistException eDNE) {
      this.eDNE = eDNE;
      return this;
    }

    public void unsetEDNE() {
      this.eDNE = null;
    }

    /** Returns true if field eDNE is set (has been assigned a value) and false otherwise */
    public boolean isSetEDNE() {
      return this.eDNE != null;
    }

    public void setEDNEIsSet(boolean value) {
      if (!value) {
        this.eDNE = null;
      }
    }

    public BlockAlreadyExistsException getEAE() {
      return this.eAE;
    }

    public requestBlockLocation_result setEAE(BlockAlreadyExistsException eAE) {
      this.eAE = eAE;
      return this;
    }

    public void unsetEAE() {
      this.eAE = null;
    }

    /** Returns true if field eAE is set (has been assigned a value) and false otherwise */
    public boolean isSetEAE() {
      return this.eAE != null;
    }

    public void setEAEIsSet(boolean value) {
      if (!value) {
        this.eAE = null;
      }
    }

    public ThriftIOException getET() {
      return this.eT;
    }

    public requestBlockLocation_result setET(ThriftIOException eT) {
      this.eT = eT;
      return this;
    }

    public void unsetET() {
      this.eT = null;
    }

    /** Returns true if field eT is set (has been assigned a value) and false otherwise */
    public boolean isSetET() {
      return this.eT != null;
    }

    public void setETIsSet(boolean value) {
      if (!value) {
        this.eT = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E_WSTATE:
        if (value == null) {
          unsetEWState();
        } else {
          setEWState((InvalidWorkerStateException)value);
        }
        break;

      case E_WSPACE:
        if (value == null) {
          unsetEWSpace();
        } else {
          setEWSpace((WorkerOutOfSpaceException)value);
        }
        break;

      case E_DNE:
        if (value == null) {
          unsetEDNE();
        } else {
          setEDNE((BlockDoesNotExistException)value);
        }
        break;

      case E_AE:
        if (value == null) {
          unsetEAE();
        } else {
          setEAE((BlockAlreadyExistsException)value);
        }
        break;

      case E_T:
        if (value == null) {
          unsetET();
        } else {
          setET((ThriftIOException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E_WSTATE:
        return getEWState();

      case E_WSPACE:
        return getEWSpace();

      case E_DNE:
        return getEDNE();

      case E_AE:
        return getEAE();

      case E_T:
        return getET();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_WSTATE:
        return isSetEWState();
      case E_WSPACE:
        return isSetEWSpace();
      case E_DNE:
        return isSetEDNE();
      case E_AE:
        return isSetEAE();
      case E_T:
        return isSetET();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestBlockLocation_result)
        return this.equals((requestBlockLocation_result)that);
      return false;
    }

    public boolean equals(requestBlockLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_eWState = true && this.isSetEWState();
      boolean that_present_eWState = true && that.isSetEWState();
      if (this_present_eWState || that_present_eWState) {
        if (!(this_present_eWState && that_present_eWState))
          return false;
        if (!this.eWState.equals(that.eWState))
          return false;
      }

      boolean this_present_eWSpace = true && this.isSetEWSpace();
      boolean that_present_eWSpace = true && that.isSetEWSpace();
      if (this_present_eWSpace || that_present_eWSpace) {
        if (!(this_present_eWSpace && that_present_eWSpace))
          return false;
        if (!this.eWSpace.equals(that.eWSpace))
          return false;
      }

      boolean this_present_eDNE = true && this.isSetEDNE();
      boolean that_present_eDNE = true && that.isSetEDNE();
      if (this_present_eDNE || that_present_eDNE) {
        if (!(this_present_eDNE && that_present_eDNE))
          return false;
        if (!this.eDNE.equals(that.eDNE))
          return false;
      }

      boolean this_present_eAE = true && this.isSetEAE();
      boolean that_present_eAE = true && that.isSetEAE();
      if (this_present_eAE || that_present_eAE) {
        if (!(this_present_eAE && that_present_eAE))
          return false;
        if (!this.eAE.equals(that.eAE))
          return false;
      }

      boolean this_present_eT = true && this.isSetET();
      boolean that_present_eT = true && that.isSetET();
      if (this_present_eT || that_present_eT) {
        if (!(this_present_eT && that_present_eT))
          return false;
        if (!this.eT.equals(that.eT))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_eWState = true && (isSetEWState());
      list.add(present_eWState);
      if (present_eWState)
        list.add(eWState);

      boolean present_eWSpace = true && (isSetEWSpace());
      list.add(present_eWSpace);
      if (present_eWSpace)
        list.add(eWSpace);

      boolean present_eDNE = true && (isSetEDNE());
      list.add(present_eDNE);
      if (present_eDNE)
        list.add(eDNE);

      boolean present_eAE = true && (isSetEAE());
      list.add(present_eAE);
      if (present_eAE)
        list.add(eAE);

      boolean present_eT = true && (isSetET());
      list.add(present_eT);
      if (present_eT)
        list.add(eT);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestBlockLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEWState()).compareTo(other.isSetEWState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEWState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eWState, other.eWState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEWSpace()).compareTo(other.isSetEWSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEWSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eWSpace, other.eWSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEDNE()).compareTo(other.isSetEDNE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEDNE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eDNE, other.eDNE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEAE()).compareTo(other.isSetEAE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEAE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eAE, other.eAE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetET()).compareTo(other.isSetET());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetET()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eT, other.eT);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestBlockLocation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eWState:");
      if (this.eWState == null) {
        sb.append("null");
      } else {
        sb.append(this.eWState);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eWSpace:");
      if (this.eWSpace == null) {
        sb.append("null");
      } else {
        sb.append(this.eWSpace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eDNE:");
      if (this.eDNE == null) {
        sb.append("null");
      } else {
        sb.append(this.eDNE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eAE:");
      if (this.eAE == null) {
        sb.append("null");
      } else {
        sb.append(this.eAE);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eT:");
      if (this.eT == null) {
        sb.append("null");
      } else {
        sb.append(this.eT);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestBlockLocation_resultStandardSchemeFactory implements SchemeFactory {
      public requestBlockLocation_resultStandardScheme getScheme() {
        return new requestBlockLocation_resultStandardScheme();
      }
    }

    private static class requestBlockLocation_resultStandardScheme extends StandardScheme<requestBlockLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestBlockLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E_WSTATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eWState = new InvalidWorkerStateException();
                struct.eWState.read(iprot);
                struct.setEWStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_WSPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eWSpace = new WorkerOutOfSpaceException();
                struct.eWSpace.read(iprot);
                struct.setEWSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E_DNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eDNE = new BlockDoesNotExistException();
                struct.eDNE.read(iprot);
                struct.setEDNEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // E_AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eAE = new BlockAlreadyExistsException();
                struct.eAE.read(iprot);
                struct.setEAEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E_T
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eT = new ThriftIOException();
                struct.eT.read(iprot);
                struct.setETIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestBlockLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.eWState != null) {
          oprot.writeFieldBegin(E_WSTATE_FIELD_DESC);
          struct.eWState.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eWSpace != null) {
          oprot.writeFieldBegin(E_WSPACE_FIELD_DESC);
          struct.eWSpace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eDNE != null) {
          oprot.writeFieldBegin(E_DNE_FIELD_DESC);
          struct.eDNE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eAE != null) {
          oprot.writeFieldBegin(E_AE_FIELD_DESC);
          struct.eAE.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eT != null) {
          oprot.writeFieldBegin(E_T_FIELD_DESC);
          struct.eT.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestBlockLocation_resultTupleSchemeFactory implements SchemeFactory {
      public requestBlockLocation_resultTupleScheme getScheme() {
        return new requestBlockLocation_resultTupleScheme();
      }
    }

    private static class requestBlockLocation_resultTupleScheme extends TupleScheme<requestBlockLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestBlockLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEWState()) {
          optionals.set(1);
        }
        if (struct.isSetEWSpace()) {
          optionals.set(2);
        }
        if (struct.isSetEDNE()) {
          optionals.set(3);
        }
        if (struct.isSetEAE()) {
          optionals.set(4);
        }
        if (struct.isSetET()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEWState()) {
          struct.eWState.write(oprot);
        }
        if (struct.isSetEWSpace()) {
          struct.eWSpace.write(oprot);
        }
        if (struct.isSetEDNE()) {
          struct.eDNE.write(oprot);
        }
        if (struct.isSetEAE()) {
          struct.eAE.write(oprot);
        }
        if (struct.isSetET()) {
          struct.eT.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestBlockLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eWState = new InvalidWorkerStateException();
          struct.eWState.read(iprot);
          struct.setEWStateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eWSpace = new WorkerOutOfSpaceException();
          struct.eWSpace.read(iprot);
          struct.setEWSpaceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eDNE = new BlockDoesNotExistException();
          struct.eDNE.read(iprot);
          struct.setEDNEIsSet(true);
        }
        if (incoming.get(4)) {
          struct.eAE = new BlockAlreadyExistsException();
          struct.eAE.read(iprot);
          struct.setEAEIsSet(true);
        }
        if (incoming.get(5)) {
          struct.eT = new ThriftIOException();
          struct.eT.read(iprot);
          struct.setETIsSet(true);
        }
      }
    }

  }

  public static class requestSpace_args implements org.apache.thrift.TBase<requestSpace_args, requestSpace_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestSpace_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSpace_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBytes", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestSpace_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestSpace_argsTupleSchemeFactory());
    }

    public long sessionId; // required
    public long blockId; // required
    public long requestBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      BLOCK_ID((short)2, "blockId"),
      REQUEST_BYTES((short)3, "requestBytes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // BLOCK_ID
            return BLOCK_ID;
          case 3: // REQUEST_BYTES
            return REQUEST_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private static final int __BLOCKID_ISSET_ID = 1;
    private static final int __REQUESTBYTES_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQUEST_BYTES, new org.apache.thrift.meta_data.FieldMetaData("requestBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSpace_args.class, metaDataMap);
    }

    public requestSpace_args() {
    }

    public requestSpace_args(
      long sessionId,
      long blockId,
      long requestBytes)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.blockId = blockId;
      setBlockIdIsSet(true);
      this.requestBytes = requestBytes;
      setRequestBytesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSpace_args(requestSpace_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionId = other.sessionId;
      this.blockId = other.blockId;
      this.requestBytes = other.requestBytes;
    }

    public requestSpace_args deepCopy() {
      return new requestSpace_args(this);
    }

    @Override
    public void clear() {
      setSessionIdIsSet(false);
      this.sessionId = 0;
      setBlockIdIsSet(false);
      this.blockId = 0;
      setRequestBytesIsSet(false);
      this.requestBytes = 0;
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public requestSpace_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public long getBlockId() {
      return this.blockId;
    }

    public requestSpace_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public long getRequestBytes() {
      return this.requestBytes;
    }

    public requestSpace_args setRequestBytes(long requestBytes) {
      this.requestBytes = requestBytes;
      setRequestBytesIsSet(true);
      return this;
    }

    public void unsetRequestBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
    }

    /** Returns true if field requestBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID);
    }

    public void setRequestBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTBYTES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      case REQUEST_BYTES:
        if (value == null) {
          unsetRequestBytes();
        } else {
          setRequestBytes((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Long.valueOf(getSessionId());

      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      case REQUEST_BYTES:
        return Long.valueOf(getRequestBytes());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case BLOCK_ID:
        return isSetBlockId();
      case REQUEST_BYTES:
        return isSetRequestBytes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestSpace_args)
        return this.equals((requestSpace_args)that);
      return false;
    }

    public boolean equals(requestSpace_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      boolean this_present_requestBytes = true;
      boolean that_present_requestBytes = true;
      if (this_present_requestBytes || that_present_requestBytes) {
        if (!(this_present_requestBytes && that_present_requestBytes))
          return false;
        if (this.requestBytes != that.requestBytes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      boolean present_requestBytes = true;
      list.add(present_requestBytes);
      if (present_requestBytes)
        list.add(requestBytes);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestSpace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBytes()).compareTo(other.isSetRequestBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBytes, other.requestBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestSpace_args(");
      boolean first = true;

      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBytes:");
      sb.append(this.requestBytes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSpace_argsStandardSchemeFactory implements SchemeFactory {
      public requestSpace_argsStandardScheme getScheme() {
        return new requestSpace_argsStandardScheme();
      }
    }

    private static class requestSpace_argsStandardScheme extends StandardScheme<requestSpace_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSpace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestBytes = iprot.readI64();
                struct.setRequestBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSpace_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REQUEST_BYTES_FIELD_DESC);
        oprot.writeI64(struct.requestBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSpace_argsTupleSchemeFactory implements SchemeFactory {
      public requestSpace_argsTupleScheme getScheme() {
        return new requestSpace_argsTupleScheme();
      }
    }

    private static class requestSpace_argsTupleScheme extends TupleScheme<requestSpace_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSpace_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetBlockId()) {
          optionals.set(1);
        }
        if (struct.isSetRequestBytes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
        if (struct.isSetRequestBytes()) {
          oprot.writeI64(struct.requestBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSpace_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.requestBytes = iprot.readI64();
          struct.setRequestBytesIsSet(true);
        }
      }
    }

  }

  public static class requestSpace_result implements org.apache.thrift.TBase<requestSpace_result, requestSpace_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestSpace_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSpace_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestSpace_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestSpace_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSpace_result.class, metaDataMap);
    }

    public requestSpace_result() {
    }

    public requestSpace_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSpace_result(requestSpace_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public requestSpace_result deepCopy() {
      return new requestSpace_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public requestSpace_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestSpace_result)
        return this.equals((requestSpace_result)that);
      return false;
    }

    public boolean equals(requestSpace_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestSpace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestSpace_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSpace_resultStandardSchemeFactory implements SchemeFactory {
      public requestSpace_resultStandardScheme getScheme() {
        return new requestSpace_resultStandardScheme();
      }
    }

    private static class requestSpace_resultStandardScheme extends StandardScheme<requestSpace_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSpace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSpace_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSpace_resultTupleSchemeFactory implements SchemeFactory {
      public requestSpace_resultTupleScheme getScheme() {
        return new requestSpace_resultTupleScheme();
      }
    }

    private static class requestSpace_resultTupleScheme extends TupleScheme<requestSpace_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSpace_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSpace_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class unlockBlock_args implements org.apache.thrift.TBase<unlockBlock_args, unlockBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<unlockBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unlockBlock_args");

    private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unlockBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unlockBlock_argsTupleSchemeFactory());
    }

    public long blockId; // required
    public long sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_ID((short)1, "blockId"),
      SESSION_ID((short)2, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_ID
            return BLOCK_ID;
          case 2: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKID_ISSET_ID = 0;
    private static final int __SESSIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unlockBlock_args.class, metaDataMap);
    }

    public unlockBlock_args() {
    }

    public unlockBlock_args(
      long blockId,
      long sessionId)
    {
      this();
      this.blockId = blockId;
      setBlockIdIsSet(true);
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unlockBlock_args(unlockBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.blockId = other.blockId;
      this.sessionId = other.sessionId;
    }

    public unlockBlock_args deepCopy() {
      return new unlockBlock_args(this);
    }

    @Override
    public void clear() {
      setBlockIdIsSet(false);
      this.blockId = 0;
      setSessionIdIsSet(false);
      this.sessionId = 0;
    }

    public long getBlockId() {
      return this.blockId;
    }

    public unlockBlock_args setBlockId(long blockId) {
      this.blockId = blockId;
      setBlockIdIsSet(true);
      return this;
    }

    public void unsetBlockId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockId() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
    }

    public void setBlockIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public unlockBlock_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLOCK_ID:
        if (value == null) {
          unsetBlockId();
        } else {
          setBlockId((Long)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_ID:
        return Long.valueOf(getBlockId());

      case SESSION_ID:
        return Long.valueOf(getSessionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_ID:
        return isSetBlockId();
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unlockBlock_args)
        return this.equals((unlockBlock_args)that);
      return false;
    }

    public boolean equals(unlockBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_blockId = true;
      boolean that_present_blockId = true;
      if (this_present_blockId || that_present_blockId) {
        if (!(this_present_blockId && that_present_blockId))
          return false;
        if (this.blockId != that.blockId)
          return false;
      }

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blockId = true;
      list.add(present_blockId);
      if (present_blockId)
        list.add(blockId);

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unlockBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unlockBlock_args(");
      boolean first = true;

      sb.append("blockId:");
      sb.append(this.blockId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unlockBlock_argsStandardSchemeFactory implements SchemeFactory {
      public unlockBlock_argsStandardScheme getScheme() {
        return new unlockBlock_argsStandardScheme();
      }
    }

    private static class unlockBlock_argsStandardScheme extends StandardScheme<unlockBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unlockBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockId = iprot.readI64();
                struct.setBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unlockBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
        oprot.writeI64(struct.blockId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unlockBlock_argsTupleSchemeFactory implements SchemeFactory {
      public unlockBlock_argsTupleScheme getScheme() {
        return new unlockBlock_argsTupleScheme();
      }
    }

    private static class unlockBlock_argsTupleScheme extends TupleScheme<unlockBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unlockBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlockId()) {
          optionals.set(0);
        }
        if (struct.isSetSessionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBlockId()) {
          oprot.writeI64(struct.blockId);
        }
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unlockBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.blockId = iprot.readI64();
          struct.setBlockIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class unlockBlock_result implements org.apache.thrift.TBase<unlockBlock_result, unlockBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<unlockBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unlockBlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_DNE_FIELD_DESC = new org.apache.thrift.protocol.TField("eDNE", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unlockBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unlockBlock_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BlockDoesNotExistException eDNE; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_DNE((short)1, "eDNE");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_DNE
            return E_DNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E_DNE, new org.apache.thrift.meta_data.FieldMetaData("eDNE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unlockBlock_result.class, metaDataMap);
    }

    public unlockBlock_result() {
    }

    public unlockBlock_result(
      boolean success,
      BlockDoesNotExistException eDNE)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.eDNE = eDNE;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unlockBlock_result(unlockBlock_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEDNE()) {
        this.eDNE = new BlockDoesNotExistException(other.eDNE);
      }
    }

    public unlockBlock_result deepCopy() {
      return new unlockBlock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.eDNE = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unlockBlock_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BlockDoesNotExistException getEDNE() {
      return this.eDNE;
    }

    public unlockBlock_result setEDNE(BlockDoesNotExistException eDNE) {
      this.eDNE = eDNE;
      return this;
    }

    public void unsetEDNE() {
      this.eDNE = null;
    }

    /** Returns true if field eDNE is set (has been assigned a value) and false otherwise */
    public boolean isSetEDNE() {
      return this.eDNE != null;
    }

    public void setEDNEIsSet(boolean value) {
      if (!value) {
        this.eDNE = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E_DNE:
        if (value == null) {
          unsetEDNE();
        } else {
          setEDNE((BlockDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E_DNE:
        return getEDNE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_DNE:
        return isSetEDNE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unlockBlock_result)
        return this.equals((unlockBlock_result)that);
      return false;
    }

    public boolean equals(unlockBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_eDNE = true && this.isSetEDNE();
      boolean that_present_eDNE = true && that.isSetEDNE();
      if (this_present_eDNE || that_present_eDNE) {
        if (!(this_present_eDNE && that_present_eDNE))
          return false;
        if (!this.eDNE.equals(that.eDNE))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_eDNE = true && (isSetEDNE());
      list.add(present_eDNE);
      if (present_eDNE)
        list.add(eDNE);

      return list.hashCode();
    }

    @Override
    public int compareTo(unlockBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEDNE()).compareTo(other.isSetEDNE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEDNE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eDNE, other.eDNE);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unlockBlock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("eDNE:");
      if (this.eDNE == null) {
        sb.append("null");
      } else {
        sb.append(this.eDNE);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unlockBlock_resultStandardSchemeFactory implements SchemeFactory {
      public unlockBlock_resultStandardScheme getScheme() {
        return new unlockBlock_resultStandardScheme();
      }
    }

    private static class unlockBlock_resultStandardScheme extends StandardScheme<unlockBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unlockBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E_DNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eDNE = new BlockDoesNotExistException();
                struct.eDNE.read(iprot);
                struct.setEDNEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unlockBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.eDNE != null) {
          oprot.writeFieldBegin(E_DNE_FIELD_DESC);
          struct.eDNE.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unlockBlock_resultTupleSchemeFactory implements SchemeFactory {
      public unlockBlock_resultTupleScheme getScheme() {
        return new unlockBlock_resultTupleScheme();
      }
    }

    private static class unlockBlock_resultTupleScheme extends TupleScheme<unlockBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unlockBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEDNE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEDNE()) {
          struct.eDNE.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unlockBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eDNE = new BlockDoesNotExistException();
          struct.eDNE.read(iprot);
          struct.setEDNEIsSet(true);
        }
      }
    }

  }

  public static class sessionHeartbeat_args implements org.apache.thrift.TBase<sessionHeartbeat_args, sessionHeartbeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<sessionHeartbeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sessionHeartbeat_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sessionHeartbeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sessionHeartbeat_argsTupleSchemeFactory());
    }

    public long sessionId; // required
    public List<Long> metrics; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      METRICS((short)2, "metrics");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // METRICS
            return METRICS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sessionHeartbeat_args.class, metaDataMap);
    }

    public sessionHeartbeat_args() {
    }

    public sessionHeartbeat_args(
      long sessionId,
      List<Long> metrics)
    {
      this();
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      this.metrics = metrics;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sessionHeartbeat_args(sessionHeartbeat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionId = other.sessionId;
      if (other.isSetMetrics()) {
        List<Long> __this__metrics = new ArrayList<Long>(other.metrics);
        this.metrics = __this__metrics;
      }
    }

    public sessionHeartbeat_args deepCopy() {
      return new sessionHeartbeat_args(this);
    }

    @Override
    public void clear() {
      setSessionIdIsSet(false);
      this.sessionId = 0;
      this.metrics = null;
    }

    public long getSessionId() {
      return this.sessionId;
    }

    public sessionHeartbeat_args setSessionId(long sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public int getMetricsSize() {
      return (this.metrics == null) ? 0 : this.metrics.size();
    }

    public java.util.Iterator<Long> getMetricsIterator() {
      return (this.metrics == null) ? null : this.metrics.iterator();
    }

    public void addToMetrics(long elem) {
      if (this.metrics == null) {
        this.metrics = new ArrayList<Long>();
      }
      this.metrics.add(elem);
    }

    public List<Long> getMetrics() {
      return this.metrics;
    }

    public sessionHeartbeat_args setMetrics(List<Long> metrics) {
      this.metrics = metrics;
      return this;
    }

    public void unsetMetrics() {
      this.metrics = null;
    }

    /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
    public boolean isSetMetrics() {
      return this.metrics != null;
    }

    public void setMetricsIsSet(boolean value) {
      if (!value) {
        this.metrics = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((Long)value);
        }
        break;

      case METRICS:
        if (value == null) {
          unsetMetrics();
        } else {
          setMetrics((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Long.valueOf(getSessionId());

      case METRICS:
        return getMetrics();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case METRICS:
        return isSetMetrics();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sessionHeartbeat_args)
        return this.equals((sessionHeartbeat_args)that);
      return false;
    }

    public boolean equals(sessionHeartbeat_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      boolean this_present_metrics = true && this.isSetMetrics();
      boolean that_present_metrics = true && that.isSetMetrics();
      if (this_present_metrics || that_present_metrics) {
        if (!(this_present_metrics && that_present_metrics))
          return false;
        if (!this.metrics.equals(that.metrics))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true;
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      boolean present_metrics = true && (isSetMetrics());
      list.add(present_metrics);
      if (present_metrics)
        list.add(metrics);

      return list.hashCode();
    }

    @Override
    public int compareTo(sessionHeartbeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetrics()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sessionHeartbeat_args(");
      boolean first = true;

      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("metrics:");
      if (this.metrics == null) {
        sb.append("null");
      } else {
        sb.append(this.metrics);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sessionHeartbeat_argsStandardSchemeFactory implements SchemeFactory {
      public sessionHeartbeat_argsStandardScheme getScheme() {
        return new sessionHeartbeat_argsStandardScheme();
      }
    }

    private static class sessionHeartbeat_argsStandardScheme extends StandardScheme<sessionHeartbeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sessionHeartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionId = iprot.readI64();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METRICS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
                  struct.metrics = new ArrayList<Long>(_list188.size);
                  long _elem189;
                  for (int _i190 = 0; _i190 < _list188.size; ++_i190)
                  {
                    _elem189 = iprot.readI64();
                    struct.metrics.add(_elem189);
                  }
                  iprot.readListEnd();
                }
                struct.setMetricsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sessionHeartbeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI64(struct.sessionId);
        oprot.writeFieldEnd();
        if (struct.metrics != null) {
          oprot.writeFieldBegin(METRICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.metrics.size()));
            for (long _iter191 : struct.metrics)
            {
              oprot.writeI64(_iter191);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sessionHeartbeat_argsTupleSchemeFactory implements SchemeFactory {
      public sessionHeartbeat_argsTupleScheme getScheme() {
        return new sessionHeartbeat_argsTupleScheme();
      }
    }

    private static class sessionHeartbeat_argsTupleScheme extends TupleScheme<sessionHeartbeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sessionHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetMetrics()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionId()) {
          oprot.writeI64(struct.sessionId);
        }
        if (struct.isSetMetrics()) {
          {
            oprot.writeI32(struct.metrics.size());
            for (long _iter192 : struct.metrics)
            {
              oprot.writeI64(_iter192);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sessionHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readI64();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list193 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.metrics = new ArrayList<Long>(_list193.size);
            long _elem194;
            for (int _i195 = 0; _i195 < _list193.size; ++_i195)
            {
              _elem194 = iprot.readI64();
              struct.metrics.add(_elem194);
            }
          }
          struct.setMetricsIsSet(true);
        }
      }
    }

  }

  public static class sessionHeartbeat_result implements org.apache.thrift.TBase<sessionHeartbeat_result, sessionHeartbeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<sessionHeartbeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sessionHeartbeat_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sessionHeartbeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sessionHeartbeat_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sessionHeartbeat_result.class, metaDataMap);
    }

    public sessionHeartbeat_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sessionHeartbeat_result(sessionHeartbeat_result other) {
    }

    public sessionHeartbeat_result deepCopy() {
      return new sessionHeartbeat_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sessionHeartbeat_result)
        return this.equals((sessionHeartbeat_result)that);
      return false;
    }

    public boolean equals(sessionHeartbeat_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sessionHeartbeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sessionHeartbeat_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sessionHeartbeat_resultStandardSchemeFactory implements SchemeFactory {
      public sessionHeartbeat_resultStandardScheme getScheme() {
        return new sessionHeartbeat_resultStandardScheme();
      }
    }

    private static class sessionHeartbeat_resultStandardScheme extends StandardScheme<sessionHeartbeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sessionHeartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sessionHeartbeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sessionHeartbeat_resultTupleSchemeFactory implements SchemeFactory {
      public sessionHeartbeat_resultTupleScheme getScheme() {
        return new sessionHeartbeat_resultTupleScheme();
      }
    }

    private static class sessionHeartbeat_resultTupleScheme extends TupleScheme<sessionHeartbeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sessionHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sessionHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
