/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-16")
public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileInfo");

  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UFS_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("ufsPath", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSizeBytes", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("creationTimeMs", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField IS_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("isCompleted", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_FOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isFolder", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IS_PINNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isPinned", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField IS_CACHEABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isCacheable", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IS_PERSISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isPersisted", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField BLOCK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("blockIds", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField IN_MEMORY_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("inMemoryPercentage", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LAST_MODIFICATION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModificationTimeMs", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileInfoTupleSchemeFactory());
  }

  public long fileId; // required
  public String name; // required
  public String path; // required
  public String ufsPath; // required
  public long length; // required
  public long blockSizeBytes; // required
  public long creationTimeMs; // required
  public boolean isCompleted; // required
  public boolean isFolder; // required
  public boolean isPinned; // required
  public boolean isCacheable; // required
  public boolean isPersisted; // required
  public List<Long> blockIds; // required
  public int inMemoryPercentage; // required
  public long lastModificationTimeMs; // required
  public long ttl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_ID((short)1, "fileId"),
    NAME((short)2, "name"),
    PATH((short)3, "path"),
    UFS_PATH((short)4, "ufsPath"),
    LENGTH((short)5, "length"),
    BLOCK_SIZE_BYTES((short)6, "blockSizeBytes"),
    CREATION_TIME_MS((short)7, "creationTimeMs"),
    IS_COMPLETED((short)8, "isCompleted"),
    IS_FOLDER((short)9, "isFolder"),
    IS_PINNED((short)10, "isPinned"),
    IS_CACHEABLE((short)11, "isCacheable"),
    IS_PERSISTED((short)12, "isPersisted"),
    BLOCK_IDS((short)13, "blockIds"),
    IN_MEMORY_PERCENTAGE((short)15, "inMemoryPercentage"),
    LAST_MODIFICATION_TIME_MS((short)16, "lastModificationTimeMs"),
    TTL((short)17, "ttl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_ID
          return FILE_ID;
        case 2: // NAME
          return NAME;
        case 3: // PATH
          return PATH;
        case 4: // UFS_PATH
          return UFS_PATH;
        case 5: // LENGTH
          return LENGTH;
        case 6: // BLOCK_SIZE_BYTES
          return BLOCK_SIZE_BYTES;
        case 7: // CREATION_TIME_MS
          return CREATION_TIME_MS;
        case 8: // IS_COMPLETED
          return IS_COMPLETED;
        case 9: // IS_FOLDER
          return IS_FOLDER;
        case 10: // IS_PINNED
          return IS_PINNED;
        case 11: // IS_CACHEABLE
          return IS_CACHEABLE;
        case 12: // IS_PERSISTED
          return IS_PERSISTED;
        case 13: // BLOCK_IDS
          return BLOCK_IDS;
        case 15: // IN_MEMORY_PERCENTAGE
          return IN_MEMORY_PERCENTAGE;
        case 16: // LAST_MODIFICATION_TIME_MS
          return LAST_MODIFICATION_TIME_MS;
        case 17: // TTL
          return TTL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILEID_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private static final int __BLOCKSIZEBYTES_ISSET_ID = 2;
  private static final int __CREATIONTIMEMS_ISSET_ID = 3;
  private static final int __ISCOMPLETED_ISSET_ID = 4;
  private static final int __ISFOLDER_ISSET_ID = 5;
  private static final int __ISPINNED_ISSET_ID = 6;
  private static final int __ISCACHEABLE_ISSET_ID = 7;
  private static final int __ISPERSISTED_ISSET_ID = 8;
  private static final int __INMEMORYPERCENTAGE_ISSET_ID = 9;
  private static final int __LASTMODIFICATIONTIMEMS_ISSET_ID = 10;
  private static final int __TTL_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UFS_PATH, new org.apache.thrift.meta_data.FieldMetaData("ufsPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("blockSizeBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("creationTimeMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("isCompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FOLDER, new org.apache.thrift.meta_data.FieldMetaData("isFolder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PINNED, new org.apache.thrift.meta_data.FieldMetaData("isPinned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_CACHEABLE, new org.apache.thrift.meta_data.FieldMetaData("isCacheable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PERSISTED, new org.apache.thrift.meta_data.FieldMetaData("isPersisted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLOCK_IDS, new org.apache.thrift.meta_data.FieldMetaData("blockIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.IN_MEMORY_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("inMemoryPercentage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_MODIFICATION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("lastModificationTimeMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileInfo.class, metaDataMap);
  }

  public FileInfo() {
  }

  public FileInfo(
    long fileId,
    String name,
    String path,
    String ufsPath,
    long length,
    long blockSizeBytes,
    long creationTimeMs,
    boolean isCompleted,
    boolean isFolder,
    boolean isPinned,
    boolean isCacheable,
    boolean isPersisted,
    List<Long> blockIds,
    int inMemoryPercentage,
    long lastModificationTimeMs,
    long ttl)
  {
    this();
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.name = name;
    this.path = path;
    this.ufsPath = ufsPath;
    this.length = length;
    setLengthIsSet(true);
    this.blockSizeBytes = blockSizeBytes;
    setBlockSizeBytesIsSet(true);
    this.creationTimeMs = creationTimeMs;
    setCreationTimeMsIsSet(true);
    this.isCompleted = isCompleted;
    setIsCompletedIsSet(true);
    this.isFolder = isFolder;
    setIsFolderIsSet(true);
    this.isPinned = isPinned;
    setIsPinnedIsSet(true);
    this.isCacheable = isCacheable;
    setIsCacheableIsSet(true);
    this.isPersisted = isPersisted;
    setIsPersistedIsSet(true);
    this.blockIds = blockIds;
    this.inMemoryPercentage = inMemoryPercentage;
    setInMemoryPercentageIsSet(true);
    this.lastModificationTimeMs = lastModificationTimeMs;
    setLastModificationTimeMsIsSet(true);
    this.ttl = ttl;
    setTtlIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileInfo(FileInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fileId = other.fileId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetUfsPath()) {
      this.ufsPath = other.ufsPath;
    }
    this.length = other.length;
    this.blockSizeBytes = other.blockSizeBytes;
    this.creationTimeMs = other.creationTimeMs;
    this.isCompleted = other.isCompleted;
    this.isFolder = other.isFolder;
    this.isPinned = other.isPinned;
    this.isCacheable = other.isCacheable;
    this.isPersisted = other.isPersisted;
    if (other.isSetBlockIds()) {
      List<Long> __this__blockIds = new ArrayList<Long>(other.blockIds);
      this.blockIds = __this__blockIds;
    }
    this.inMemoryPercentage = other.inMemoryPercentage;
    this.lastModificationTimeMs = other.lastModificationTimeMs;
    this.ttl = other.ttl;
  }

  public FileInfo deepCopy() {
    return new FileInfo(this);
  }

  @Override
  public void clear() {
    setFileIdIsSet(false);
    this.fileId = 0;
    this.name = null;
    this.path = null;
    this.ufsPath = null;
    setLengthIsSet(false);
    this.length = 0;
    setBlockSizeBytesIsSet(false);
    this.blockSizeBytes = 0;
    setCreationTimeMsIsSet(false);
    this.creationTimeMs = 0;
    setIsCompletedIsSet(false);
    this.isCompleted = false;
    setIsFolderIsSet(false);
    this.isFolder = false;
    setIsPinnedIsSet(false);
    this.isPinned = false;
    setIsCacheableIsSet(false);
    this.isCacheable = false;
    setIsPersistedIsSet(false);
    this.isPersisted = false;
    this.blockIds = null;
    setInMemoryPercentageIsSet(false);
    this.inMemoryPercentage = 0;
    setLastModificationTimeMsIsSet(false);
    this.lastModificationTimeMs = 0;
    setTtlIsSet(false);
    this.ttl = 0;
  }

  public long getFileId() {
    return this.fileId;
  }

  public FileInfo setFileId(long fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public FileInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public FileInfo setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getUfsPath() {
    return this.ufsPath;
  }

  public FileInfo setUfsPath(String ufsPath) {
    this.ufsPath = ufsPath;
    return this;
  }

  public void unsetUfsPath() {
    this.ufsPath = null;
  }

  /** Returns true if field ufsPath is set (has been assigned a value) and false otherwise */
  public boolean isSetUfsPath() {
    return this.ufsPath != null;
  }

  public void setUfsPathIsSet(boolean value) {
    if (!value) {
      this.ufsPath = null;
    }
  }

  public long getLength() {
    return this.length;
  }

  public FileInfo setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public long getBlockSizeBytes() {
    return this.blockSizeBytes;
  }

  public FileInfo setBlockSizeBytes(long blockSizeBytes) {
    this.blockSizeBytes = blockSizeBytes;
    setBlockSizeBytesIsSet(true);
    return this;
  }

  public void unsetBlockSizeBytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID);
  }

  /** Returns true if field blockSizeBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockSizeBytes() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID);
  }

  public void setBlockSizeBytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZEBYTES_ISSET_ID, value);
  }

  public long getCreationTimeMs() {
    return this.creationTimeMs;
  }

  public FileInfo setCreationTimeMs(long creationTimeMs) {
    this.creationTimeMs = creationTimeMs;
    setCreationTimeMsIsSet(true);
    return this;
  }

  public void unsetCreationTimeMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONTIMEMS_ISSET_ID);
  }

  /** Returns true if field creationTimeMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationTimeMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONTIMEMS_ISSET_ID);
  }

  public void setCreationTimeMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONTIMEMS_ISSET_ID, value);
  }

  public boolean isIsCompleted() {
    return this.isCompleted;
  }

  public FileInfo setIsCompleted(boolean isCompleted) {
    this.isCompleted = isCompleted;
    setIsCompletedIsSet(true);
    return this;
  }

  public void unsetIsCompleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOMPLETED_ISSET_ID);
  }

  /** Returns true if field isCompleted is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCompleted() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOMPLETED_ISSET_ID);
  }

  public void setIsCompletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOMPLETED_ISSET_ID, value);
  }

  public boolean isIsFolder() {
    return this.isFolder;
  }

  public FileInfo setIsFolder(boolean isFolder) {
    this.isFolder = isFolder;
    setIsFolderIsSet(true);
    return this;
  }

  public void unsetIsFolder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFOLDER_ISSET_ID);
  }

  /** Returns true if field isFolder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFolder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFOLDER_ISSET_ID);
  }

  public void setIsFolderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFOLDER_ISSET_ID, value);
  }

  public boolean isIsPinned() {
    return this.isPinned;
  }

  public FileInfo setIsPinned(boolean isPinned) {
    this.isPinned = isPinned;
    setIsPinnedIsSet(true);
    return this;
  }

  public void unsetIsPinned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPINNED_ISSET_ID);
  }

  /** Returns true if field isPinned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPinned() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPINNED_ISSET_ID);
  }

  public void setIsPinnedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPINNED_ISSET_ID, value);
  }

  public boolean isIsCacheable() {
    return this.isCacheable;
  }

  public FileInfo setIsCacheable(boolean isCacheable) {
    this.isCacheable = isCacheable;
    setIsCacheableIsSet(true);
    return this;
  }

  public void unsetIsCacheable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCACHEABLE_ISSET_ID);
  }

  /** Returns true if field isCacheable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCacheable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCACHEABLE_ISSET_ID);
  }

  public void setIsCacheableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCACHEABLE_ISSET_ID, value);
  }

  public boolean isIsPersisted() {
    return this.isPersisted;
  }

  public FileInfo setIsPersisted(boolean isPersisted) {
    this.isPersisted = isPersisted;
    setIsPersistedIsSet(true);
    return this;
  }

  public void unsetIsPersisted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPERSISTED_ISSET_ID);
  }

  /** Returns true if field isPersisted is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPersisted() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPERSISTED_ISSET_ID);
  }

  public void setIsPersistedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPERSISTED_ISSET_ID, value);
  }

  public int getBlockIdsSize() {
    return (this.blockIds == null) ? 0 : this.blockIds.size();
  }

  public java.util.Iterator<Long> getBlockIdsIterator() {
    return (this.blockIds == null) ? null : this.blockIds.iterator();
  }

  public void addToBlockIds(long elem) {
    if (this.blockIds == null) {
      this.blockIds = new ArrayList<Long>();
    }
    this.blockIds.add(elem);
  }

  public List<Long> getBlockIds() {
    return this.blockIds;
  }

  public FileInfo setBlockIds(List<Long> blockIds) {
    this.blockIds = blockIds;
    return this;
  }

  public void unsetBlockIds() {
    this.blockIds = null;
  }

  /** Returns true if field blockIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockIds() {
    return this.blockIds != null;
  }

  public void setBlockIdsIsSet(boolean value) {
    if (!value) {
      this.blockIds = null;
    }
  }

  public int getInMemoryPercentage() {
    return this.inMemoryPercentage;
  }

  public FileInfo setInMemoryPercentage(int inMemoryPercentage) {
    this.inMemoryPercentage = inMemoryPercentage;
    setInMemoryPercentageIsSet(true);
    return this;
  }

  public void unsetInMemoryPercentage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INMEMORYPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field inMemoryPercentage is set (has been assigned a value) and false otherwise */
  public boolean isSetInMemoryPercentage() {
    return EncodingUtils.testBit(__isset_bitfield, __INMEMORYPERCENTAGE_ISSET_ID);
  }

  public void setInMemoryPercentageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INMEMORYPERCENTAGE_ISSET_ID, value);
  }

  public long getLastModificationTimeMs() {
    return this.lastModificationTimeMs;
  }

  public FileInfo setLastModificationTimeMs(long lastModificationTimeMs) {
    this.lastModificationTimeMs = lastModificationTimeMs;
    setLastModificationTimeMsIsSet(true);
    return this;
  }

  public void unsetLastModificationTimeMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFICATIONTIMEMS_ISSET_ID);
  }

  /** Returns true if field lastModificationTimeMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModificationTimeMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFICATIONTIMEMS_ISSET_ID);
  }

  public void setLastModificationTimeMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFICATIONTIMEMS_ISSET_ID, value);
  }

  public long getTtl() {
    return this.ttl;
  }

  public FileInfo setTtl(long ttl) {
    this.ttl = ttl;
    setTtlIsSet(true);
    return this;
  }

  public void unsetTtl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
  }

  /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
  public boolean isSetTtl() {
    return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
  }

  public void setTtlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case UFS_PATH:
      if (value == null) {
        unsetUfsPath();
      } else {
        setUfsPath((String)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case BLOCK_SIZE_BYTES:
      if (value == null) {
        unsetBlockSizeBytes();
      } else {
        setBlockSizeBytes((Long)value);
      }
      break;

    case CREATION_TIME_MS:
      if (value == null) {
        unsetCreationTimeMs();
      } else {
        setCreationTimeMs((Long)value);
      }
      break;

    case IS_COMPLETED:
      if (value == null) {
        unsetIsCompleted();
      } else {
        setIsCompleted((Boolean)value);
      }
      break;

    case IS_FOLDER:
      if (value == null) {
        unsetIsFolder();
      } else {
        setIsFolder((Boolean)value);
      }
      break;

    case IS_PINNED:
      if (value == null) {
        unsetIsPinned();
      } else {
        setIsPinned((Boolean)value);
      }
      break;

    case IS_CACHEABLE:
      if (value == null) {
        unsetIsCacheable();
      } else {
        setIsCacheable((Boolean)value);
      }
      break;

    case IS_PERSISTED:
      if (value == null) {
        unsetIsPersisted();
      } else {
        setIsPersisted((Boolean)value);
      }
      break;

    case BLOCK_IDS:
      if (value == null) {
        unsetBlockIds();
      } else {
        setBlockIds((List<Long>)value);
      }
      break;

    case IN_MEMORY_PERCENTAGE:
      if (value == null) {
        unsetInMemoryPercentage();
      } else {
        setInMemoryPercentage((Integer)value);
      }
      break;

    case LAST_MODIFICATION_TIME_MS:
      if (value == null) {
        unsetLastModificationTimeMs();
      } else {
        setLastModificationTimeMs((Long)value);
      }
      break;

    case TTL:
      if (value == null) {
        unsetTtl();
      } else {
        setTtl((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_ID:
      return Long.valueOf(getFileId());

    case NAME:
      return getName();

    case PATH:
      return getPath();

    case UFS_PATH:
      return getUfsPath();

    case LENGTH:
      return Long.valueOf(getLength());

    case BLOCK_SIZE_BYTES:
      return Long.valueOf(getBlockSizeBytes());

    case CREATION_TIME_MS:
      return Long.valueOf(getCreationTimeMs());

    case IS_COMPLETED:
      return Boolean.valueOf(isIsCompleted());

    case IS_FOLDER:
      return Boolean.valueOf(isIsFolder());

    case IS_PINNED:
      return Boolean.valueOf(isIsPinned());

    case IS_CACHEABLE:
      return Boolean.valueOf(isIsCacheable());

    case IS_PERSISTED:
      return Boolean.valueOf(isIsPersisted());

    case BLOCK_IDS:
      return getBlockIds();

    case IN_MEMORY_PERCENTAGE:
      return Integer.valueOf(getInMemoryPercentage());

    case LAST_MODIFICATION_TIME_MS:
      return Long.valueOf(getLastModificationTimeMs());

    case TTL:
      return Long.valueOf(getTtl());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_ID:
      return isSetFileId();
    case NAME:
      return isSetName();
    case PATH:
      return isSetPath();
    case UFS_PATH:
      return isSetUfsPath();
    case LENGTH:
      return isSetLength();
    case BLOCK_SIZE_BYTES:
      return isSetBlockSizeBytes();
    case CREATION_TIME_MS:
      return isSetCreationTimeMs();
    case IS_COMPLETED:
      return isSetIsCompleted();
    case IS_FOLDER:
      return isSetIsFolder();
    case IS_PINNED:
      return isSetIsPinned();
    case IS_CACHEABLE:
      return isSetIsCacheable();
    case IS_PERSISTED:
      return isSetIsPersisted();
    case BLOCK_IDS:
      return isSetBlockIds();
    case IN_MEMORY_PERCENTAGE:
      return isSetInMemoryPercentage();
    case LAST_MODIFICATION_TIME_MS:
      return isSetLastModificationTimeMs();
    case TTL:
      return isSetTtl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileInfo)
      return this.equals((FileInfo)that);
    return false;
  }

  public boolean equals(FileInfo that) {
    if (that == null)
      return false;

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_ufsPath = true && this.isSetUfsPath();
    boolean that_present_ufsPath = true && that.isSetUfsPath();
    if (this_present_ufsPath || that_present_ufsPath) {
      if (!(this_present_ufsPath && that_present_ufsPath))
        return false;
      if (!this.ufsPath.equals(that.ufsPath))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_blockSizeBytes = true;
    boolean that_present_blockSizeBytes = true;
    if (this_present_blockSizeBytes || that_present_blockSizeBytes) {
      if (!(this_present_blockSizeBytes && that_present_blockSizeBytes))
        return false;
      if (this.blockSizeBytes != that.blockSizeBytes)
        return false;
    }

    boolean this_present_creationTimeMs = true;
    boolean that_present_creationTimeMs = true;
    if (this_present_creationTimeMs || that_present_creationTimeMs) {
      if (!(this_present_creationTimeMs && that_present_creationTimeMs))
        return false;
      if (this.creationTimeMs != that.creationTimeMs)
        return false;
    }

    boolean this_present_isCompleted = true;
    boolean that_present_isCompleted = true;
    if (this_present_isCompleted || that_present_isCompleted) {
      if (!(this_present_isCompleted && that_present_isCompleted))
        return false;
      if (this.isCompleted != that.isCompleted)
        return false;
    }

    boolean this_present_isFolder = true;
    boolean that_present_isFolder = true;
    if (this_present_isFolder || that_present_isFolder) {
      if (!(this_present_isFolder && that_present_isFolder))
        return false;
      if (this.isFolder != that.isFolder)
        return false;
    }

    boolean this_present_isPinned = true;
    boolean that_present_isPinned = true;
    if (this_present_isPinned || that_present_isPinned) {
      if (!(this_present_isPinned && that_present_isPinned))
        return false;
      if (this.isPinned != that.isPinned)
        return false;
    }

    boolean this_present_isCacheable = true;
    boolean that_present_isCacheable = true;
    if (this_present_isCacheable || that_present_isCacheable) {
      if (!(this_present_isCacheable && that_present_isCacheable))
        return false;
      if (this.isCacheable != that.isCacheable)
        return false;
    }

    boolean this_present_isPersisted = true;
    boolean that_present_isPersisted = true;
    if (this_present_isPersisted || that_present_isPersisted) {
      if (!(this_present_isPersisted && that_present_isPersisted))
        return false;
      if (this.isPersisted != that.isPersisted)
        return false;
    }

    boolean this_present_blockIds = true && this.isSetBlockIds();
    boolean that_present_blockIds = true && that.isSetBlockIds();
    if (this_present_blockIds || that_present_blockIds) {
      if (!(this_present_blockIds && that_present_blockIds))
        return false;
      if (!this.blockIds.equals(that.blockIds))
        return false;
    }

    boolean this_present_inMemoryPercentage = true;
    boolean that_present_inMemoryPercentage = true;
    if (this_present_inMemoryPercentage || that_present_inMemoryPercentage) {
      if (!(this_present_inMemoryPercentage && that_present_inMemoryPercentage))
        return false;
      if (this.inMemoryPercentage != that.inMemoryPercentage)
        return false;
    }

    boolean this_present_lastModificationTimeMs = true;
    boolean that_present_lastModificationTimeMs = true;
    if (this_present_lastModificationTimeMs || that_present_lastModificationTimeMs) {
      if (!(this_present_lastModificationTimeMs && that_present_lastModificationTimeMs))
        return false;
      if (this.lastModificationTimeMs != that.lastModificationTimeMs)
        return false;
    }

    boolean this_present_ttl = true;
    boolean that_present_ttl = true;
    if (this_present_ttl || that_present_ttl) {
      if (!(this_present_ttl && that_present_ttl))
        return false;
      if (this.ttl != that.ttl)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_path = true && (isSetPath());
    list.add(present_path);
    if (present_path)
      list.add(path);

    boolean present_ufsPath = true && (isSetUfsPath());
    list.add(present_ufsPath);
    if (present_ufsPath)
      list.add(ufsPath);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    boolean present_blockSizeBytes = true;
    list.add(present_blockSizeBytes);
    if (present_blockSizeBytes)
      list.add(blockSizeBytes);

    boolean present_creationTimeMs = true;
    list.add(present_creationTimeMs);
    if (present_creationTimeMs)
      list.add(creationTimeMs);

    boolean present_isCompleted = true;
    list.add(present_isCompleted);
    if (present_isCompleted)
      list.add(isCompleted);

    boolean present_isFolder = true;
    list.add(present_isFolder);
    if (present_isFolder)
      list.add(isFolder);

    boolean present_isPinned = true;
    list.add(present_isPinned);
    if (present_isPinned)
      list.add(isPinned);

    boolean present_isCacheable = true;
    list.add(present_isCacheable);
    if (present_isCacheable)
      list.add(isCacheable);

    boolean present_isPersisted = true;
    list.add(present_isPersisted);
    if (present_isPersisted)
      list.add(isPersisted);

    boolean present_blockIds = true && (isSetBlockIds());
    list.add(present_blockIds);
    if (present_blockIds)
      list.add(blockIds);

    boolean present_inMemoryPercentage = true;
    list.add(present_inMemoryPercentage);
    if (present_inMemoryPercentage)
      list.add(inMemoryPercentage);

    boolean present_lastModificationTimeMs = true;
    list.add(present_lastModificationTimeMs);
    if (present_lastModificationTimeMs)
      list.add(lastModificationTimeMs);

    boolean present_ttl = true;
    list.add(present_ttl);
    if (present_ttl)
      list.add(ttl);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUfsPath()).compareTo(other.isSetUfsPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUfsPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ufsPath, other.ufsPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockSizeBytes()).compareTo(other.isSetBlockSizeBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockSizeBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSizeBytes, other.blockSizeBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationTimeMs()).compareTo(other.isSetCreationTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationTimeMs, other.creationTimeMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCompleted()).compareTo(other.isSetIsCompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCompleted, other.isCompleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFolder()).compareTo(other.isSetIsFolder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFolder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFolder, other.isFolder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPinned()).compareTo(other.isSetIsPinned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPinned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPinned, other.isPinned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCacheable()).compareTo(other.isSetIsCacheable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCacheable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCacheable, other.isCacheable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPersisted()).compareTo(other.isSetIsPersisted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPersisted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPersisted, other.isPersisted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockIds()).compareTo(other.isSetBlockIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockIds, other.blockIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInMemoryPercentage()).compareTo(other.isSetInMemoryPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInMemoryPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inMemoryPercentage, other.inMemoryPercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModificationTimeMs()).compareTo(other.isSetLastModificationTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModificationTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModificationTimeMs, other.lastModificationTimeMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileInfo(");
    boolean first = true;

    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ufsPath:");
    if (this.ufsPath == null) {
      sb.append("null");
    } else {
      sb.append(this.ufsPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockSizeBytes:");
    sb.append(this.blockSizeBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creationTimeMs:");
    sb.append(this.creationTimeMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCompleted:");
    sb.append(this.isCompleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFolder:");
    sb.append(this.isFolder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPinned:");
    sb.append(this.isPinned);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCacheable:");
    sb.append(this.isCacheable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPersisted:");
    sb.append(this.isPersisted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockIds:");
    if (this.blockIds == null) {
      sb.append("null");
    } else {
      sb.append(this.blockIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inMemoryPercentage:");
    sb.append(this.inMemoryPercentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModificationTimeMs:");
    sb.append(this.lastModificationTimeMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ttl:");
    sb.append(this.ttl);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileInfoStandardSchemeFactory implements SchemeFactory {
    public FileInfoStandardScheme getScheme() {
      return new FileInfoStandardScheme();
    }
  }

  private static class FileInfoStandardScheme extends StandardScheme<FileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileId = iprot.readI64();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UFS_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ufsPath = iprot.readString();
              struct.setUfsPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BLOCK_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockSizeBytes = iprot.readI64();
              struct.setBlockSizeBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATION_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creationTimeMs = iprot.readI64();
              struct.setCreationTimeMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCompleted = iprot.readBool();
              struct.setIsCompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_FOLDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFolder = iprot.readBool();
              struct.setIsFolderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_PINNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPinned = iprot.readBool();
              struct.setIsPinnedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_CACHEABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCacheable = iprot.readBool();
              struct.setIsCacheableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_PERSISTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPersisted = iprot.readBool();
              struct.setIsPersistedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BLOCK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.blockIds = new ArrayList<Long>(_list16.size);
                long _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI64();
                  struct.blockIds.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setBlockIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IN_MEMORY_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inMemoryPercentage = iprot.readI32();
              struct.setInMemoryPercentageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAST_MODIFICATION_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModificationTimeMs = iprot.readI64();
              struct.setLastModificationTimeMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TTL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ttl = iprot.readI64();
              struct.setTtlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI64(struct.fileId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.ufsPath != null) {
        oprot.writeFieldBegin(UFS_PATH_FIELD_DESC);
        oprot.writeString(struct.ufsPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_SIZE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.blockSizeBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATION_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.creationTimeMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_COMPLETED_FIELD_DESC);
      oprot.writeBool(struct.isCompleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FOLDER_FIELD_DESC);
      oprot.writeBool(struct.isFolder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PINNED_FIELD_DESC);
      oprot.writeBool(struct.isPinned);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CACHEABLE_FIELD_DESC);
      oprot.writeBool(struct.isCacheable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PERSISTED_FIELD_DESC);
      oprot.writeBool(struct.isPersisted);
      oprot.writeFieldEnd();
      if (struct.blockIds != null) {
        oprot.writeFieldBegin(BLOCK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.blockIds.size()));
          for (long _iter19 : struct.blockIds)
          {
            oprot.writeI64(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IN_MEMORY_PERCENTAGE_FIELD_DESC);
      oprot.writeI32(struct.inMemoryPercentage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MODIFICATION_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.lastModificationTimeMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TTL_FIELD_DESC);
      oprot.writeI64(struct.ttl);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileInfoTupleSchemeFactory implements SchemeFactory {
    public FileInfoTupleScheme getScheme() {
      return new FileInfoTupleScheme();
    }
  }

  private static class FileInfoTupleScheme extends TupleScheme<FileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFileId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetPath()) {
        optionals.set(2);
      }
      if (struct.isSetUfsPath()) {
        optionals.set(3);
      }
      if (struct.isSetLength()) {
        optionals.set(4);
      }
      if (struct.isSetBlockSizeBytes()) {
        optionals.set(5);
      }
      if (struct.isSetCreationTimeMs()) {
        optionals.set(6);
      }
      if (struct.isSetIsCompleted()) {
        optionals.set(7);
      }
      if (struct.isSetIsFolder()) {
        optionals.set(8);
      }
      if (struct.isSetIsPinned()) {
        optionals.set(9);
      }
      if (struct.isSetIsCacheable()) {
        optionals.set(10);
      }
      if (struct.isSetIsPersisted()) {
        optionals.set(11);
      }
      if (struct.isSetBlockIds()) {
        optionals.set(12);
      }
      if (struct.isSetInMemoryPercentage()) {
        optionals.set(13);
      }
      if (struct.isSetLastModificationTimeMs()) {
        optionals.set(14);
      }
      if (struct.isSetTtl()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetFileId()) {
        oprot.writeI64(struct.fileId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetUfsPath()) {
        oprot.writeString(struct.ufsPath);
      }
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
      if (struct.isSetBlockSizeBytes()) {
        oprot.writeI64(struct.blockSizeBytes);
      }
      if (struct.isSetCreationTimeMs()) {
        oprot.writeI64(struct.creationTimeMs);
      }
      if (struct.isSetIsCompleted()) {
        oprot.writeBool(struct.isCompleted);
      }
      if (struct.isSetIsFolder()) {
        oprot.writeBool(struct.isFolder);
      }
      if (struct.isSetIsPinned()) {
        oprot.writeBool(struct.isPinned);
      }
      if (struct.isSetIsCacheable()) {
        oprot.writeBool(struct.isCacheable);
      }
      if (struct.isSetIsPersisted()) {
        oprot.writeBool(struct.isPersisted);
      }
      if (struct.isSetBlockIds()) {
        {
          oprot.writeI32(struct.blockIds.size());
          for (long _iter20 : struct.blockIds)
          {
            oprot.writeI64(_iter20);
          }
        }
      }
      if (struct.isSetInMemoryPercentage()) {
        oprot.writeI32(struct.inMemoryPercentage);
      }
      if (struct.isSetLastModificationTimeMs()) {
        oprot.writeI64(struct.lastModificationTimeMs);
      }
      if (struct.isSetTtl()) {
        oprot.writeI64(struct.ttl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.fileId = iprot.readI64();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ufsPath = iprot.readString();
        struct.setUfsPathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.blockSizeBytes = iprot.readI64();
        struct.setBlockSizeBytesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creationTimeMs = iprot.readI64();
        struct.setCreationTimeMsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isCompleted = iprot.readBool();
        struct.setIsCompletedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isFolder = iprot.readBool();
        struct.setIsFolderIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isPinned = iprot.readBool();
        struct.setIsPinnedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isCacheable = iprot.readBool();
        struct.setIsCacheableIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isPersisted = iprot.readBool();
        struct.setIsPersistedIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.blockIds = new ArrayList<Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.blockIds.add(_elem22);
          }
        }
        struct.setBlockIdsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.inMemoryPercentage = iprot.readI32();
        struct.setInMemoryPercentageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.lastModificationTimeMs = iprot.readI64();
        struct.setLastModificationTimeMsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ttl = iprot.readI64();
        struct.setTtlIsSet(true);
      }
    }
  }

}

