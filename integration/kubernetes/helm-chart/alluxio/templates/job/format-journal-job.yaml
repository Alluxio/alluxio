#
# The Alluxio Open Foundation licenses this work under the Apache License, version 2.0
# (the "License"). You may not use this work except in compliance with the License, which is
# available at www.apache.org/licenses/LICENSE-2.0
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied, as more fully set forth in the License.
#
# See the NOTICE file distributed with this work for information regarding copyright ownership.
#

{{ $root := . -}}
{{- $masterCount := int .Values.master.count }}
{{- $isSingleMaster := eq $masterCount 1 }}
{{- $isEmbedded := (eq .Values.journal.type "EMBEDDED") }}
{{- $isHaEmbedded := and $isEmbedded (gt $masterCount 1) }}
{{- $isUfsLocal := and (eq .Values.journal.type "UFS") (eq .Values.journal.ufsType "local") }}
{{- $isSingleUfsLocal := and $isUfsLocal $isSingleMaster }}
{{- $needJournalVolume := or $isEmbedded $isUfsLocal }}
{{- $release := .Release }}
{{- $name := include "alluxio.name" . }}
{{- $fullName := include "alluxio.fullname" . }}
{{- range $i := until $masterCount }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $fullName }}-format-master-{{ $i }}
  labels:
    name: {{ $fullName }}-format-master-{{ $i }}
    app: {{ $name }}
    chart: {{ $name }}
    release: {{ $release.Name }}
    heritage: {{ $release.Service }}
    role: alluxio-master
spec:
  activeDeadlineSeconds: {{ $root.Values.journal.format.job.activeDeadlineSeconds }}
  ttlSecondsAfterFinished: {{ $root.Values.journal.format.job.ttlSecondsAfterFinished }}
  template:
    spec:
      containers:
        - name: alluxio-master
          image: {{ $root.Values.image }}:{{ $root.Values.imageTag }}
          imagePullPolicy: {{ $root.Values.imagePullPolicy }}
          securityContext:
            runAsUser: {{ $root.Values.user }}
            runAsGroup: {{ $root.Values.group }}
          {{- if $root.Values.master.resources  }}
{{ include "alluxio.master.resources" $root | indent 10 }}
          {{- end }}
          command: ["/opt/alluxio/bin/alluxio"]
          args: ["formatJournal"]
          envFrom:
            - configMapRef:
                name: {{ $fullName }}-config
          {{- if $isHaEmbedded }}
          env:
            - name: ALLUXIO_MASTER_HOSTNAME
              value: {{ printf "%v-master-%v" $fullName $i }}
          {{- end }}
          volumeMounts:
          {{- if $needJournalVolume }}
          - name: alluxio-journal
            mountPath: {{ $root.Values.journal.folder }}
          {{- end }}
          {{- if $root.Values.secrets }}
            {{- if $root.Values.secrets.master }}
              {{- range $key, $val := $root.Values.secrets.master }}
          - name: secret-{{ $key }}-volume
            mountPath: /secrets/{{ $val }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if $root.Values.mounts }}
            {{- range $root.Values.mounts }}
          - name: "{{ .name }}"
            mountPath: "{{ .path }}"
            {{- end }}
          {{- end }}
      restartPolicy: OnFailure
      volumes:
      {{- if $needJournalVolume }}
      - name: alluxio-journal
        persistentVolumeClaim:
          claimName: {{ printf "alluxio-journal-%v-master-%v" $fullName $i }}
      {{- end}}
      {{- if $root.Values.secrets }}
        {{- if $root.Values.secrets.master }}
        {{- include "alluxio.master.secretVolumeMounts" $root }}
        {{- end }}
      {{- end }}
---
{{- end }}
