#!/usr/bin/env bash
#
# The Alluxio Open Foundation licenses this work under the Apache License, version 2.0
# (the "License"). You may not use this work except in compliance with the License, which is
# available at www.apache.org/licenses/LICENSE-2.0
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied, as more fully set forth in the License.
#
# See the NOTICE file distributed with this work for information regarding copyright ownership.
#

SCRIPT_DIR="$(cd "$(dirname "$(readlink "$0" || echo "$0")")"; pwd)"

readonly USAGE="Usage:\n\talluxio-fuse [mount|umount]

Mount a UFS address to local mount point.
Usage:\n\talluxiofs mount ufs_address mount_point [options]

general options
\t-h \tprint help
\t-f \tFUSE foreground option - do not run as daemon

alluxio mount options
\t-o <ALLUXIO_PROPERTY_KEY>=<ALLUXIO_PROPERTY_VALUE> \tThe credentials of the target ufs address should be provided here so that alluxio fuse can access the target data set. Other alluxio common/user configuration can also be provided here
\t-o data_cache=<local_cache_directory> (Default=\"\" which means disabled) \tLocal folder to use for local data cache.
\t-o data_cache_size=<size> (Default=\"512MB\") \tMaximum cache size for local data cache directory.  
\t-o metadata_cache_size=<size> (Default=\"0\" which means disabled) \tMaximum number of entries in the metadata cache. Each 1000 entries cause about 2MB memory.
\t-o metadata_cache_expire=<timeout> (Default=\"10min\") \tSpecify expire time for entries in the metadata cache

fuse mount options
\tMost of the generic mount options described in 'man mount' and many FUSE specific mount options are supported.
\tSome examples are listed below:
\t-o direct_io \tDisables the use of page cache (file content cache) in the kernel for this filesystem.
\t-o attr_timeout=<timeout_in_seconds> \tThe timeout in seconds for which file/directory attributes (as returned by e.g. the getattr handler) are cached.
\t-o entry_timeout=<timeout_in_seconds> \tThe timeout in seconds for which name lookups will be cached.

JVM options
\tJVM options can be directly passed in to the script and will be directly used to launch the Fuse process
\te.g. -Xms4g -Xmx4g -XX:MaxDirectMemorySize=4g

Examples
\tS3: alluxiofs mount s3://my_bucket/data /path/to/mountpoint -o s3a.accessKeyId=<S3 ACCESS KEY> -o s3a.secretKey=<S3 SECRET KEY>
\tGCS: alluxiofs mount gs://my_bucket/data /path/to/mountpoint -o fs.gcs.credential.path=/path/to/<google_application_credentials>.json
\tOthers: alluxiofs mount ufs_address mount_point -o direct_io -o attr_timeout=7200 -Xms4g -Xmx4g -XX:MaxDirectMemorySize=4g

Unmounts a given AlluxioFuse mount point
Usage:\n\talluxiofs umount mount_point [options]

\t-f \tforcibly unmount even if fuse device is busy
"

get_env() {
  DEFAULT_LIBEXEC_DIR="${SCRIPT_DIR}"/../../../libexec
  ALLUXIO_LIBEXEC_DIR=${ALLUXIO_LIBEXEC_DIR:-${DEFAULT_LIBEXEC_DIR}}
  . ${ALLUXIO_LIBEXEC_DIR}/alluxio-config.sh

  ALLUXIO_FUSE_JAR=${SCRIPT_DIR}/../target/alluxio-integration-fuse-${VERSION}-jar-with-dependencies.jar
  CLASSPATH=${CLASSPATH}:${ALLUXIO_FUSE_JAR}
  CLASSPATH=${CLASSPATH%:}
  CLASSPATH=${CLASSPATH#:}
}

mount_fuse() {
  class_args=()
  for arg in "$@"; do
    case "${arg}" in
      -D* | -X* | -agentlib* | -javaagent*)
        ALLUXIO_FUSE_JAVA_OPTS+=" ${arg}"
        ;;
      *)
        class_args+=("${arg}")
        ;;
    esac
  done

  if launch_fuse_process "${class_args[@]}"; then
    exit 0
  fi
  exit 1
}

launch_fuse_process() {
  if [[ $# -lt 2 ]]; then
    echo "ufs_address and mount_point should be provided" >&2
    echo -e "${USAGE}" >&2
    return 1
  fi

  ufs_address=$1
  mount_point=$2
  shift 2

  mount_options=""
  foreground=false
  while getopts "o:hf" opt > /dev/null 2>&1; do
    case $opt in
      o)
        mount_options+="${OPTARG},"
        ;;
      f)
        foreground=true
        ;;
      h)
        echo "${USAGE}"
        return 0
        ;;
      *)
        ;;
    esac
  done

  mount_options="$(echo "${mount_options}" | sed -E 's/,*$//g')" # remove trailing comma
  if [[ -n ${mount_options} ]]; then
    mount_options="-o ${mount_options}"
  fi

  if [[ "${foreground}" = true ]]; then
    ALLUXIO_FUSE_JAVA_OPTS+=" -Dalluxio.logger.type=FUSE_LOGGER,Console"
  fi

  # launch fuse
  cmd="${JAVA}${ALLUXIO_FUSE_ATTACH_OPTS} -cp ${CLASSPATH} ${ALLUXIO_FUSE_JAVA_OPTS} \
       alluxio.fuse.AlluxioFuse -m ${mount_point} -u ${ufs_address} ${mount_options}"

  if [[ "${foreground}" = true ]]; then
    exec "${cmd}"
  else
    (nohup "${cmd}" > "${ALLUXIO_LOGS_DIR}"/fuse.out 2>&1) &
    sleep 2
    local cnt=0
    until fuse_mounted; do
      if [[ "${cnt}" -eq 0 ]];then
        printf "Mounting %s to %s" "${ufs_address}" "${mount_options}"
      elif [[ "${cnt}" -lt 60 ]]; then
        printf "."
        sleep 1
      else
        echo "Failed to mount ufs path \"${ufs_address}\" to local mount point \"${mount_point}\"." >&2
        cat "${ALLUXIO_LOGS_DIR}"/fuse.out >&2
        return 1
      fi
      (( cnt += 1 ))
    done
    if [[ ${cnt} -lt 0 ]]; then
      printf "\n"
    fi
    return 0
  fi
}

fuse_mounted() {
  fuse_mount_info="$(mount | grep " ${mount_point} ")"
  if [[ -n "${fuse_mount_info}" ]]; then
    return 0 # true
  fi
  return 1 # false
}

kill_process_and_umount_fuse() {
  if [[ $# -lt 1 ]]; then
    echo "mount_point should be provided" >&2
    echo -e "${USAGE}" >&2
    return 1
  fi
  mount_point=$1
  shift

  force_kill=false
  while getopts "fh" opt > /dev/null 2>&1; do
    case $opt in
      f)
        force_kill=true
        ;;
      h)
        echo "${USAGE}"
        return 0
        ;;
      *)
        ;;
    esac
  done
  
  fuse_pid=$(ps ax -o pid,args | grep [A]lluxioFuse | grep " ${mount_point} " | awk '{print $1}')
  if [[ -z ${fuse_pid} ]];then
    echo "Cannot find AlluxioFuse mount" >&2
    return 1
  fi
  
  if [[ "${force_kill}" = true ]] ; then
    kill -9 "${fuse_pid}"
    echo "Forcibly killed fuse process ${fuse_pid}"
    umount_fuse "${mount_point}"
    return $?
  fi
  
  kill "${fuse_pid}"

  sleep 2
  local cnt=0
  while ps -p "${fuse_pid}" > /dev/null 2>&1; do
    if [[ "${cnt}" -eq 0 ]];then
      printf "Terminating %s" "${fuse_pid}"
      (( cnt += 1 ))
    elif [[ "${cnt}" -lt 60 ]]; then
      printf "."
      sleep 1
    else
      echo  "Failed to kill fuse process [${fuse_pid}] after 60 seconds. 
Run \"alluxiofs umount -f mount_point\" if needed to forcibly kill the alluxio fuse process and fuse mount point. " >&2
      return 1
    fi
    (( cnt += 1 ))
  done
  if [[ ${cnt} -lt 0 ]]; then
    printf "\n"
  fi

  if fuse_mounted; then
    echo "Failed to umount fuse mount point ${mount_point}"  >&2
    return 1
  else
    return 0
  fi
}

main() {
  if [[ $# -lt 1 ]]; then
    echo "At least one command should be passed in" >&2
    echo -e "${USAGE}" >&2
    exit 1
  fi

  get_env
  command=$1
  shift
  case "${command}" in
    mount)
      if mount_fuse "$@"; then
        exit 0
      fi
      exit 1
      ;;
    umount|unmount)
      if kill_process_and_umount_fuse "$@"; then
        exit 0
      fi
      exit 1
      ;;
    -h)
      echo -e "${USAGE}"
      exit 0
      ;;
    *)
      echo "Invalid command ${command}" >&2
      echo -e "${USAGE}" >&2
      exit 1
      ;;
  esac
}

main "$@"
