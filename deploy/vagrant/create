#!/bin/bash

set -e

BOLD_RED='\033[1;31m'
GREEN='\033[32m'
BOLD_PURPLE='\033[1;35m'
NO_COLOR='\033[0m'

error() {
 echo -e "${BOLD_RED}>>> $1${NO_COLOR}"
}
info() {
 echo -e "${GREEN}>>> $1${NO_COLOR}"
}

error_exit() {
 error "$1"
 exit 1
}

PROVIDERS=("aws" "vb")

if [ "$#" -ne 2 ]; then
  MSG="Usage start <number of machines> <provider(${PROVIDERS[@]})>"
  error_exit "$MSG"
fi

TOTAL="$1"
PROVIDER="$2"
[ "$TOTAL" -lt 2 ] && error_exit "number of machines should at least be 2"
[[ "${PROVIDERS[*]}" =~ (^| )$PROVIDER( |$) ]] || error_exit "provider $PROVIDER not supported yet"

HERE=`dirname "$0"`
cd $HERE

cat > conf/init.yml <<EOF
#generated by ../start, do not modify
Provider: $PROVIDER
MachineNumber: $TOTAL
EOF

mkdir -p ./files
# files/id_rsa, files/id_rsa.pub
if [ ! -f ./files/id_rsa ]; then 
 ssh-keygen -f ./files/id_rsa -t rsa -N '' &>/dev/null
fi

# files/workers
rm -f files/workers
for i in `seq 1 $((TOTAL-1))`; do
 echo "TachyonWorker${i}" >> files/workers
done
echo "TachyonMaster" >> files/workers

# create virtual machine without provisioning
[[ "$PROVIDER" == "aws" ]] && sgid=`python bin/init_aws.py|tail -n 1`
# pass security group id to vagrant up
export AWS_SECURITY_GROUP_ID_TACH=$sgid
IS_SPOT=`python bin/is_aws_spot.py`
if [[ "$PROVIDER" == "aws" && "$IS_SPOT" == 0 ]]; then
 # register handler to be run when exit 1
 trap "python bin/spot_request.py --cancel" ERR
 python bin/spot_request.py --submit
else
 FULL_PROVIDER_NAME=$PROVIDER
 [[ "$FULL_PROVIDER_NAME" == "vb" ]] && FULL_PROVIDER_NAME=virtualbox
 VUP="vagrant up --provider=$FULL_PROVIDER_NAME --no-provision"
 [[ "$PROVIDER" == "aws" ]] && VUP="${VUP} --parallel"
 $VUP
fi

# files/hosts
# IPs are automatically assigned by vagrant
# hack to find out the assigned IPs by looking into vagrant's ssh config to 
# output of `ifconfig` is different in RHEL6.5 and RHEL7
#   inet:addr 127.0.0.1  VS. inet 127.0.0.1
# use `ip addr show` instead
rm -f files/hosts
for host in `cat files/workers`; do
 info "looking up IP of $host..."
 IP=`vagrant ssh $host -c "ip addr show | grep -w inet| tail -1" | grep -w inet | awk '{print $2}' | cut -d'/' -f1`
 info "IP for $host is $IP"
 echo "$IP ${host}" >> files/hosts
done

# provision
vagrant provision

# show master IP
if [[ "$?" == "0" ]]; then
 if [[ "$PROVIDER" == "aws" ]]; then
  master=`cat .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory | grep Master | cut -d' ' -f2 | cut -d'=' -f2`
 else
  master=`tail -n 1 files/hosts | cut -d' ' -f1`
 fi
 info ">>> TachyonMaster public IP is ${master} <<<"
 info ">>> visit default port of the web UI of what you deployed <<<"
fi
