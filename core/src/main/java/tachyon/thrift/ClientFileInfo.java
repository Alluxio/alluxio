/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientFileInfo implements org.apache.thrift.TBase<ClientFileInfo, ClientFileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ClientFileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientFileInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UFS_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("ufsPath", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSizeByte", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("creationTimeMs", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField IS_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isComplete", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_FOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isFolder", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IS_PINNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isPinned", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField IS_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("isCache", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField BLOCK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("blockIds", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField DEPENDENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencyId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField IN_MEMORY_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("inMemoryPercentage", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField LAST_MODIFICATION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModificationTimeMs", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientFileInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientFileInfoTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public String path; // required
  public String ufsPath; // required
  public long length; // required
  public long blockSizeByte; // required
  public long creationTimeMs; // required
  public boolean isComplete; // required
  public boolean isFolder; // required
  public boolean isPinned; // required
  public boolean isCache; // required
  public List<Long> blockIds; // required
  public int dependencyId; // required
  public int inMemoryPercentage; // required
  public long lastModificationTimeMs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    PATH((short)3, "path"),
    UFS_PATH((short)4, "ufsPath"),
    LENGTH((short)5, "length"),
    BLOCK_SIZE_BYTE((short)6, "blockSizeByte"),
    CREATION_TIME_MS((short)7, "creationTimeMs"),
    IS_COMPLETE((short)8, "isComplete"),
    IS_FOLDER((short)9, "isFolder"),
    IS_PINNED((short)10, "isPinned"),
    IS_CACHE((short)11, "isCache"),
    BLOCK_IDS((short)12, "blockIds"),
    DEPENDENCY_ID((short)13, "dependencyId"),
    IN_MEMORY_PERCENTAGE((short)14, "inMemoryPercentage"),
    LAST_MODIFICATION_TIME_MS((short)15, "lastModificationTimeMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // PATH
          return PATH;
        case 4: // UFS_PATH
          return UFS_PATH;
        case 5: // LENGTH
          return LENGTH;
        case 6: // BLOCK_SIZE_BYTE
          return BLOCK_SIZE_BYTE;
        case 7: // CREATION_TIME_MS
          return CREATION_TIME_MS;
        case 8: // IS_COMPLETE
          return IS_COMPLETE;
        case 9: // IS_FOLDER
          return IS_FOLDER;
        case 10: // IS_PINNED
          return IS_PINNED;
        case 11: // IS_CACHE
          return IS_CACHE;
        case 12: // BLOCK_IDS
          return BLOCK_IDS;
        case 13: // DEPENDENCY_ID
          return DEPENDENCY_ID;
        case 14: // IN_MEMORY_PERCENTAGE
          return IN_MEMORY_PERCENTAGE;
        case 15: // LAST_MODIFICATION_TIME_MS
          return LAST_MODIFICATION_TIME_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private static final int __BLOCKSIZEBYTE_ISSET_ID = 2;
  private static final int __CREATIONTIMEMS_ISSET_ID = 3;
  private static final int __ISCOMPLETE_ISSET_ID = 4;
  private static final int __ISFOLDER_ISSET_ID = 5;
  private static final int __ISPINNED_ISSET_ID = 6;
  private static final int __ISCACHE_ISSET_ID = 7;
  private static final int __DEPENDENCYID_ISSET_ID = 8;
  private static final int __INMEMORYPERCENTAGE_ISSET_ID = 9;
  private static final int __LASTMODIFICATIONTIMEMS_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UFS_PATH, new org.apache.thrift.meta_data.FieldMetaData("ufsPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_SIZE_BYTE, new org.apache.thrift.meta_data.FieldMetaData("blockSizeByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("creationTimeMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("isComplete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FOLDER, new org.apache.thrift.meta_data.FieldMetaData("isFolder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PINNED, new org.apache.thrift.meta_data.FieldMetaData("isPinned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_CACHE, new org.apache.thrift.meta_data.FieldMetaData("isCache", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLOCK_IDS, new org.apache.thrift.meta_data.FieldMetaData("blockIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DEPENDENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("dependencyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IN_MEMORY_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("inMemoryPercentage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_MODIFICATION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("lastModificationTimeMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientFileInfo.class, metaDataMap);
  }

  public ClientFileInfo() {
  }

  public ClientFileInfo(
    int id,
    String name,
    String path,
    String ufsPath,
    long length,
    long blockSizeByte,
    long creationTimeMs,
    boolean isComplete,
    boolean isFolder,
    boolean isPinned,
    boolean isCache,
    List<Long> blockIds,
    int dependencyId,
    int inMemoryPercentage,
    long lastModificationTimeMs)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.path = path;
    this.ufsPath = ufsPath;
    this.length = length;
    setLengthIsSet(true);
    this.blockSizeByte = blockSizeByte;
    setBlockSizeByteIsSet(true);
    this.creationTimeMs = creationTimeMs;
    setCreationTimeMsIsSet(true);
    this.isComplete = isComplete;
    setIsCompleteIsSet(true);
    this.isFolder = isFolder;
    setIsFolderIsSet(true);
    this.isPinned = isPinned;
    setIsPinnedIsSet(true);
    this.isCache = isCache;
    setIsCacheIsSet(true);
    this.blockIds = blockIds;
    this.dependencyId = dependencyId;
    setDependencyIdIsSet(true);
    this.inMemoryPercentage = inMemoryPercentage;
    setInMemoryPercentageIsSet(true);
    this.lastModificationTimeMs = lastModificationTimeMs;
    setLastModificationTimeMsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientFileInfo(ClientFileInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetUfsPath()) {
      this.ufsPath = other.ufsPath;
    }
    this.length = other.length;
    this.blockSizeByte = other.blockSizeByte;
    this.creationTimeMs = other.creationTimeMs;
    this.isComplete = other.isComplete;
    this.isFolder = other.isFolder;
    this.isPinned = other.isPinned;
    this.isCache = other.isCache;
    if (other.isSetBlockIds()) {
      List<Long> __this__blockIds = new ArrayList<Long>(other.blockIds);
      this.blockIds = __this__blockIds;
    }
    this.dependencyId = other.dependencyId;
    this.inMemoryPercentage = other.inMemoryPercentage;
    this.lastModificationTimeMs = other.lastModificationTimeMs;
  }

  public ClientFileInfo deepCopy() {
    return new ClientFileInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.path = null;
    this.ufsPath = null;
    setLengthIsSet(false);
    this.length = 0;
    setBlockSizeByteIsSet(false);
    this.blockSizeByte = 0;
    setCreationTimeMsIsSet(false);
    this.creationTimeMs = 0;
    setIsCompleteIsSet(false);
    this.isComplete = false;
    setIsFolderIsSet(false);
    this.isFolder = false;
    setIsPinnedIsSet(false);
    this.isPinned = false;
    setIsCacheIsSet(false);
    this.isCache = false;
    this.blockIds = null;
    setDependencyIdIsSet(false);
    this.dependencyId = 0;
    setInMemoryPercentageIsSet(false);
    this.inMemoryPercentage = 0;
    setLastModificationTimeMsIsSet(false);
    this.lastModificationTimeMs = 0;
  }

  public int getId() {
    return this.id;
  }

  public ClientFileInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ClientFileInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public ClientFileInfo setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getUfsPath() {
    return this.ufsPath;
  }

  public ClientFileInfo setUfsPath(String ufsPath) {
    this.ufsPath = ufsPath;
    return this;
  }

  public void unsetUfsPath() {
    this.ufsPath = null;
  }

  /** Returns true if field ufsPath is set (has been assigned a value) and false otherwise */
  public boolean isSetUfsPath() {
    return this.ufsPath != null;
  }

  public void setUfsPathIsSet(boolean value) {
    if (!value) {
      this.ufsPath = null;
    }
  }

  public long getLength() {
    return this.length;
  }

  public ClientFileInfo setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public long getBlockSizeByte() {
    return this.blockSizeByte;
  }

  public ClientFileInfo setBlockSizeByte(long blockSizeByte) {
    this.blockSizeByte = blockSizeByte;
    setBlockSizeByteIsSet(true);
    return this;
  }

  public void unsetBlockSizeByte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZEBYTE_ISSET_ID);
  }

  /** Returns true if field blockSizeByte is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockSizeByte() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZEBYTE_ISSET_ID);
  }

  public void setBlockSizeByteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZEBYTE_ISSET_ID, value);
  }

  public long getCreationTimeMs() {
    return this.creationTimeMs;
  }

  public ClientFileInfo setCreationTimeMs(long creationTimeMs) {
    this.creationTimeMs = creationTimeMs;
    setCreationTimeMsIsSet(true);
    return this;
  }

  public void unsetCreationTimeMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONTIMEMS_ISSET_ID);
  }

  /** Returns true if field creationTimeMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationTimeMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONTIMEMS_ISSET_ID);
  }

  public void setCreationTimeMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONTIMEMS_ISSET_ID, value);
  }

  public boolean isIsComplete() {
    return this.isComplete;
  }

  public ClientFileInfo setIsComplete(boolean isComplete) {
    this.isComplete = isComplete;
    setIsCompleteIsSet(true);
    return this;
  }

  public void unsetIsComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID);
  }

  /** Returns true if field isComplete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID);
  }

  public void setIsCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOMPLETE_ISSET_ID, value);
  }

  public boolean isIsFolder() {
    return this.isFolder;
  }

  public ClientFileInfo setIsFolder(boolean isFolder) {
    this.isFolder = isFolder;
    setIsFolderIsSet(true);
    return this;
  }

  public void unsetIsFolder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFOLDER_ISSET_ID);
  }

  /** Returns true if field isFolder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFolder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFOLDER_ISSET_ID);
  }

  public void setIsFolderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFOLDER_ISSET_ID, value);
  }

  public boolean isIsPinned() {
    return this.isPinned;
  }

  public ClientFileInfo setIsPinned(boolean isPinned) {
    this.isPinned = isPinned;
    setIsPinnedIsSet(true);
    return this;
  }

  public void unsetIsPinned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPINNED_ISSET_ID);
  }

  /** Returns true if field isPinned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPinned() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPINNED_ISSET_ID);
  }

  public void setIsPinnedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPINNED_ISSET_ID, value);
  }

  public boolean isIsCache() {
    return this.isCache;
  }

  public ClientFileInfo setIsCache(boolean isCache) {
    this.isCache = isCache;
    setIsCacheIsSet(true);
    return this;
  }

  public void unsetIsCache() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCACHE_ISSET_ID);
  }

  /** Returns true if field isCache is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCache() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCACHE_ISSET_ID);
  }

  public void setIsCacheIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCACHE_ISSET_ID, value);
  }

  public int getBlockIdsSize() {
    return (this.blockIds == null) ? 0 : this.blockIds.size();
  }

  public java.util.Iterator<Long> getBlockIdsIterator() {
    return (this.blockIds == null) ? null : this.blockIds.iterator();
  }

  public void addToBlockIds(long elem) {
    if (this.blockIds == null) {
      this.blockIds = new ArrayList<Long>();
    }
    this.blockIds.add(elem);
  }

  public List<Long> getBlockIds() {
    return this.blockIds;
  }

  public ClientFileInfo setBlockIds(List<Long> blockIds) {
    this.blockIds = blockIds;
    return this;
  }

  public void unsetBlockIds() {
    this.blockIds = null;
  }

  /** Returns true if field blockIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockIds() {
    return this.blockIds != null;
  }

  public void setBlockIdsIsSet(boolean value) {
    if (!value) {
      this.blockIds = null;
    }
  }

  public int getDependencyId() {
    return this.dependencyId;
  }

  public ClientFileInfo setDependencyId(int dependencyId) {
    this.dependencyId = dependencyId;
    setDependencyIdIsSet(true);
    return this;
  }

  public void unsetDependencyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPENDENCYID_ISSET_ID);
  }

  /** Returns true if field dependencyId is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencyId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPENDENCYID_ISSET_ID);
  }

  public void setDependencyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPENDENCYID_ISSET_ID, value);
  }

  public int getInMemoryPercentage() {
    return this.inMemoryPercentage;
  }

  public ClientFileInfo setInMemoryPercentage(int inMemoryPercentage) {
    this.inMemoryPercentage = inMemoryPercentage;
    setInMemoryPercentageIsSet(true);
    return this;
  }

  public void unsetInMemoryPercentage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INMEMORYPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field inMemoryPercentage is set (has been assigned a value) and false otherwise */
  public boolean isSetInMemoryPercentage() {
    return EncodingUtils.testBit(__isset_bitfield, __INMEMORYPERCENTAGE_ISSET_ID);
  }

  public void setInMemoryPercentageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INMEMORYPERCENTAGE_ISSET_ID, value);
  }

  public long getLastModificationTimeMs() {
    return this.lastModificationTimeMs;
  }

  public ClientFileInfo setLastModificationTimeMs(long lastModificationTimeMs) {
    this.lastModificationTimeMs = lastModificationTimeMs;
    setLastModificationTimeMsIsSet(true);
    return this;
  }

  public void unsetLastModificationTimeMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFICATIONTIMEMS_ISSET_ID);
  }

  /** Returns true if field lastModificationTimeMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModificationTimeMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFICATIONTIMEMS_ISSET_ID);
  }

  public void setLastModificationTimeMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFICATIONTIMEMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case UFS_PATH:
      if (value == null) {
        unsetUfsPath();
      } else {
        setUfsPath((String)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case BLOCK_SIZE_BYTE:
      if (value == null) {
        unsetBlockSizeByte();
      } else {
        setBlockSizeByte((Long)value);
      }
      break;

    case CREATION_TIME_MS:
      if (value == null) {
        unsetCreationTimeMs();
      } else {
        setCreationTimeMs((Long)value);
      }
      break;

    case IS_COMPLETE:
      if (value == null) {
        unsetIsComplete();
      } else {
        setIsComplete((Boolean)value);
      }
      break;

    case IS_FOLDER:
      if (value == null) {
        unsetIsFolder();
      } else {
        setIsFolder((Boolean)value);
      }
      break;

    case IS_PINNED:
      if (value == null) {
        unsetIsPinned();
      } else {
        setIsPinned((Boolean)value);
      }
      break;

    case IS_CACHE:
      if (value == null) {
        unsetIsCache();
      } else {
        setIsCache((Boolean)value);
      }
      break;

    case BLOCK_IDS:
      if (value == null) {
        unsetBlockIds();
      } else {
        setBlockIds((List<Long>)value);
      }
      break;

    case DEPENDENCY_ID:
      if (value == null) {
        unsetDependencyId();
      } else {
        setDependencyId((Integer)value);
      }
      break;

    case IN_MEMORY_PERCENTAGE:
      if (value == null) {
        unsetInMemoryPercentage();
      } else {
        setInMemoryPercentage((Integer)value);
      }
      break;

    case LAST_MODIFICATION_TIME_MS:
      if (value == null) {
        unsetLastModificationTimeMs();
      } else {
        setLastModificationTimeMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case PATH:
      return getPath();

    case UFS_PATH:
      return getUfsPath();

    case LENGTH:
      return Long.valueOf(getLength());

    case BLOCK_SIZE_BYTE:
      return Long.valueOf(getBlockSizeByte());

    case CREATION_TIME_MS:
      return Long.valueOf(getCreationTimeMs());

    case IS_COMPLETE:
      return Boolean.valueOf(isIsComplete());

    case IS_FOLDER:
      return Boolean.valueOf(isIsFolder());

    case IS_PINNED:
      return Boolean.valueOf(isIsPinned());

    case IS_CACHE:
      return Boolean.valueOf(isIsCache());

    case BLOCK_IDS:
      return getBlockIds();

    case DEPENDENCY_ID:
      return Integer.valueOf(getDependencyId());

    case IN_MEMORY_PERCENTAGE:
      return Integer.valueOf(getInMemoryPercentage());

    case LAST_MODIFICATION_TIME_MS:
      return Long.valueOf(getLastModificationTimeMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case PATH:
      return isSetPath();
    case UFS_PATH:
      return isSetUfsPath();
    case LENGTH:
      return isSetLength();
    case BLOCK_SIZE_BYTE:
      return isSetBlockSizeByte();
    case CREATION_TIME_MS:
      return isSetCreationTimeMs();
    case IS_COMPLETE:
      return isSetIsComplete();
    case IS_FOLDER:
      return isSetIsFolder();
    case IS_PINNED:
      return isSetIsPinned();
    case IS_CACHE:
      return isSetIsCache();
    case BLOCK_IDS:
      return isSetBlockIds();
    case DEPENDENCY_ID:
      return isSetDependencyId();
    case IN_MEMORY_PERCENTAGE:
      return isSetInMemoryPercentage();
    case LAST_MODIFICATION_TIME_MS:
      return isSetLastModificationTimeMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientFileInfo)
      return this.equals((ClientFileInfo)that);
    return false;
  }

  public boolean equals(ClientFileInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_ufsPath = true && this.isSetUfsPath();
    boolean that_present_ufsPath = true && that.isSetUfsPath();
    if (this_present_ufsPath || that_present_ufsPath) {
      if (!(this_present_ufsPath && that_present_ufsPath))
        return false;
      if (!this.ufsPath.equals(that.ufsPath))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_blockSizeByte = true;
    boolean that_present_blockSizeByte = true;
    if (this_present_blockSizeByte || that_present_blockSizeByte) {
      if (!(this_present_blockSizeByte && that_present_blockSizeByte))
        return false;
      if (this.blockSizeByte != that.blockSizeByte)
        return false;
    }

    boolean this_present_creationTimeMs = true;
    boolean that_present_creationTimeMs = true;
    if (this_present_creationTimeMs || that_present_creationTimeMs) {
      if (!(this_present_creationTimeMs && that_present_creationTimeMs))
        return false;
      if (this.creationTimeMs != that.creationTimeMs)
        return false;
    }

    boolean this_present_isComplete = true;
    boolean that_present_isComplete = true;
    if (this_present_isComplete || that_present_isComplete) {
      if (!(this_present_isComplete && that_present_isComplete))
        return false;
      if (this.isComplete != that.isComplete)
        return false;
    }

    boolean this_present_isFolder = true;
    boolean that_present_isFolder = true;
    if (this_present_isFolder || that_present_isFolder) {
      if (!(this_present_isFolder && that_present_isFolder))
        return false;
      if (this.isFolder != that.isFolder)
        return false;
    }

    boolean this_present_isPinned = true;
    boolean that_present_isPinned = true;
    if (this_present_isPinned || that_present_isPinned) {
      if (!(this_present_isPinned && that_present_isPinned))
        return false;
      if (this.isPinned != that.isPinned)
        return false;
    }

    boolean this_present_isCache = true;
    boolean that_present_isCache = true;
    if (this_present_isCache || that_present_isCache) {
      if (!(this_present_isCache && that_present_isCache))
        return false;
      if (this.isCache != that.isCache)
        return false;
    }

    boolean this_present_blockIds = true && this.isSetBlockIds();
    boolean that_present_blockIds = true && that.isSetBlockIds();
    if (this_present_blockIds || that_present_blockIds) {
      if (!(this_present_blockIds && that_present_blockIds))
        return false;
      if (!this.blockIds.equals(that.blockIds))
        return false;
    }

    boolean this_present_dependencyId = true;
    boolean that_present_dependencyId = true;
    if (this_present_dependencyId || that_present_dependencyId) {
      if (!(this_present_dependencyId && that_present_dependencyId))
        return false;
      if (this.dependencyId != that.dependencyId)
        return false;
    }

    boolean this_present_inMemoryPercentage = true;
    boolean that_present_inMemoryPercentage = true;
    if (this_present_inMemoryPercentage || that_present_inMemoryPercentage) {
      if (!(this_present_inMemoryPercentage && that_present_inMemoryPercentage))
        return false;
      if (this.inMemoryPercentage != that.inMemoryPercentage)
        return false;
    }

    boolean this_present_lastModificationTimeMs = true;
    boolean that_present_lastModificationTimeMs = true;
    if (this_present_lastModificationTimeMs || that_present_lastModificationTimeMs) {
      if (!(this_present_lastModificationTimeMs && that_present_lastModificationTimeMs))
        return false;
      if (this.lastModificationTimeMs != that.lastModificationTimeMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ClientFileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUfsPath()).compareTo(other.isSetUfsPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUfsPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ufsPath, other.ufsPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockSizeByte()).compareTo(other.isSetBlockSizeByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockSizeByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSizeByte, other.blockSizeByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationTimeMs()).compareTo(other.isSetCreationTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationTimeMs, other.creationTimeMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsComplete()).compareTo(other.isSetIsComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isComplete, other.isComplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFolder()).compareTo(other.isSetIsFolder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFolder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFolder, other.isFolder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPinned()).compareTo(other.isSetIsPinned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPinned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPinned, other.isPinned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCache()).compareTo(other.isSetIsCache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCache, other.isCache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockIds()).compareTo(other.isSetBlockIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockIds, other.blockIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependencyId()).compareTo(other.isSetDependencyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencyId, other.dependencyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInMemoryPercentage()).compareTo(other.isSetInMemoryPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInMemoryPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inMemoryPercentage, other.inMemoryPercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModificationTimeMs()).compareTo(other.isSetLastModificationTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModificationTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModificationTimeMs, other.lastModificationTimeMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientFileInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ufsPath:");
    if (this.ufsPath == null) {
      sb.append("null");
    } else {
      sb.append(this.ufsPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockSizeByte:");
    sb.append(this.blockSizeByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creationTimeMs:");
    sb.append(this.creationTimeMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isComplete:");
    sb.append(this.isComplete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFolder:");
    sb.append(this.isFolder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPinned:");
    sb.append(this.isPinned);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCache:");
    sb.append(this.isCache);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockIds:");
    if (this.blockIds == null) {
      sb.append("null");
    } else {
      sb.append(this.blockIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dependencyId:");
    sb.append(this.dependencyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inMemoryPercentage:");
    sb.append(this.inMemoryPercentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModificationTimeMs:");
    sb.append(this.lastModificationTimeMs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientFileInfoStandardSchemeFactory implements SchemeFactory {
    public ClientFileInfoStandardScheme getScheme() {
      return new ClientFileInfoStandardScheme();
    }
  }

  private static class ClientFileInfoStandardScheme extends StandardScheme<ClientFileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UFS_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ufsPath = iprot.readString();
              struct.setUfsPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BLOCK_SIZE_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockSizeByte = iprot.readI64();
              struct.setBlockSizeByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATION_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creationTimeMs = iprot.readI64();
              struct.setCreationTimeMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isComplete = iprot.readBool();
              struct.setIsCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_FOLDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFolder = iprot.readBool();
              struct.setIsFolderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_PINNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPinned = iprot.readBool();
              struct.setIsPinnedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCache = iprot.readBool();
              struct.setIsCacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BLOCK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.blockIds = new ArrayList<Long>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  long _elem10;
                  _elem10 = iprot.readI64();
                  struct.blockIds.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setBlockIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEPENDENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dependencyId = iprot.readI32();
              struct.setDependencyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IN_MEMORY_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inMemoryPercentage = iprot.readI32();
              struct.setInMemoryPercentageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LAST_MODIFICATION_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModificationTimeMs = iprot.readI64();
              struct.setLastModificationTimeMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientFileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.ufsPath != null) {
        oprot.writeFieldBegin(UFS_PATH_FIELD_DESC);
        oprot.writeString(struct.ufsPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_SIZE_BYTE_FIELD_DESC);
      oprot.writeI64(struct.blockSizeByte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATION_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.creationTimeMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_COMPLETE_FIELD_DESC);
      oprot.writeBool(struct.isComplete);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FOLDER_FIELD_DESC);
      oprot.writeBool(struct.isFolder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PINNED_FIELD_DESC);
      oprot.writeBool(struct.isPinned);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CACHE_FIELD_DESC);
      oprot.writeBool(struct.isCache);
      oprot.writeFieldEnd();
      if (struct.blockIds != null) {
        oprot.writeFieldBegin(BLOCK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.blockIds.size()));
          for (long _iter11 : struct.blockIds)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEPENDENCY_ID_FIELD_DESC);
      oprot.writeI32(struct.dependencyId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IN_MEMORY_PERCENTAGE_FIELD_DESC);
      oprot.writeI32(struct.inMemoryPercentage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MODIFICATION_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.lastModificationTimeMs);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientFileInfoTupleSchemeFactory implements SchemeFactory {
    public ClientFileInfoTupleScheme getScheme() {
      return new ClientFileInfoTupleScheme();
    }
  }

  private static class ClientFileInfoTupleScheme extends TupleScheme<ClientFileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientFileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetPath()) {
        optionals.set(2);
      }
      if (struct.isSetUfsPath()) {
        optionals.set(3);
      }
      if (struct.isSetLength()) {
        optionals.set(4);
      }
      if (struct.isSetBlockSizeByte()) {
        optionals.set(5);
      }
      if (struct.isSetCreationTimeMs()) {
        optionals.set(6);
      }
      if (struct.isSetIsComplete()) {
        optionals.set(7);
      }
      if (struct.isSetIsFolder()) {
        optionals.set(8);
      }
      if (struct.isSetIsPinned()) {
        optionals.set(9);
      }
      if (struct.isSetIsCache()) {
        optionals.set(10);
      }
      if (struct.isSetBlockIds()) {
        optionals.set(11);
      }
      if (struct.isSetDependencyId()) {
        optionals.set(12);
      }
      if (struct.isSetInMemoryPercentage()) {
        optionals.set(13);
      }
      if (struct.isSetLastModificationTimeMs()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetUfsPath()) {
        oprot.writeString(struct.ufsPath);
      }
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
      if (struct.isSetBlockSizeByte()) {
        oprot.writeI64(struct.blockSizeByte);
      }
      if (struct.isSetCreationTimeMs()) {
        oprot.writeI64(struct.creationTimeMs);
      }
      if (struct.isSetIsComplete()) {
        oprot.writeBool(struct.isComplete);
      }
      if (struct.isSetIsFolder()) {
        oprot.writeBool(struct.isFolder);
      }
      if (struct.isSetIsPinned()) {
        oprot.writeBool(struct.isPinned);
      }
      if (struct.isSetIsCache()) {
        oprot.writeBool(struct.isCache);
      }
      if (struct.isSetBlockIds()) {
        {
          oprot.writeI32(struct.blockIds.size());
          for (long _iter12 : struct.blockIds)
          {
            oprot.writeI64(_iter12);
          }
        }
      }
      if (struct.isSetDependencyId()) {
        oprot.writeI32(struct.dependencyId);
      }
      if (struct.isSetInMemoryPercentage()) {
        oprot.writeI32(struct.inMemoryPercentage);
      }
      if (struct.isSetLastModificationTimeMs()) {
        oprot.writeI64(struct.lastModificationTimeMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientFileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ufsPath = iprot.readString();
        struct.setUfsPathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.blockSizeByte = iprot.readI64();
        struct.setBlockSizeByteIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creationTimeMs = iprot.readI64();
        struct.setCreationTimeMsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isComplete = iprot.readBool();
        struct.setIsCompleteIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isFolder = iprot.readBool();
        struct.setIsFolderIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isPinned = iprot.readBool();
        struct.setIsPinnedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isCache = iprot.readBool();
        struct.setIsCacheIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.blockIds = new ArrayList<Long>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            long _elem15;
            _elem15 = iprot.readI64();
            struct.blockIds.add(_elem15);
          }
        }
        struct.setBlockIdsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dependencyId = iprot.readI32();
        struct.setDependencyIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.inMemoryPercentage = iprot.readI32();
        struct.setInMemoryPercentageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.lastModificationTimeMs = iprot.readI64();
        struct.setLastModificationTimeMsIsSet(true);
      }
    }
  }

}

