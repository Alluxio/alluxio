syntax = "proto2";

package alluxio.proto.journal;

// Journal entry messages for the file master.

// A pair of strings, useful for maps.
// next available id: 3
message StringPairEntry {
  optional string key = 1;
  optional string value = 2;
}

// next available id: 7
message AddMountPointEntry {
  optional string alluxio_path = 1;
  optional string ufs_path = 2;
  optional bool readOnly = 3;
  repeated StringPairEntry properties = 4;
  optional bool shared = 5;
  optional int64 mount_id = 6;
}

// next available id: 2
message AsyncPersistRequestEntry {
  optional int64 file_id = 1;
}

// next available id: 6
message CompleteFileEntry {
  repeated int64 block_ids = 1;
  optional int64 id = 2;
  optional int64 length = 3;
  optional int64 op_time_ms = 4;
  optional string ufs_fingerprint = 5;
}

// next available id: 5
message DeleteFileEntry {
  optional int64 id = 1;
  optional bool recursive = 2;
  optional int64 op_time_ms = 3;
  optional bool alluxioOnly = 4;
}

// next available id: 2
message DeleteMountPointEntry {
  optional string alluxio_path = 1;
}

// next available id: 3
enum AclAction {
  READ = 0;
  WRITE = 1;
  EXECUTE = 2;
}

// next available id: 2
message AclActions {
  repeated AclAction actions = 1;
}

// AclActions for a String name.
// next available id: 3
message NamedAclActions {
  optional string name = 1;
  optional AclActions actions = 2;
}

// next available id: 7
message AccessControlList {
  optional string owningUser = 1;
  optional string owningGroup = 2;
  repeated NamedAclActions userActions = 3;
  repeated NamedAclActions groupActions = 4;
  optional AclActions maskActions = 5;
  optional AclActions otherActions = 6;
}

// next available id: 16
message InodeDirectoryEntry {
  optional int64 id = 1;
  optional int64 parent_id = 2;
  optional string name = 3;
  optional string persistence_state = 4;
  optional bool pinned = 5;
  optional int64 creation_time_ms = 6;
  optional int64 last_modification_time_ms = 7;
  optional string owner = 8;
  optional string group = 9;
  optional int32 mode = 10;
  optional bool mount_point = 11;
  optional bool direct_children_loaded = 12;
  optional int64 ttl = 13;
  optional PTtlAction ttlAction = 14 [default = DELETE];
  optional AccessControlList acl = 15;
}

// next available id: 3
message InodeDirectoryIdGeneratorEntry {
  optional int64 container_id = 1;
  optional int64 sequence_number = 2;
}

enum PTtlAction {
  DELETE = 0;
  FREE = 1;
}

// next available id: 20
message InodeFileEntry {
  optional int64 id = 1;
  optional int64 parent_id = 2;
  optional string name = 3;
  optional string persistence_state = 4;
  optional bool pinned = 5;
  optional int64 creation_time_ms = 6;
  optional int64 last_modification_time_ms = 7;
  optional int64 block_size_bytes = 8;
  optional int64 length = 9;
  optional bool completed = 10;
  optional bool cacheable = 11;
  repeated int64 blocks = 12;
  optional int64 ttl = 13;
  optional string owner = 14;
  optional string group = 15;
  optional int32 mode = 16;
  optional PTtlAction ttlAction = 17 [default = DELETE];
  optional string ufs_fingerprint = 18;
  optional AccessControlList acl = 19;
}

// next available id: 3
message InodeLastModificationTimeEntry {
  optional int64 id = 1;
  optional int64 last_modification_time_ms = 2;
}

// next available id: 2
message PersistDirectoryEntry {
  optional int64 id = 1;
}

// next available id: 4
message PersistFileEntry {
  optional int64 id = 1;
  optional int64 length = 2;
  optional int64 op_time_ms = 3;
}

// next available id: 5
message ReinitializeFileEntry {
  optional string path = 1;
  optional int64 block_size_bytes = 2;
  optional int64 ttl = 3;
  optional PTtlAction ttlAction = 4 [default = DELETE];
}

// next available id: 4
message RenameEntry {
  optional int64 id = 1;
  optional string dst_path = 2;
  optional int64 op_time_ms = 3;
}

// next available id: 11
message SetAttributeEntry {
  optional int64 id = 1;
  optional int64 op_time_ms = 2;
  optional bool pinned = 3;
  optional int64 ttl = 4;
  optional bool persisted = 5;
  optional string owner = 6;
  optional string group = 7;
  optional int32 permission = 8;
  optional PTtlAction ttlAction = 9 [default = DELETE];
  optional string ufs_fingerprint = 10;
}

enum UfsMode {
  NO_ACCESS = 0;
  READ_ONLY = 1;
  READ_WRITE = 2;
}

// next available id: 3
message UpdateUfsModeEntry {
  optional string ufsPath = 1;
  optional UfsMode ufsMode = 2 [default = READ_WRITE];
}
