syntax = "proto2";

package alluxio.proto.dataserver;

import "status.proto";

// The read/write request type. It can either be an Alluxio block operation or a UFS file operation.
// next available id: 3
enum RequestType {
  ALLUXIO_BLOCK = 0;
  UFS_FILE = 1;
  UFS_BLOCK = 2;
}

// The read request.
// next available id: 9
message ReadRequest {
  optional RequestType type = 1;
  // The block ID or UFS file ID.
  optional int64 id = 2;
  optional int64 offset = 3;
  optional int64 length = 4;
  // If set, this request is to cancel the reading request for the id.
  optional bool cancel = 5;

  optional int64 lock_id = 6;
  optional int64 session_id = 7;
  // If set, do not try to cache the block locally when reading the data from the UFS.
  optional bool no_cache = 8;
  // If set, the server should send packets in the specified packet size.
  optional int64 packet_size = 9;
}

// The write request.
// next available id: 13
message WriteRequest {
  optional RequestType type = 1;
  // The block ID or UFS file ID.
  optional int64 id = 2;
  optional int64 offset = 3;
  optional int64 session_id = 4;

  // This is only applicable for block write.
  optional int32 tier = 5;

  optional bool eof = 6;
  optional bool cancel = 7;

  // The following are only applicable for ufs writes.
  optional string ufs_path = 8;
  optional string owner = 9;
  optional string group = 10;
  optional int32 mode = 11;
  optional int64 mount_id = 12;
}

// The response.
// next available id: 2
message Response {
  optional status.PStatus status = 1;
  optional string message = 2;
}
