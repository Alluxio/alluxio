/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class FileSystemMasterCommonTOptions implements org.apache.thrift.TBase<FileSystemMasterCommonTOptions, FileSystemMasterCommonTOptions._Fields>, java.io.Serializable, Cloneable, Comparable<FileSystemMasterCommonTOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileSystemMasterCommonTOptions");

  private static final org.apache.thrift.protocol.TField SYNC_INTERVAL_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("syncIntervalMs", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TTL_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ttlAction", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileSystemMasterCommonTOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileSystemMasterCommonTOptionsTupleSchemeFactory());
  }

  private long syncIntervalMs; // optional
  private long ttl; // optional
  private alluxio.thrift.TTtlAction ttlAction; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYNC_INTERVAL_MS((short)1, "syncIntervalMs"),
    TTL((short)2, "ttl"),
    /**
     * 
     * @see alluxio.thrift.TTtlAction
     */
    TTL_ACTION((short)3, "ttlAction");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYNC_INTERVAL_MS
          return SYNC_INTERVAL_MS;
        case 2: // TTL
          return TTL;
        case 3: // TTL_ACTION
          return TTL_ACTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SYNCINTERVALMS_ISSET_ID = 0;
  private static final int __TTL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SYNC_INTERVAL_MS,_Fields.TTL,_Fields.TTL_ACTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYNC_INTERVAL_MS, new org.apache.thrift.meta_data.FieldMetaData("syncIntervalMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TTL_ACTION, new org.apache.thrift.meta_data.FieldMetaData("ttlAction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, alluxio.thrift.TTtlAction.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileSystemMasterCommonTOptions.class, metaDataMap);
  }

  public FileSystemMasterCommonTOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileSystemMasterCommonTOptions(FileSystemMasterCommonTOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.syncIntervalMs = other.syncIntervalMs;
    this.ttl = other.ttl;
    if (other.isSetTtlAction()) {
      this.ttlAction = other.ttlAction;
    }
  }

  public FileSystemMasterCommonTOptions deepCopy() {
    return new FileSystemMasterCommonTOptions(this);
  }

  @Override
  public void clear() {
    setSyncIntervalMsIsSet(false);
    this.syncIntervalMs = 0;
    setTtlIsSet(false);
    this.ttl = 0;
    this.ttlAction = null;
  }

  public long getSyncIntervalMs() {
    return this.syncIntervalMs;
  }

  public FileSystemMasterCommonTOptions setSyncIntervalMs(long syncIntervalMs) {
    this.syncIntervalMs = syncIntervalMs;
    setSyncIntervalMsIsSet(true);
    return this;
  }

  public void unsetSyncIntervalMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYNCINTERVALMS_ISSET_ID);
  }

  /** Returns true if field syncIntervalMs is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncIntervalMs() {
    return EncodingUtils.testBit(__isset_bitfield, __SYNCINTERVALMS_ISSET_ID);
  }

  public void setSyncIntervalMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYNCINTERVALMS_ISSET_ID, value);
  }

  public long getTtl() {
    return this.ttl;
  }

  public FileSystemMasterCommonTOptions setTtl(long ttl) {
    this.ttl = ttl;
    setTtlIsSet(true);
    return this;
  }

  public void unsetTtl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTL_ISSET_ID);
  }

  /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
  public boolean isSetTtl() {
    return EncodingUtils.testBit(__isset_bitfield, __TTL_ISSET_ID);
  }

  public void setTtlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTL_ISSET_ID, value);
  }

  /**
   * 
   * @see alluxio.thrift.TTtlAction
   */
  public alluxio.thrift.TTtlAction getTtlAction() {
    return this.ttlAction;
  }

  /**
   * 
   * @see alluxio.thrift.TTtlAction
   */
  public FileSystemMasterCommonTOptions setTtlAction(alluxio.thrift.TTtlAction ttlAction) {
    this.ttlAction = ttlAction;
    return this;
  }

  public void unsetTtlAction() {
    this.ttlAction = null;
  }

  /** Returns true if field ttlAction is set (has been assigned a value) and false otherwise */
  public boolean isSetTtlAction() {
    return this.ttlAction != null;
  }

  public void setTtlActionIsSet(boolean value) {
    if (!value) {
      this.ttlAction = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SYNC_INTERVAL_MS:
      if (value == null) {
        unsetSyncIntervalMs();
      } else {
        setSyncIntervalMs((Long)value);
      }
      break;

    case TTL:
      if (value == null) {
        unsetTtl();
      } else {
        setTtl((Long)value);
      }
      break;

    case TTL_ACTION:
      if (value == null) {
        unsetTtlAction();
      } else {
        setTtlAction((alluxio.thrift.TTtlAction)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SYNC_INTERVAL_MS:
      return getSyncIntervalMs();

    case TTL:
      return getTtl();

    case TTL_ACTION:
      return getTtlAction();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SYNC_INTERVAL_MS:
      return isSetSyncIntervalMs();
    case TTL:
      return isSetTtl();
    case TTL_ACTION:
      return isSetTtlAction();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileSystemMasterCommonTOptions)
      return this.equals((FileSystemMasterCommonTOptions)that);
    return false;
  }

  public boolean equals(FileSystemMasterCommonTOptions that) {
    if (that == null)
      return false;

    boolean this_present_syncIntervalMs = true && this.isSetSyncIntervalMs();
    boolean that_present_syncIntervalMs = true && that.isSetSyncIntervalMs();
    if (this_present_syncIntervalMs || that_present_syncIntervalMs) {
      if (!(this_present_syncIntervalMs && that_present_syncIntervalMs))
        return false;
      if (this.syncIntervalMs != that.syncIntervalMs)
        return false;
    }

    boolean this_present_ttl = true && this.isSetTtl();
    boolean that_present_ttl = true && that.isSetTtl();
    if (this_present_ttl || that_present_ttl) {
      if (!(this_present_ttl && that_present_ttl))
        return false;
      if (this.ttl != that.ttl)
        return false;
    }

    boolean this_present_ttlAction = true && this.isSetTtlAction();
    boolean that_present_ttlAction = true && that.isSetTtlAction();
    if (this_present_ttlAction || that_present_ttlAction) {
      if (!(this_present_ttlAction && that_present_ttlAction))
        return false;
      if (!this.ttlAction.equals(that.ttlAction))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_syncIntervalMs = true && (isSetSyncIntervalMs());
    list.add(present_syncIntervalMs);
    if (present_syncIntervalMs)
      list.add(syncIntervalMs);

    boolean present_ttl = true && (isSetTtl());
    list.add(present_ttl);
    if (present_ttl)
      list.add(ttl);

    boolean present_ttlAction = true && (isSetTtlAction());
    list.add(present_ttlAction);
    if (present_ttlAction)
      list.add(ttlAction.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(FileSystemMasterCommonTOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSyncIntervalMs()).compareTo(other.isSetSyncIntervalMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncIntervalMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncIntervalMs, other.syncIntervalMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtl()).compareTo(other.isSetTtl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, other.ttl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtlAction()).compareTo(other.isSetTtlAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtlAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttlAction, other.ttlAction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileSystemMasterCommonTOptions(");
    boolean first = true;

    if (isSetSyncIntervalMs()) {
      sb.append("syncIntervalMs:");
      sb.append(this.syncIntervalMs);
      first = false;
    }
    if (isSetTtl()) {
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
    }
    if (isSetTtlAction()) {
      if (!first) sb.append(", ");
      sb.append("ttlAction:");
      if (this.ttlAction == null) {
        sb.append("null");
      } else {
        sb.append(this.ttlAction);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileSystemMasterCommonTOptionsStandardSchemeFactory implements SchemeFactory {
    public FileSystemMasterCommonTOptionsStandardScheme getScheme() {
      return new FileSystemMasterCommonTOptionsStandardScheme();
    }
  }

  private static class FileSystemMasterCommonTOptionsStandardScheme extends StandardScheme<FileSystemMasterCommonTOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileSystemMasterCommonTOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYNC_INTERVAL_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.syncIntervalMs = iprot.readI64();
              struct.setSyncIntervalMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TTL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ttl = iprot.readI64();
              struct.setTtlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TTL_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ttlAction = alluxio.thrift.TTtlAction.findByValue(iprot.readI32());
              struct.setTtlActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileSystemMasterCommonTOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSyncIntervalMs()) {
        oprot.writeFieldBegin(SYNC_INTERVAL_MS_FIELD_DESC);
        oprot.writeI64(struct.syncIntervalMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTtl()) {
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI64(struct.ttl);
        oprot.writeFieldEnd();
      }
      if (struct.ttlAction != null) {
        if (struct.isSetTtlAction()) {
          oprot.writeFieldBegin(TTL_ACTION_FIELD_DESC);
          oprot.writeI32(struct.ttlAction.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileSystemMasterCommonTOptionsTupleSchemeFactory implements SchemeFactory {
    public FileSystemMasterCommonTOptionsTupleScheme getScheme() {
      return new FileSystemMasterCommonTOptionsTupleScheme();
    }
  }

  private static class FileSystemMasterCommonTOptionsTupleScheme extends TupleScheme<FileSystemMasterCommonTOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileSystemMasterCommonTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSyncIntervalMs()) {
        optionals.set(0);
      }
      if (struct.isSetTtl()) {
        optionals.set(1);
      }
      if (struct.isSetTtlAction()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSyncIntervalMs()) {
        oprot.writeI64(struct.syncIntervalMs);
      }
      if (struct.isSetTtl()) {
        oprot.writeI64(struct.ttl);
      }
      if (struct.isSetTtlAction()) {
        oprot.writeI32(struct.ttlAction.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileSystemMasterCommonTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.syncIntervalMs = iprot.readI64();
        struct.setSyncIntervalMsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ttl = iprot.readI64();
        struct.setTtlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ttlAction = alluxio.thrift.TTtlAction.findByValue(iprot.readI32());
        struct.setTtlActionIsSet(true);
      }
    }
  }

}

