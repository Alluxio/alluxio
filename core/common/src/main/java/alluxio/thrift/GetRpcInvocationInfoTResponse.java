/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class GetRpcInvocationInfoTResponse implements org.apache.thrift.TBase<GetRpcInvocationInfoTResponse, GetRpcInvocationInfoTResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetRpcInvocationInfoTResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRpcInvocationInfoTResponse");

  private static final org.apache.thrift.protocol.TField RPC_INVOCATION_INFO_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcInvocationInfoMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetRpcInvocationInfoTResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetRpcInvocationInfoTResponseTupleSchemeFactory());
  }

  private Map<String,Long> rpcInvocationInfoMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RPC_INVOCATION_INFO_MAP((short)1, "rpcInvocationInfoMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RPC_INVOCATION_INFO_MAP
          return RPC_INVOCATION_INFO_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RPC_INVOCATION_INFO_MAP, new org.apache.thrift.meta_data.FieldMetaData("rpcInvocationInfoMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRpcInvocationInfoTResponse.class, metaDataMap);
  }

  public GetRpcInvocationInfoTResponse() {
  }

  public GetRpcInvocationInfoTResponse(
    Map<String,Long> rpcInvocationInfoMap)
  {
    this();
    this.rpcInvocationInfoMap = rpcInvocationInfoMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetRpcInvocationInfoTResponse(GetRpcInvocationInfoTResponse other) {
    if (other.isSetRpcInvocationInfoMap()) {
      Map<String,Long> __this__rpcInvocationInfoMap = new HashMap<String,Long>(other.rpcInvocationInfoMap);
      this.rpcInvocationInfoMap = __this__rpcInvocationInfoMap;
    }
  }

  public GetRpcInvocationInfoTResponse deepCopy() {
    return new GetRpcInvocationInfoTResponse(this);
  }

  @Override
  public void clear() {
    this.rpcInvocationInfoMap = null;
  }

  public int getRpcInvocationInfoMapSize() {
    return (this.rpcInvocationInfoMap == null) ? 0 : this.rpcInvocationInfoMap.size();
  }

  public void putToRpcInvocationInfoMap(String key, long val) {
    if (this.rpcInvocationInfoMap == null) {
      this.rpcInvocationInfoMap = new HashMap<String,Long>();
    }
    this.rpcInvocationInfoMap.put(key, val);
  }

  public Map<String,Long> getRpcInvocationInfoMap() {
    return this.rpcInvocationInfoMap;
  }

  public GetRpcInvocationInfoTResponse setRpcInvocationInfoMap(Map<String,Long> rpcInvocationInfoMap) {
    this.rpcInvocationInfoMap = rpcInvocationInfoMap;
    return this;
  }

  public void unsetRpcInvocationInfoMap() {
    this.rpcInvocationInfoMap = null;
  }

  /** Returns true if field rpcInvocationInfoMap is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcInvocationInfoMap() {
    return this.rpcInvocationInfoMap != null;
  }

  public void setRpcInvocationInfoMapIsSet(boolean value) {
    if (!value) {
      this.rpcInvocationInfoMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RPC_INVOCATION_INFO_MAP:
      if (value == null) {
        unsetRpcInvocationInfoMap();
      } else {
        setRpcInvocationInfoMap((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RPC_INVOCATION_INFO_MAP:
      return getRpcInvocationInfoMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RPC_INVOCATION_INFO_MAP:
      return isSetRpcInvocationInfoMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetRpcInvocationInfoTResponse)
      return this.equals((GetRpcInvocationInfoTResponse)that);
    return false;
  }

  public boolean equals(GetRpcInvocationInfoTResponse that) {
    if (that == null)
      return false;

    boolean this_present_rpcInvocationInfoMap = true && this.isSetRpcInvocationInfoMap();
    boolean that_present_rpcInvocationInfoMap = true && that.isSetRpcInvocationInfoMap();
    if (this_present_rpcInvocationInfoMap || that_present_rpcInvocationInfoMap) {
      if (!(this_present_rpcInvocationInfoMap && that_present_rpcInvocationInfoMap))
        return false;
      if (!this.rpcInvocationInfoMap.equals(that.rpcInvocationInfoMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rpcInvocationInfoMap = true && (isSetRpcInvocationInfoMap());
    list.add(present_rpcInvocationInfoMap);
    if (present_rpcInvocationInfoMap)
      list.add(rpcInvocationInfoMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetRpcInvocationInfoTResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRpcInvocationInfoMap()).compareTo(other.isSetRpcInvocationInfoMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcInvocationInfoMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcInvocationInfoMap, other.rpcInvocationInfoMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetRpcInvocationInfoTResponse(");
    boolean first = true;

    sb.append("rpcInvocationInfoMap:");
    if (this.rpcInvocationInfoMap == null) {
      sb.append("null");
    } else {
      sb.append(this.rpcInvocationInfoMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetRpcInvocationInfoTResponseStandardSchemeFactory implements SchemeFactory {
    public GetRpcInvocationInfoTResponseStandardScheme getScheme() {
      return new GetRpcInvocationInfoTResponseStandardScheme();
    }
  }

  private static class GetRpcInvocationInfoTResponseStandardScheme extends StandardScheme<GetRpcInvocationInfoTResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetRpcInvocationInfoTResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RPC_INVOCATION_INFO_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.rpcInvocationInfoMap = new HashMap<String,Long>(2*_map18.size);
                String _key19;
                long _val20;
                for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                {
                  _key19 = iprot.readString();
                  _val20 = iprot.readI64();
                  struct.rpcInvocationInfoMap.put(_key19, _val20);
                }
                iprot.readMapEnd();
              }
              struct.setRpcInvocationInfoMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetRpcInvocationInfoTResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rpcInvocationInfoMap != null) {
        oprot.writeFieldBegin(RPC_INVOCATION_INFO_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.rpcInvocationInfoMap.size()));
          for (Map.Entry<String, Long> _iter22 : struct.rpcInvocationInfoMap.entrySet())
          {
            oprot.writeString(_iter22.getKey());
            oprot.writeI64(_iter22.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetRpcInvocationInfoTResponseTupleSchemeFactory implements SchemeFactory {
    public GetRpcInvocationInfoTResponseTupleScheme getScheme() {
      return new GetRpcInvocationInfoTResponseTupleScheme();
    }
  }

  private static class GetRpcInvocationInfoTResponseTupleScheme extends TupleScheme<GetRpcInvocationInfoTResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetRpcInvocationInfoTResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRpcInvocationInfoMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRpcInvocationInfoMap()) {
        {
          oprot.writeI32(struct.rpcInvocationInfoMap.size());
          for (Map.Entry<String, Long> _iter23 : struct.rpcInvocationInfoMap.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            oprot.writeI64(_iter23.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetRpcInvocationInfoTResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.rpcInvocationInfoMap = new HashMap<String,Long>(2*_map24.size);
          String _key25;
          long _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readString();
            _val26 = iprot.readI64();
            struct.rpcInvocationInfoMap.put(_key25, _val26);
          }
        }
        struct.setRpcInvocationInfoMapIsSet(true);
      }
    }
  }

}

