/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class GetWorkerReportTOptions implements org.apache.thrift.TBase<GetWorkerReportTOptions, GetWorkerReportTOptions._Fields>, java.io.Serializable, Cloneable, Comparable<GetWorkerReportTOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetWorkerReportTOptions");

  private static final org.apache.thrift.protocol.TField ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("addresses", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldRange", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField WORKER_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("workerRange", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetWorkerReportTOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetWorkerReportTOptionsTupleSchemeFactory());
  }

  private Set<String> addresses; // optional
  private Set<WorkerInfoField> fieldRange; // optional
  private WorkerRange workerRange; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * addresses are only valid when workerRange is SPECIFIED
     */
    ADDRESSES((short)1, "addresses"),
    FIELD_RANGE((short)2, "fieldRange"),
    /**
     * 
     * @see WorkerRange
     */
    WORKER_RANGE((short)3, "workerRange");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESSES
          return ADDRESSES;
        case 2: // FIELD_RANGE
          return FIELD_RANGE;
        case 3: // WORKER_RANGE
          return WORKER_RANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ADDRESSES,_Fields.FIELD_RANGE,_Fields.WORKER_RANGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("addresses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FIELD_RANGE, new org.apache.thrift.meta_data.FieldMetaData("fieldRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkerInfoField.class))));
    tmpMap.put(_Fields.WORKER_RANGE, new org.apache.thrift.meta_data.FieldMetaData("workerRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkerRange.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetWorkerReportTOptions.class, metaDataMap);
  }

  public GetWorkerReportTOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetWorkerReportTOptions(GetWorkerReportTOptions other) {
    if (other.isSetAddresses()) {
      Set<String> __this__addresses = new HashSet<String>(other.addresses);
      this.addresses = __this__addresses;
    }
    if (other.isSetFieldRange()) {
      Set<WorkerInfoField> __this__fieldRange = new HashSet<WorkerInfoField>(other.fieldRange.size());
      for (WorkerInfoField other_element : other.fieldRange) {
        __this__fieldRange.add(other_element);
      }
      this.fieldRange = __this__fieldRange;
    }
    if (other.isSetWorkerRange()) {
      this.workerRange = other.workerRange;
    }
  }

  public GetWorkerReportTOptions deepCopy() {
    return new GetWorkerReportTOptions(this);
  }

  @Override
  public void clear() {
    this.addresses = null;
    this.fieldRange = null;
    this.workerRange = null;
  }

  public int getAddressesSize() {
    return (this.addresses == null) ? 0 : this.addresses.size();
  }

  public java.util.Iterator<String> getAddressesIterator() {
    return (this.addresses == null) ? null : this.addresses.iterator();
  }

  public void addToAddresses(String elem) {
    if (this.addresses == null) {
      this.addresses = new HashSet<String>();
    }
    this.addresses.add(elem);
  }

  /**
   * addresses are only valid when workerRange is SPECIFIED
   */
  public Set<String> getAddresses() {
    return this.addresses;
  }

  /**
   * addresses are only valid when workerRange is SPECIFIED
   */
  public GetWorkerReportTOptions setAddresses(Set<String> addresses) {
    this.addresses = addresses;
    return this;
  }

  public void unsetAddresses() {
    this.addresses = null;
  }

  /** Returns true if field addresses is set (has been assigned a value) and false otherwise */
  public boolean isSetAddresses() {
    return this.addresses != null;
  }

  public void setAddressesIsSet(boolean value) {
    if (!value) {
      this.addresses = null;
    }
  }

  public int getFieldRangeSize() {
    return (this.fieldRange == null) ? 0 : this.fieldRange.size();
  }

  public java.util.Iterator<WorkerInfoField> getFieldRangeIterator() {
    return (this.fieldRange == null) ? null : this.fieldRange.iterator();
  }

  public void addToFieldRange(WorkerInfoField elem) {
    if (this.fieldRange == null) {
      this.fieldRange = new HashSet<WorkerInfoField>();
    }
    this.fieldRange.add(elem);
  }

  public Set<WorkerInfoField> getFieldRange() {
    return this.fieldRange;
  }

  public GetWorkerReportTOptions setFieldRange(Set<WorkerInfoField> fieldRange) {
    this.fieldRange = fieldRange;
    return this;
  }

  public void unsetFieldRange() {
    this.fieldRange = null;
  }

  /** Returns true if field fieldRange is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldRange() {
    return this.fieldRange != null;
  }

  public void setFieldRangeIsSet(boolean value) {
    if (!value) {
      this.fieldRange = null;
    }
  }

  /**
   * 
   * @see WorkerRange
   */
  public WorkerRange getWorkerRange() {
    return this.workerRange;
  }

  /**
   * 
   * @see WorkerRange
   */
  public GetWorkerReportTOptions setWorkerRange(WorkerRange workerRange) {
    this.workerRange = workerRange;
    return this;
  }

  public void unsetWorkerRange() {
    this.workerRange = null;
  }

  /** Returns true if field workerRange is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerRange() {
    return this.workerRange != null;
  }

  public void setWorkerRangeIsSet(boolean value) {
    if (!value) {
      this.workerRange = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDRESSES:
      if (value == null) {
        unsetAddresses();
      } else {
        setAddresses((Set<String>)value);
      }
      break;

    case FIELD_RANGE:
      if (value == null) {
        unsetFieldRange();
      } else {
        setFieldRange((Set<WorkerInfoField>)value);
      }
      break;

    case WORKER_RANGE:
      if (value == null) {
        unsetWorkerRange();
      } else {
        setWorkerRange((WorkerRange)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESSES:
      return getAddresses();

    case FIELD_RANGE:
      return getFieldRange();

    case WORKER_RANGE:
      return getWorkerRange();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDRESSES:
      return isSetAddresses();
    case FIELD_RANGE:
      return isSetFieldRange();
    case WORKER_RANGE:
      return isSetWorkerRange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetWorkerReportTOptions)
      return this.equals((GetWorkerReportTOptions)that);
    return false;
  }

  public boolean equals(GetWorkerReportTOptions that) {
    if (that == null)
      return false;

    boolean this_present_addresses = true && this.isSetAddresses();
    boolean that_present_addresses = true && that.isSetAddresses();
    if (this_present_addresses || that_present_addresses) {
      if (!(this_present_addresses && that_present_addresses))
        return false;
      if (!this.addresses.equals(that.addresses))
        return false;
    }

    boolean this_present_fieldRange = true && this.isSetFieldRange();
    boolean that_present_fieldRange = true && that.isSetFieldRange();
    if (this_present_fieldRange || that_present_fieldRange) {
      if (!(this_present_fieldRange && that_present_fieldRange))
        return false;
      if (!this.fieldRange.equals(that.fieldRange))
        return false;
    }

    boolean this_present_workerRange = true && this.isSetWorkerRange();
    boolean that_present_workerRange = true && that.isSetWorkerRange();
    if (this_present_workerRange || that_present_workerRange) {
      if (!(this_present_workerRange && that_present_workerRange))
        return false;
      if (!this.workerRange.equals(that.workerRange))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_addresses = true && (isSetAddresses());
    list.add(present_addresses);
    if (present_addresses)
      list.add(addresses);

    boolean present_fieldRange = true && (isSetFieldRange());
    list.add(present_fieldRange);
    if (present_fieldRange)
      list.add(fieldRange);

    boolean present_workerRange = true && (isSetWorkerRange());
    list.add(present_workerRange);
    if (present_workerRange)
      list.add(workerRange.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(GetWorkerReportTOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAddresses()).compareTo(other.isSetAddresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addresses, other.addresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldRange()).compareTo(other.isSetFieldRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldRange, other.fieldRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkerRange()).compareTo(other.isSetWorkerRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerRange, other.workerRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetWorkerReportTOptions(");
    boolean first = true;

    if (isSetAddresses()) {
      sb.append("addresses:");
      if (this.addresses == null) {
        sb.append("null");
      } else {
        sb.append(this.addresses);
      }
      first = false;
    }
    if (isSetFieldRange()) {
      if (!first) sb.append(", ");
      sb.append("fieldRange:");
      if (this.fieldRange == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldRange);
      }
      first = false;
    }
    if (isSetWorkerRange()) {
      if (!first) sb.append(", ");
      sb.append("workerRange:");
      if (this.workerRange == null) {
        sb.append("null");
      } else {
        sb.append(this.workerRange);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetWorkerReportTOptionsStandardSchemeFactory implements SchemeFactory {
    public GetWorkerReportTOptionsStandardScheme getScheme() {
      return new GetWorkerReportTOptionsStandardScheme();
    }
  }

  private static class GetWorkerReportTOptionsStandardScheme extends StandardScheme<GetWorkerReportTOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetWorkerReportTOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set48 = iprot.readSetBegin();
                struct.addresses = new HashSet<String>(2*_set48.size);
                String _elem49;
                for (int _i50 = 0; _i50 < _set48.size; ++_i50)
                {
                  _elem49 = iprot.readString();
                  struct.addresses.add(_elem49);
                }
                iprot.readSetEnd();
              }
              struct.setAddressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set51 = iprot.readSetBegin();
                struct.fieldRange = new HashSet<WorkerInfoField>(2*_set51.size);
                WorkerInfoField _elem52;
                for (int _i53 = 0; _i53 < _set51.size; ++_i53)
                {
                  _elem52 = alluxio.thrift.WorkerInfoField.findByValue(iprot.readI32());
                  struct.fieldRange.add(_elem52);
                }
                iprot.readSetEnd();
              }
              struct.setFieldRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORKER_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workerRange = alluxio.thrift.WorkerRange.findByValue(iprot.readI32());
              struct.setWorkerRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetWorkerReportTOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.addresses != null) {
        if (struct.isSetAddresses()) {
          oprot.writeFieldBegin(ADDRESSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.addresses.size()));
            for (String _iter54 : struct.addresses)
            {
              oprot.writeString(_iter54);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldRange != null) {
        if (struct.isSetFieldRange()) {
          oprot.writeFieldBegin(FIELD_RANGE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.fieldRange.size()));
            for (WorkerInfoField _iter55 : struct.fieldRange)
            {
              oprot.writeI32(_iter55.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.workerRange != null) {
        if (struct.isSetWorkerRange()) {
          oprot.writeFieldBegin(WORKER_RANGE_FIELD_DESC);
          oprot.writeI32(struct.workerRange.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetWorkerReportTOptionsTupleSchemeFactory implements SchemeFactory {
    public GetWorkerReportTOptionsTupleScheme getScheme() {
      return new GetWorkerReportTOptionsTupleScheme();
    }
  }

  private static class GetWorkerReportTOptionsTupleScheme extends TupleScheme<GetWorkerReportTOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetWorkerReportTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAddresses()) {
        optionals.set(0);
      }
      if (struct.isSetFieldRange()) {
        optionals.set(1);
      }
      if (struct.isSetWorkerRange()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAddresses()) {
        {
          oprot.writeI32(struct.addresses.size());
          for (String _iter56 : struct.addresses)
          {
            oprot.writeString(_iter56);
          }
        }
      }
      if (struct.isSetFieldRange()) {
        {
          oprot.writeI32(struct.fieldRange.size());
          for (WorkerInfoField _iter57 : struct.fieldRange)
          {
            oprot.writeI32(_iter57.getValue());
          }
        }
      }
      if (struct.isSetWorkerRange()) {
        oprot.writeI32(struct.workerRange.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetWorkerReportTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set58 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.addresses = new HashSet<String>(2*_set58.size);
          String _elem59;
          for (int _i60 = 0; _i60 < _set58.size; ++_i60)
          {
            _elem59 = iprot.readString();
            struct.addresses.add(_elem59);
          }
        }
        struct.setAddressesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set61 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.fieldRange = new HashSet<WorkerInfoField>(2*_set61.size);
          WorkerInfoField _elem62;
          for (int _i63 = 0; _i63 < _set61.size; ++_i63)
          {
            _elem62 = alluxio.thrift.WorkerInfoField.findByValue(iprot.readI32());
            struct.fieldRange.add(_elem62);
          }
        }
        struct.setFieldRangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.workerRange = alluxio.thrift.WorkerRange.findByValue(iprot.readI32());
        struct.setWorkerRangeIsSet(true);
      }
    }
  }

}

