/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class GetPinnedFilePathsTResponse implements org.apache.thrift.TBase<GetPinnedFilePathsTResponse, GetPinnedFilePathsTResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetPinnedFilePathsTResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPinnedFilePathsTResponse");

  private static final org.apache.thrift.protocol.TField PINNED_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("pinnedPaths", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetPinnedFilePathsTResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetPinnedFilePathsTResponseTupleSchemeFactory());
  }

  private List<String> pinnedPaths; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PINNED_PATHS((short)1, "pinnedPaths");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PINNED_PATHS
          return PINNED_PATHS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PINNED_PATHS, new org.apache.thrift.meta_data.FieldMetaData("pinnedPaths", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPinnedFilePathsTResponse.class, metaDataMap);
  }

  public GetPinnedFilePathsTResponse() {
  }

  public GetPinnedFilePathsTResponse(
    List<String> pinnedPaths)
  {
    this();
    this.pinnedPaths = pinnedPaths;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetPinnedFilePathsTResponse(GetPinnedFilePathsTResponse other) {
    if (other.isSetPinnedPaths()) {
      List<String> __this__pinnedPaths = new ArrayList<String>(other.pinnedPaths);
      this.pinnedPaths = __this__pinnedPaths;
    }
  }

  public GetPinnedFilePathsTResponse deepCopy() {
    return new GetPinnedFilePathsTResponse(this);
  }

  @Override
  public void clear() {
    this.pinnedPaths = null;
  }

  public int getPinnedPathsSize() {
    return (this.pinnedPaths == null) ? 0 : this.pinnedPaths.size();
  }

  public java.util.Iterator<String> getPinnedPathsIterator() {
    return (this.pinnedPaths == null) ? null : this.pinnedPaths.iterator();
  }

  public void addToPinnedPaths(String elem) {
    if (this.pinnedPaths == null) {
      this.pinnedPaths = new ArrayList<String>();
    }
    this.pinnedPaths.add(elem);
  }

  public List<String> getPinnedPaths() {
    return this.pinnedPaths;
  }

  public GetPinnedFilePathsTResponse setPinnedPaths(List<String> pinnedPaths) {
    this.pinnedPaths = pinnedPaths;
    return this;
  }

  public void unsetPinnedPaths() {
    this.pinnedPaths = null;
  }

  /** Returns true if field pinnedPaths is set (has been assigned a value) and false otherwise */
  public boolean isSetPinnedPaths() {
    return this.pinnedPaths != null;
  }

  public void setPinnedPathsIsSet(boolean value) {
    if (!value) {
      this.pinnedPaths = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PINNED_PATHS:
      if (value == null) {
        unsetPinnedPaths();
      } else {
        setPinnedPaths((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PINNED_PATHS:
      return getPinnedPaths();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PINNED_PATHS:
      return isSetPinnedPaths();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetPinnedFilePathsTResponse)
      return this.equals((GetPinnedFilePathsTResponse)that);
    return false;
  }

  public boolean equals(GetPinnedFilePathsTResponse that) {
    if (that == null)
      return false;

    boolean this_present_pinnedPaths = true && this.isSetPinnedPaths();
    boolean that_present_pinnedPaths = true && that.isSetPinnedPaths();
    if (this_present_pinnedPaths || that_present_pinnedPaths) {
      if (!(this_present_pinnedPaths && that_present_pinnedPaths))
        return false;
      if (!this.pinnedPaths.equals(that.pinnedPaths))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pinnedPaths = true && (isSetPinnedPaths());
    list.add(present_pinnedPaths);
    if (present_pinnedPaths)
      list.add(pinnedPaths);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetPinnedFilePathsTResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPinnedPaths()).compareTo(other.isSetPinnedPaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinnedPaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinnedPaths, other.pinnedPaths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetPinnedFilePathsTResponse(");
    boolean first = true;

    sb.append("pinnedPaths:");
    if (this.pinnedPaths == null) {
      sb.append("null");
    } else {
      sb.append(this.pinnedPaths);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetPinnedFilePathsTResponseStandardSchemeFactory implements SchemeFactory {
    public GetPinnedFilePathsTResponseStandardScheme getScheme() {
      return new GetPinnedFilePathsTResponseStandardScheme();
    }
  }

  private static class GetPinnedFilePathsTResponseStandardScheme extends StandardScheme<GetPinnedFilePathsTResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetPinnedFilePathsTResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PINNED_PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.pinnedPaths = new ArrayList<String>(_list84.size);
                String _elem85;
                for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                {
                  _elem85 = iprot.readString();
                  struct.pinnedPaths.add(_elem85);
                }
                iprot.readListEnd();
              }
              struct.setPinnedPathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetPinnedFilePathsTResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pinnedPaths != null) {
        oprot.writeFieldBegin(PINNED_PATHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.pinnedPaths.size()));
          for (String _iter87 : struct.pinnedPaths)
          {
            oprot.writeString(_iter87);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetPinnedFilePathsTResponseTupleSchemeFactory implements SchemeFactory {
    public GetPinnedFilePathsTResponseTupleScheme getScheme() {
      return new GetPinnedFilePathsTResponseTupleScheme();
    }
  }

  private static class GetPinnedFilePathsTResponseTupleScheme extends TupleScheme<GetPinnedFilePathsTResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetPinnedFilePathsTResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPinnedPaths()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPinnedPaths()) {
        {
          oprot.writeI32(struct.pinnedPaths.size());
          for (String _iter88 : struct.pinnedPaths)
          {
            oprot.writeString(_iter88);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetPinnedFilePathsTResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.pinnedPaths = new ArrayList<String>(_list89.size);
          String _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = iprot.readString();
            struct.pinnedPaths.add(_elem90);
          }
        }
        struct.setPinnedPathsIsSet(true);
      }
    }
  }

}

