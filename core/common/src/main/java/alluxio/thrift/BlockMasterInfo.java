/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class BlockMasterInfo implements org.apache.thrift.TBase<BlockMasterInfo, BlockMasterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BlockMasterInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlockMasterInfo");

  private static final org.apache.thrift.protocol.TField LIVE_WORKER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveWorkerNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEAD_WORKER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("deadWorkerNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("TotalCapacity", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USED_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("usedCapacity", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FREE_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("FreeCapacity", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_CAPACITY_ON_TIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCapacityOnTiers", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField USED_CAPACITY_ON_TIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("usedCapacityOnTiers", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlockMasterInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlockMasterInfoTupleSchemeFactory());
  }

  private int liveWorkerNum; // required
  private int deadWorkerNum; // required
  private String TotalCapacity; // required
  private String usedCapacity; // required
  private String FreeCapacity; // required
  private Map<String,String> totalCapacityOnTiers; // required
  private Map<String,String> usedCapacityOnTiers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIVE_WORKER_NUM((short)1, "liveWorkerNum"),
    DEAD_WORKER_NUM((short)2, "deadWorkerNum"),
    TOTAL_CAPACITY((short)3, "TotalCapacity"),
    USED_CAPACITY((short)4, "usedCapacity"),
    FREE_CAPACITY((short)5, "FreeCapacity"),
    TOTAL_CAPACITY_ON_TIERS((short)6, "totalCapacityOnTiers"),
    USED_CAPACITY_ON_TIERS((short)7, "usedCapacityOnTiers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIVE_WORKER_NUM
          return LIVE_WORKER_NUM;
        case 2: // DEAD_WORKER_NUM
          return DEAD_WORKER_NUM;
        case 3: // TOTAL_CAPACITY
          return TOTAL_CAPACITY;
        case 4: // USED_CAPACITY
          return USED_CAPACITY;
        case 5: // FREE_CAPACITY
          return FREE_CAPACITY;
        case 6: // TOTAL_CAPACITY_ON_TIERS
          return TOTAL_CAPACITY_ON_TIERS;
        case 7: // USED_CAPACITY_ON_TIERS
          return USED_CAPACITY_ON_TIERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIVEWORKERNUM_ISSET_ID = 0;
  private static final int __DEADWORKERNUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIVE_WORKER_NUM, new org.apache.thrift.meta_data.FieldMetaData("liveWorkerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEAD_WORKER_NUM, new org.apache.thrift.meta_data.FieldMetaData("deadWorkerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("TotalCapacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USED_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("usedCapacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREE_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("FreeCapacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_CAPACITY_ON_TIERS, new org.apache.thrift.meta_data.FieldMetaData("totalCapacityOnTiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USED_CAPACITY_ON_TIERS, new org.apache.thrift.meta_data.FieldMetaData("usedCapacityOnTiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlockMasterInfo.class, metaDataMap);
  }

  public BlockMasterInfo() {
  }

  public BlockMasterInfo(
    int liveWorkerNum,
    int deadWorkerNum,
    String TotalCapacity,
    String usedCapacity,
    String FreeCapacity,
    Map<String,String> totalCapacityOnTiers,
    Map<String,String> usedCapacityOnTiers)
  {
    this();
    this.liveWorkerNum = liveWorkerNum;
    setLiveWorkerNumIsSet(true);
    this.deadWorkerNum = deadWorkerNum;
    setDeadWorkerNumIsSet(true);
    this.TotalCapacity = TotalCapacity;
    this.usedCapacity = usedCapacity;
    this.FreeCapacity = FreeCapacity;
    this.totalCapacityOnTiers = totalCapacityOnTiers;
    this.usedCapacityOnTiers = usedCapacityOnTiers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockMasterInfo(BlockMasterInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.liveWorkerNum = other.liveWorkerNum;
    this.deadWorkerNum = other.deadWorkerNum;
    if (other.isSetTotalCapacity()) {
      this.TotalCapacity = other.TotalCapacity;
    }
    if (other.isSetUsedCapacity()) {
      this.usedCapacity = other.usedCapacity;
    }
    if (other.isSetFreeCapacity()) {
      this.FreeCapacity = other.FreeCapacity;
    }
    if (other.isSetTotalCapacityOnTiers()) {
      Map<String,String> __this__totalCapacityOnTiers = new HashMap<String,String>(other.totalCapacityOnTiers);
      this.totalCapacityOnTiers = __this__totalCapacityOnTiers;
    }
    if (other.isSetUsedCapacityOnTiers()) {
      Map<String,String> __this__usedCapacityOnTiers = new HashMap<String,String>(other.usedCapacityOnTiers);
      this.usedCapacityOnTiers = __this__usedCapacityOnTiers;
    }
  }

  public BlockMasterInfo deepCopy() {
    return new BlockMasterInfo(this);
  }

  @Override
  public void clear() {
    setLiveWorkerNumIsSet(false);
    this.liveWorkerNum = 0;
    setDeadWorkerNumIsSet(false);
    this.deadWorkerNum = 0;
    this.TotalCapacity = null;
    this.usedCapacity = null;
    this.FreeCapacity = null;
    this.totalCapacityOnTiers = null;
    this.usedCapacityOnTiers = null;
  }

  public int getLiveWorkerNum() {
    return this.liveWorkerNum;
  }

  public BlockMasterInfo setLiveWorkerNum(int liveWorkerNum) {
    this.liveWorkerNum = liveWorkerNum;
    setLiveWorkerNumIsSet(true);
    return this;
  }

  public void unsetLiveWorkerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVEWORKERNUM_ISSET_ID);
  }

  /** Returns true if field liveWorkerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveWorkerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVEWORKERNUM_ISSET_ID);
  }

  public void setLiveWorkerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVEWORKERNUM_ISSET_ID, value);
  }

  public int getDeadWorkerNum() {
    return this.deadWorkerNum;
  }

  public BlockMasterInfo setDeadWorkerNum(int deadWorkerNum) {
    this.deadWorkerNum = deadWorkerNum;
    setDeadWorkerNumIsSet(true);
    return this;
  }

  public void unsetDeadWorkerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEADWORKERNUM_ISSET_ID);
  }

  /** Returns true if field deadWorkerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetDeadWorkerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __DEADWORKERNUM_ISSET_ID);
  }

  public void setDeadWorkerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEADWORKERNUM_ISSET_ID, value);
  }

  public String getTotalCapacity() {
    return this.TotalCapacity;
  }

  public BlockMasterInfo setTotalCapacity(String TotalCapacity) {
    this.TotalCapacity = TotalCapacity;
    return this;
  }

  public void unsetTotalCapacity() {
    this.TotalCapacity = null;
  }

  /** Returns true if field TotalCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCapacity() {
    return this.TotalCapacity != null;
  }

  public void setTotalCapacityIsSet(boolean value) {
    if (!value) {
      this.TotalCapacity = null;
    }
  }

  public String getUsedCapacity() {
    return this.usedCapacity;
  }

  public BlockMasterInfo setUsedCapacity(String usedCapacity) {
    this.usedCapacity = usedCapacity;
    return this;
  }

  public void unsetUsedCapacity() {
    this.usedCapacity = null;
  }

  /** Returns true if field usedCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedCapacity() {
    return this.usedCapacity != null;
  }

  public void setUsedCapacityIsSet(boolean value) {
    if (!value) {
      this.usedCapacity = null;
    }
  }

  public String getFreeCapacity() {
    return this.FreeCapacity;
  }

  public BlockMasterInfo setFreeCapacity(String FreeCapacity) {
    this.FreeCapacity = FreeCapacity;
    return this;
  }

  public void unsetFreeCapacity() {
    this.FreeCapacity = null;
  }

  /** Returns true if field FreeCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeCapacity() {
    return this.FreeCapacity != null;
  }

  public void setFreeCapacityIsSet(boolean value) {
    if (!value) {
      this.FreeCapacity = null;
    }
  }

  public int getTotalCapacityOnTiersSize() {
    return (this.totalCapacityOnTiers == null) ? 0 : this.totalCapacityOnTiers.size();
  }

  public void putToTotalCapacityOnTiers(String key, String val) {
    if (this.totalCapacityOnTiers == null) {
      this.totalCapacityOnTiers = new HashMap<String,String>();
    }
    this.totalCapacityOnTiers.put(key, val);
  }

  public Map<String,String> getTotalCapacityOnTiers() {
    return this.totalCapacityOnTiers;
  }

  public BlockMasterInfo setTotalCapacityOnTiers(Map<String,String> totalCapacityOnTiers) {
    this.totalCapacityOnTiers = totalCapacityOnTiers;
    return this;
  }

  public void unsetTotalCapacityOnTiers() {
    this.totalCapacityOnTiers = null;
  }

  /** Returns true if field totalCapacityOnTiers is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCapacityOnTiers() {
    return this.totalCapacityOnTiers != null;
  }

  public void setTotalCapacityOnTiersIsSet(boolean value) {
    if (!value) {
      this.totalCapacityOnTiers = null;
    }
  }

  public int getUsedCapacityOnTiersSize() {
    return (this.usedCapacityOnTiers == null) ? 0 : this.usedCapacityOnTiers.size();
  }

  public void putToUsedCapacityOnTiers(String key, String val) {
    if (this.usedCapacityOnTiers == null) {
      this.usedCapacityOnTiers = new HashMap<String,String>();
    }
    this.usedCapacityOnTiers.put(key, val);
  }

  public Map<String,String> getUsedCapacityOnTiers() {
    return this.usedCapacityOnTiers;
  }

  public BlockMasterInfo setUsedCapacityOnTiers(Map<String,String> usedCapacityOnTiers) {
    this.usedCapacityOnTiers = usedCapacityOnTiers;
    return this;
  }

  public void unsetUsedCapacityOnTiers() {
    this.usedCapacityOnTiers = null;
  }

  /** Returns true if field usedCapacityOnTiers is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedCapacityOnTiers() {
    return this.usedCapacityOnTiers != null;
  }

  public void setUsedCapacityOnTiersIsSet(boolean value) {
    if (!value) {
      this.usedCapacityOnTiers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LIVE_WORKER_NUM:
      if (value == null) {
        unsetLiveWorkerNum();
      } else {
        setLiveWorkerNum((Integer)value);
      }
      break;

    case DEAD_WORKER_NUM:
      if (value == null) {
        unsetDeadWorkerNum();
      } else {
        setDeadWorkerNum((Integer)value);
      }
      break;

    case TOTAL_CAPACITY:
      if (value == null) {
        unsetTotalCapacity();
      } else {
        setTotalCapacity((String)value);
      }
      break;

    case USED_CAPACITY:
      if (value == null) {
        unsetUsedCapacity();
      } else {
        setUsedCapacity((String)value);
      }
      break;

    case FREE_CAPACITY:
      if (value == null) {
        unsetFreeCapacity();
      } else {
        setFreeCapacity((String)value);
      }
      break;

    case TOTAL_CAPACITY_ON_TIERS:
      if (value == null) {
        unsetTotalCapacityOnTiers();
      } else {
        setTotalCapacityOnTiers((Map<String,String>)value);
      }
      break;

    case USED_CAPACITY_ON_TIERS:
      if (value == null) {
        unsetUsedCapacityOnTiers();
      } else {
        setUsedCapacityOnTiers((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LIVE_WORKER_NUM:
      return getLiveWorkerNum();

    case DEAD_WORKER_NUM:
      return getDeadWorkerNum();

    case TOTAL_CAPACITY:
      return getTotalCapacity();

    case USED_CAPACITY:
      return getUsedCapacity();

    case FREE_CAPACITY:
      return getFreeCapacity();

    case TOTAL_CAPACITY_ON_TIERS:
      return getTotalCapacityOnTiers();

    case USED_CAPACITY_ON_TIERS:
      return getUsedCapacityOnTiers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LIVE_WORKER_NUM:
      return isSetLiveWorkerNum();
    case DEAD_WORKER_NUM:
      return isSetDeadWorkerNum();
    case TOTAL_CAPACITY:
      return isSetTotalCapacity();
    case USED_CAPACITY:
      return isSetUsedCapacity();
    case FREE_CAPACITY:
      return isSetFreeCapacity();
    case TOTAL_CAPACITY_ON_TIERS:
      return isSetTotalCapacityOnTiers();
    case USED_CAPACITY_ON_TIERS:
      return isSetUsedCapacityOnTiers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockMasterInfo)
      return this.equals((BlockMasterInfo)that);
    return false;
  }

  public boolean equals(BlockMasterInfo that) {
    if (that == null)
      return false;

    boolean this_present_liveWorkerNum = true;
    boolean that_present_liveWorkerNum = true;
    if (this_present_liveWorkerNum || that_present_liveWorkerNum) {
      if (!(this_present_liveWorkerNum && that_present_liveWorkerNum))
        return false;
      if (this.liveWorkerNum != that.liveWorkerNum)
        return false;
    }

    boolean this_present_deadWorkerNum = true;
    boolean that_present_deadWorkerNum = true;
    if (this_present_deadWorkerNum || that_present_deadWorkerNum) {
      if (!(this_present_deadWorkerNum && that_present_deadWorkerNum))
        return false;
      if (this.deadWorkerNum != that.deadWorkerNum)
        return false;
    }

    boolean this_present_TotalCapacity = true && this.isSetTotalCapacity();
    boolean that_present_TotalCapacity = true && that.isSetTotalCapacity();
    if (this_present_TotalCapacity || that_present_TotalCapacity) {
      if (!(this_present_TotalCapacity && that_present_TotalCapacity))
        return false;
      if (!this.TotalCapacity.equals(that.TotalCapacity))
        return false;
    }

    boolean this_present_usedCapacity = true && this.isSetUsedCapacity();
    boolean that_present_usedCapacity = true && that.isSetUsedCapacity();
    if (this_present_usedCapacity || that_present_usedCapacity) {
      if (!(this_present_usedCapacity && that_present_usedCapacity))
        return false;
      if (!this.usedCapacity.equals(that.usedCapacity))
        return false;
    }

    boolean this_present_FreeCapacity = true && this.isSetFreeCapacity();
    boolean that_present_FreeCapacity = true && that.isSetFreeCapacity();
    if (this_present_FreeCapacity || that_present_FreeCapacity) {
      if (!(this_present_FreeCapacity && that_present_FreeCapacity))
        return false;
      if (!this.FreeCapacity.equals(that.FreeCapacity))
        return false;
    }

    boolean this_present_totalCapacityOnTiers = true && this.isSetTotalCapacityOnTiers();
    boolean that_present_totalCapacityOnTiers = true && that.isSetTotalCapacityOnTiers();
    if (this_present_totalCapacityOnTiers || that_present_totalCapacityOnTiers) {
      if (!(this_present_totalCapacityOnTiers && that_present_totalCapacityOnTiers))
        return false;
      if (!this.totalCapacityOnTiers.equals(that.totalCapacityOnTiers))
        return false;
    }

    boolean this_present_usedCapacityOnTiers = true && this.isSetUsedCapacityOnTiers();
    boolean that_present_usedCapacityOnTiers = true && that.isSetUsedCapacityOnTiers();
    if (this_present_usedCapacityOnTiers || that_present_usedCapacityOnTiers) {
      if (!(this_present_usedCapacityOnTiers && that_present_usedCapacityOnTiers))
        return false;
      if (!this.usedCapacityOnTiers.equals(that.usedCapacityOnTiers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_liveWorkerNum = true;
    list.add(present_liveWorkerNum);
    if (present_liveWorkerNum)
      list.add(liveWorkerNum);

    boolean present_deadWorkerNum = true;
    list.add(present_deadWorkerNum);
    if (present_deadWorkerNum)
      list.add(deadWorkerNum);

    boolean present_TotalCapacity = true && (isSetTotalCapacity());
    list.add(present_TotalCapacity);
    if (present_TotalCapacity)
      list.add(TotalCapacity);

    boolean present_usedCapacity = true && (isSetUsedCapacity());
    list.add(present_usedCapacity);
    if (present_usedCapacity)
      list.add(usedCapacity);

    boolean present_FreeCapacity = true && (isSetFreeCapacity());
    list.add(present_FreeCapacity);
    if (present_FreeCapacity)
      list.add(FreeCapacity);

    boolean present_totalCapacityOnTiers = true && (isSetTotalCapacityOnTiers());
    list.add(present_totalCapacityOnTiers);
    if (present_totalCapacityOnTiers)
      list.add(totalCapacityOnTiers);

    boolean present_usedCapacityOnTiers = true && (isSetUsedCapacityOnTiers());
    list.add(present_usedCapacityOnTiers);
    if (present_usedCapacityOnTiers)
      list.add(usedCapacityOnTiers);

    return list.hashCode();
  }

  @Override
  public int compareTo(BlockMasterInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLiveWorkerNum()).compareTo(other.isSetLiveWorkerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveWorkerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveWorkerNum, other.liveWorkerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeadWorkerNum()).compareTo(other.isSetDeadWorkerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeadWorkerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deadWorkerNum, other.deadWorkerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCapacity()).compareTo(other.isSetTotalCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TotalCapacity, other.TotalCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedCapacity()).compareTo(other.isSetUsedCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedCapacity, other.usedCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreeCapacity()).compareTo(other.isSetFreeCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FreeCapacity, other.FreeCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCapacityOnTiers()).compareTo(other.isSetTotalCapacityOnTiers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCapacityOnTiers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCapacityOnTiers, other.totalCapacityOnTiers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedCapacityOnTiers()).compareTo(other.isSetUsedCapacityOnTiers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedCapacityOnTiers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedCapacityOnTiers, other.usedCapacityOnTiers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockMasterInfo(");
    boolean first = true;

    sb.append("liveWorkerNum:");
    sb.append(this.liveWorkerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deadWorkerNum:");
    sb.append(this.deadWorkerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TotalCapacity:");
    if (this.TotalCapacity == null) {
      sb.append("null");
    } else {
      sb.append(this.TotalCapacity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedCapacity:");
    if (this.usedCapacity == null) {
      sb.append("null");
    } else {
      sb.append(this.usedCapacity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FreeCapacity:");
    if (this.FreeCapacity == null) {
      sb.append("null");
    } else {
      sb.append(this.FreeCapacity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCapacityOnTiers:");
    if (this.totalCapacityOnTiers == null) {
      sb.append("null");
    } else {
      sb.append(this.totalCapacityOnTiers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedCapacityOnTiers:");
    if (this.usedCapacityOnTiers == null) {
      sb.append("null");
    } else {
      sb.append(this.usedCapacityOnTiers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlockMasterInfoStandardSchemeFactory implements SchemeFactory {
    public BlockMasterInfoStandardScheme getScheme() {
      return new BlockMasterInfoStandardScheme();
    }
  }

  private static class BlockMasterInfoStandardScheme extends StandardScheme<BlockMasterInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlockMasterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIVE_WORKER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveWorkerNum = iprot.readI32();
              struct.setLiveWorkerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEAD_WORKER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deadWorkerNum = iprot.readI32();
              struct.setDeadWorkerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TotalCapacity = iprot.readString();
              struct.setTotalCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USED_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.usedCapacity = iprot.readString();
              struct.setUsedCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREE_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FreeCapacity = iprot.readString();
              struct.setFreeCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_CAPACITY_ON_TIERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.totalCapacityOnTiers = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.totalCapacityOnTiers.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setTotalCapacityOnTiersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USED_CAPACITY_ON_TIERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.usedCapacityOnTiers = new HashMap<String,String>(2*_map4.size);
                String _key5;
                String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.usedCapacityOnTiers.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setUsedCapacityOnTiersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlockMasterInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LIVE_WORKER_NUM_FIELD_DESC);
      oprot.writeI32(struct.liveWorkerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEAD_WORKER_NUM_FIELD_DESC);
      oprot.writeI32(struct.deadWorkerNum);
      oprot.writeFieldEnd();
      if (struct.TotalCapacity != null) {
        oprot.writeFieldBegin(TOTAL_CAPACITY_FIELD_DESC);
        oprot.writeString(struct.TotalCapacity);
        oprot.writeFieldEnd();
      }
      if (struct.usedCapacity != null) {
        oprot.writeFieldBegin(USED_CAPACITY_FIELD_DESC);
        oprot.writeString(struct.usedCapacity);
        oprot.writeFieldEnd();
      }
      if (struct.FreeCapacity != null) {
        oprot.writeFieldBegin(FREE_CAPACITY_FIELD_DESC);
        oprot.writeString(struct.FreeCapacity);
        oprot.writeFieldEnd();
      }
      if (struct.totalCapacityOnTiers != null) {
        oprot.writeFieldBegin(TOTAL_CAPACITY_ON_TIERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.totalCapacityOnTiers.size()));
          for (Map.Entry<String, String> _iter8 : struct.totalCapacityOnTiers.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            oprot.writeString(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.usedCapacityOnTiers != null) {
        oprot.writeFieldBegin(USED_CAPACITY_ON_TIERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.usedCapacityOnTiers.size()));
          for (Map.Entry<String, String> _iter9 : struct.usedCapacityOnTiers.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeString(_iter9.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlockMasterInfoTupleSchemeFactory implements SchemeFactory {
    public BlockMasterInfoTupleScheme getScheme() {
      return new BlockMasterInfoTupleScheme();
    }
  }

  private static class BlockMasterInfoTupleScheme extends TupleScheme<BlockMasterInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlockMasterInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLiveWorkerNum()) {
        optionals.set(0);
      }
      if (struct.isSetDeadWorkerNum()) {
        optionals.set(1);
      }
      if (struct.isSetTotalCapacity()) {
        optionals.set(2);
      }
      if (struct.isSetUsedCapacity()) {
        optionals.set(3);
      }
      if (struct.isSetFreeCapacity()) {
        optionals.set(4);
      }
      if (struct.isSetTotalCapacityOnTiers()) {
        optionals.set(5);
      }
      if (struct.isSetUsedCapacityOnTiers()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetLiveWorkerNum()) {
        oprot.writeI32(struct.liveWorkerNum);
      }
      if (struct.isSetDeadWorkerNum()) {
        oprot.writeI32(struct.deadWorkerNum);
      }
      if (struct.isSetTotalCapacity()) {
        oprot.writeString(struct.TotalCapacity);
      }
      if (struct.isSetUsedCapacity()) {
        oprot.writeString(struct.usedCapacity);
      }
      if (struct.isSetFreeCapacity()) {
        oprot.writeString(struct.FreeCapacity);
      }
      if (struct.isSetTotalCapacityOnTiers()) {
        {
          oprot.writeI32(struct.totalCapacityOnTiers.size());
          for (Map.Entry<String, String> _iter10 : struct.totalCapacityOnTiers.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
      if (struct.isSetUsedCapacityOnTiers()) {
        {
          oprot.writeI32(struct.usedCapacityOnTiers.size());
          for (Map.Entry<String, String> _iter11 : struct.usedCapacityOnTiers.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlockMasterInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.liveWorkerNum = iprot.readI32();
        struct.setLiveWorkerNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deadWorkerNum = iprot.readI32();
        struct.setDeadWorkerNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.TotalCapacity = iprot.readString();
        struct.setTotalCapacityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.usedCapacity = iprot.readString();
        struct.setUsedCapacityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.FreeCapacity = iprot.readString();
        struct.setFreeCapacityIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.totalCapacityOnTiers = new HashMap<String,String>(2*_map12.size);
          String _key13;
          String _val14;
          for (int _i15 = 0; _i15 < _map12.size; ++_i15)
          {
            _key13 = iprot.readString();
            _val14 = iprot.readString();
            struct.totalCapacityOnTiers.put(_key13, _val14);
          }
        }
        struct.setTotalCapacityOnTiersIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.usedCapacityOnTiers = new HashMap<String,String>(2*_map16.size);
          String _key17;
          String _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = iprot.readString();
            struct.usedCapacityOnTiers.put(_key17, _val18);
          }
        }
        struct.setUsedCapacityOnTiersIsSet(true);
      }
    }
  }

}

