/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class GetWorkerInfoListTResponse implements org.apache.thrift.TBase<GetWorkerInfoListTResponse, GetWorkerInfoListTResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetWorkerInfoListTResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetWorkerInfoListTResponse");

  private static final org.apache.thrift.protocol.TField WORKER_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("workerInfoList", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetWorkerInfoListTResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetWorkerInfoListTResponseTupleSchemeFactory());
  }

  private List<WorkerInfo> workerInfoList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WORKER_INFO_LIST((short)1, "workerInfoList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WORKER_INFO_LIST
          return WORKER_INFO_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WORKER_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("workerInfoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetWorkerInfoListTResponse.class, metaDataMap);
  }

  public GetWorkerInfoListTResponse() {
  }

  public GetWorkerInfoListTResponse(
    List<WorkerInfo> workerInfoList)
  {
    this();
    this.workerInfoList = workerInfoList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetWorkerInfoListTResponse(GetWorkerInfoListTResponse other) {
    if (other.isSetWorkerInfoList()) {
      List<WorkerInfo> __this__workerInfoList = new ArrayList<WorkerInfo>(other.workerInfoList.size());
      for (WorkerInfo other_element : other.workerInfoList) {
        __this__workerInfoList.add(new WorkerInfo(other_element));
      }
      this.workerInfoList = __this__workerInfoList;
    }
  }

  public GetWorkerInfoListTResponse deepCopy() {
    return new GetWorkerInfoListTResponse(this);
  }

  @Override
  public void clear() {
    this.workerInfoList = null;
  }

  public int getWorkerInfoListSize() {
    return (this.workerInfoList == null) ? 0 : this.workerInfoList.size();
  }

  public java.util.Iterator<WorkerInfo> getWorkerInfoListIterator() {
    return (this.workerInfoList == null) ? null : this.workerInfoList.iterator();
  }

  public void addToWorkerInfoList(WorkerInfo elem) {
    if (this.workerInfoList == null) {
      this.workerInfoList = new ArrayList<WorkerInfo>();
    }
    this.workerInfoList.add(elem);
  }

  public List<WorkerInfo> getWorkerInfoList() {
    return this.workerInfoList;
  }

  public GetWorkerInfoListTResponse setWorkerInfoList(List<WorkerInfo> workerInfoList) {
    this.workerInfoList = workerInfoList;
    return this;
  }

  public void unsetWorkerInfoList() {
    this.workerInfoList = null;
  }

  /** Returns true if field workerInfoList is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerInfoList() {
    return this.workerInfoList != null;
  }

  public void setWorkerInfoListIsSet(boolean value) {
    if (!value) {
      this.workerInfoList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WORKER_INFO_LIST:
      if (value == null) {
        unsetWorkerInfoList();
      } else {
        setWorkerInfoList((List<WorkerInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WORKER_INFO_LIST:
      return getWorkerInfoList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WORKER_INFO_LIST:
      return isSetWorkerInfoList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetWorkerInfoListTResponse)
      return this.equals((GetWorkerInfoListTResponse)that);
    return false;
  }

  public boolean equals(GetWorkerInfoListTResponse that) {
    if (that == null)
      return false;

    boolean this_present_workerInfoList = true && this.isSetWorkerInfoList();
    boolean that_present_workerInfoList = true && that.isSetWorkerInfoList();
    if (this_present_workerInfoList || that_present_workerInfoList) {
      if (!(this_present_workerInfoList && that_present_workerInfoList))
        return false;
      if (!this.workerInfoList.equals(that.workerInfoList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_workerInfoList = true && (isSetWorkerInfoList());
    list.add(present_workerInfoList);
    if (present_workerInfoList)
      list.add(workerInfoList);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetWorkerInfoListTResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWorkerInfoList()).compareTo(other.isSetWorkerInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerInfoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerInfoList, other.workerInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetWorkerInfoListTResponse(");
    boolean first = true;

    sb.append("workerInfoList:");
    if (this.workerInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.workerInfoList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetWorkerInfoListTResponseStandardSchemeFactory implements SchemeFactory {
    public GetWorkerInfoListTResponseStandardScheme getScheme() {
      return new GetWorkerInfoListTResponseStandardScheme();
    }
  }

  private static class GetWorkerInfoListTResponseStandardScheme extends StandardScheme<GetWorkerInfoListTResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetWorkerInfoListTResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WORKER_INFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.workerInfoList = new ArrayList<WorkerInfo>(_list64.size);
                WorkerInfo _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new WorkerInfo();
                  _elem65.read(iprot);
                  struct.workerInfoList.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setWorkerInfoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetWorkerInfoListTResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.workerInfoList != null) {
        oprot.writeFieldBegin(WORKER_INFO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.workerInfoList.size()));
          for (WorkerInfo _iter67 : struct.workerInfoList)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetWorkerInfoListTResponseTupleSchemeFactory implements SchemeFactory {
    public GetWorkerInfoListTResponseTupleScheme getScheme() {
      return new GetWorkerInfoListTResponseTupleScheme();
    }
  }

  private static class GetWorkerInfoListTResponseTupleScheme extends TupleScheme<GetWorkerInfoListTResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetWorkerInfoListTResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWorkerInfoList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetWorkerInfoList()) {
        {
          oprot.writeI32(struct.workerInfoList.size());
          for (WorkerInfo _iter68 : struct.workerInfoList)
          {
            _iter68.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetWorkerInfoListTResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.workerInfoList = new ArrayList<WorkerInfo>(_list69.size);
          WorkerInfo _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new WorkerInfo();
            _elem70.read(iprot);
            struct.workerInfoList.add(_elem70);
          }
        }
        struct.setWorkerInfoListIsSet(true);
      }
    }
  }

}

