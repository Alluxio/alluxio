syntax = "proto2";

option java_multiple_files = true;
option java_package = "alluxio.grpc";
option java_outer_classname = "BlockWorkerProto";

package alluxio.grpc;

message AccessBlockPOptions {}
message AccessBlockPResponse {}
message AccessBlockPRequest {
    /** the id of the block being accessed */
    optional int64 blockId = 1;
    /** the method options */
    optional AccessBlockPOptions options = 2;
}

message CacheBlockPOptions {}
message CacheBlockPResponse {}
message CacheBlockPRequest {
  /** the id of the current session */
  optional int64 sessionId = 1;
  /** the id of the block being accessed */
  optional int64 blockId = 2;
  /** the method options */
  optional CacheBlockPOptions options = 3;
}

message CancelBlockPOptions {}
message CancelBlockPResponse {}
message CancelBlockPRequest {
  /** the id of the current session */
  optional int64 sessionId = 1;
  /** the id of the block being accessed */
  optional int64 blockId = 2;
  /** the method options */
  optional CancelBlockPOptions options = 3;
}

message LockBlockPOptions {
  optional string ufsPath = 1;
  optional int64 offset = 2;
  optional int64 blockSize = 3;
  optional int32 maxUfsReadConcurrency = 4;
  optional int64 mountId = 5;
}
message LockBlockPResponse {
  optional int64 lockId = 1;
  optional string blockPath = 2;
  optional LockBlockStatus lockBlockStatus = 3;
}
message LockBlockPRequest {
  /** the id of the block being accessed */
  optional int64 blockId = 1;
  /** the id of the current session */
  optional int64 sessionId = 2;
  /** the lock method options */
  optional LockBlockPOptions options = 3;
}

enum LockBlockStatus {
   /** The Alluxio block is acquired. */
   ALLUXIO_BLOCK_LOCKED = 1;
   /** The block is not in Alluxio but a UFS access token is acquired for this block. */
   UFS_TOKEN_ACQUIRED = 2;
   /** The block is not in Alluxio and a UFS access token is not acquired. */
   UFS_TOKEN_NOT_ACQUIRED = 3;
}

message PromoteBlockPOptions {}
message PromoteBlockPResponse {
  optional bool promoted = 1;
}
message PromoteBlockPRequest {
  /** the id of the block being accessed */
  optional int64 blockId = 1;
  /** the method options */
  optional PromoteBlockPOptions options = 2;
}

message RemoveBlockPOptions {}
message RemoveBlockPResponse {}
message RemoveBlockPRequest {
  /** the id of the block being removed */
  optional int64 blockId = 1;
  /** the method options */
  optional RemoveBlockPOptions options = 2;
}

message RequestBlockLocationPOptions {}
message RequestBlockLocationPResponse {
  optional string location = 1;
}
message RequestBlockLocationPRequest {
  /** the id of the current session */
  optional int64 sessionId = 1;
  /** the id of the block being accessed */
  optional int64 blockId = 2;
  /** initial number of bytes requested */
  optional int64 initialBytes = 3;
  /** the target tier to write to */
  optional int32 writeTier = 4;
  /** the method options */
  optional RequestBlockLocationPOptions options = 5;
}

message RequestSpacePOptions {}
message RequestSpacePResponse {
  optional bool success = 1;
}
message RequestSpacePRequest {
  /** the id of the current session */
  optional int64 sessionId = 1;
  /** the id of the block being accessed */
  optional int64 blockId = 2;
  /** the number of bytes requested */
  optional int64 requestBytes = 3;
  /** the method options */
  optional RequestSpacePOptions options = 4;
}

message SessionBlockHeartbeatPOptions {}
message SessionBlockHeartbeatPResponse {}
message SessionBlockHeartbeatPRequest {
  /** the id of the current session */
  optional int64 sessionId = 1;
  /** deprecated since 1.3.0 and will be removed in 2.0 */
  repeated int64 metrics = 2;
  /** the method options */
  optional SessionBlockHeartbeatPOptions options = 3;
}

message UnlockBlockPOptions {}
message UnlockBlockPResponse {
  optional bool success = 1;
}
message UnlockBlockPRequest {
  /** the id of the block being accessed */
  optional int64 blockId = 1;
  /** the id of the current session */
  optional int64 sessionId = 2;
  /** the method options */
  optional UnlockBlockPOptions options = 3;
}

service BlockWorkerClientService {

  /**
   * Accesses a block given the block id.
   */
  rpc accessBlock(AccessBlockPRequest) returns (AccessBlockPResponse);

  /**
   * Used to cache a block into Alluxio space; worker will move the temporary block file from session
   * folder to data folder; and update the space usage information related. then update the block
   * information to master.
   */
  rpc cacheBlock(CacheBlockPRequest) returns (CacheBlockPResponse);

  /**
   * Used to cancel a block which is being written. worker will delete the temporary block file and
   * the location and space information related; then reclaim space allocated to the block.
   */
  rpc CancelBlock(CancelBlockPRequest) returns(CancelBlockPResponse);

  /**
   * Locks the file in Alluxio's space while the session is reading it. If lock succeeds; the path of
   * the block's file along with the internal lock id of locked block will be returned. If the block's file
   * is not found; FileDoesNotExistException will be thrown.
   */
  rpc LockBlock(LockBlockPRequest) returns (LockBlockPResponse);

  /**
   * Used to promote block on under storage layer to top storage layer when there are more than one
   * storage layers in Alluxio's space. return true if the block is successfully promoted; false
   * otherwise.
   */
  rpc PromoteBlock(PromoteBlockPRequest) returns (PromoteBlockPResponse);

  /**
   * Used to remove a block from an Alluxio worker.
   **/
  rpc RemoveBlock(RemoveBlockPRequest) returns (RemoveBlockPResponse);

  /**
   * Used to allocate location and space for a new coming block; worker will choose the appropriate
   * storage directory which fits the initial block size by some allocation strategy; and the
   * temporary file path of the block file will be returned. if there is no enough space on Alluxio
   * storage OutOfSpaceException will be thrown; if the file is already being written by the session;
   * FileAlreadyExistsException will be thrown.
   */
  rpc RequestBlockLocation(RequestBlockLocationPRequest) returns (RequestBlockLocationPResponse);

  /**
   * Used to request space for some block file. return true if the worker successfully allocates
   * space for the block on blockâ€™s location; false if there is no enough space; if there is no
   * information of the block on worker; FileDoesNotExistException will be thrown.
   */
  rpc RequestSpace(RequestSpacePRequest) returns (RequestSpacePResponse);

  /**
   * Local session send heartbeat to local worker to keep its temporary folder.
   */
  rpc SessionBlockHeartbeat(SessionBlockHeartbeatPRequest) returns (SessionBlockHeartbeatPResponse);

  /**
   * Used to unlock a block after the block is accessed; if the block is to be removed; delete the
   * block file. return true if successfully unlock the block; return false if the block is not
   * found or failed to delete the block.
   */
  rpc UnlockBlock(UnlockBlockPRequest) returns (UnlockBlockPResponse);
}
