syntax = "proto2";

option java_multiple_files = true;
option java_package = "alluxio.grpc";
option java_outer_classname = "BlockMasterProto";

package alluxio.grpc.block;

import "grpc/common.proto";

enum BlockMasterInfoField {
  CAPACITY_BYTES = 1;
  CAPACITY_BYTES_ON_TIERS = 2;
  FREE_BYTES = 3;
  LIVE_WORKER_NUM = 4;
  LOST_WORKER_NUM = 5;
  USED_BYTES = 6;
  USED_BYTES_ON_TIERS = 7;
}

message BlockMasterInfo {
  optional int64 capacityBytes = 1;
  map<string, int64> capacityBytesOnTiers = 2;
  optional int64 freeBytes = 3;
  optional int32 liveWorkerNum = 4;
  optional int32 lostWorkerNum = 5;
  optional int64 usedBytes = 6;
  map<string, int64> usedBytesOnTiers = 7;
}

message GetBlockInfoPOptions {}
message GetBlockInfoPRequest {
  /** the id of the block */
  optional int64 blockId = 1;

  optional GetBlockInfoPOptions options = 2;
}
message GetBlockInfoPResponse {
  optional grpc.BlockInfo blockInfo = 1;
}

message GetCapacityBytesPOptions {}
message GetCapacityBytesPResponse {
  optional int64 bytes = 1;
}

message GetBlockMasterInfoPOptions {
 repeated BlockMasterInfoField filters = 1;
}
message GetBlockMasterInfoPResponse {
 optional BlockMasterInfo blockMasterInfo = 1;
}

message GetUsedBytesPOptions {}
message GetUsedBytesPResponse {
  optional int64 bytes = 1;
}

message WorkerInfo {
  optional int64 id = 1;
  optional grpc.WorkerNetAddress address = 2;
  optional int32 lastContactSec = 3;
  optional string state = 4;
  optional int64 capacityBytes = 5;
  optional int64 usedBytes = 6;
  optional int64 startTimeMs = 7;
  map<string, int64> capacityBytesOnTiers = 8;
  map<string, int64> usedBytesOnTiers = 9;
}

enum WorkerRange {
  ALL = 1;
  LIVE = 2;
  LOST = 3;
  SPECIFIED = 4;
}

enum WorkerInfoField {
  ADDRESS = 1;
  WORKER_CAPACITY_BYTES = 2;
  WORKER_CAPACITY_BYTES_ON_TIERS = 3;
  ID = 4;
  LAST_CONTACT_SEC = 5;
  START_TIME_MS = 6;
  STATE = 7;
  WORKER_USED_BYTES = 8;
  WORKER_USED_BYTES_ON_TIERS = 9;
}

message GetWorkerReportPOptions {
  /** addresses are only valid when workerRange is SPECIFIED */
  repeated string addresses = 1;
  repeated WorkerInfoField fieldRanges = 2;
  optional WorkerRange workerRange = 3;
}
message GetWorkerInfoListPOptions {}
message GetWorkerInfoListPResponse {
  repeated WorkerInfo workerInfos = 1;
}

/**
 * This interface contains block master service endpoints for Alluxio clients.
 */
service BlockMasterClientService {

  /**
   * Returns the block information for the given block id.
   */
  rpc GetBlockInfo(GetBlockInfoPRequest) returns (GetBlockInfoPResponse);

  /**
    * Returns block master information.
    */
  rpc GetBlockMasterInfo(GetBlockMasterInfoPOptions) returns (GetBlockMasterInfoPResponse);

  /**
   * Returns the capacity (in bytes).
   */
  rpc GetCapacityBytes(GetCapacityBytesPOptions) returns(GetCapacityBytesPResponse);

  /**
   * Returns the used storage (in bytes).
   */
  rpc GetUsedBytes(GetUsedBytesPOptions) returns (GetUsedBytesPResponse);

  /**
   * Returns a list of workers information.
   */
  rpc GetWorkerInfoList(GetWorkerInfoListPOptions) returns (GetWorkerInfoListPResponse);

  /**
   * Returns a list of workers information for report CLI.
   */
  rpc GetWorkerReport(GetWorkerReportPOptions) returns (GetWorkerInfoListPResponse);
}

message TierList {
  repeated int64 tiers = 1;
}

message BlockHeartbeatPOptions {
  repeated grpc.Metric metrics = 1;
  map<string, int64> capacityBytesOnTiers = 2;
}
message BlockHeartbeatPRequest {
  /** the id of the worker */
  optional int64 workerId = 1;
  /** the map of space used in bytes on all tiers */
  map<string, int64> usedBytesOnTiers = 2;
  /** the list of removed block ids */
  repeated int64 removedBlockIds = 3;
  /** the map of added blocks on all tiers */
  map<string, TierList> addedBlocksOnTiers = 4;
  optional BlockHeartbeatPOptions options = 5;
}
message BlockHeartbeatPResponse {
  optional grpc.Command command = 1;
}

message CommitBlockPResponse {}
message CommitBlockPRequest {
  /** the id of the worker */
  optional int64 workerId = 1;
  /** the space used in bytes on the target tier */
  optional int64 usedBytesOnTier = 2;
  /** the alias of the target tier */
  optional string tierAlias = 3;
  /** the id of the block being committed */
  optional int64 blockId = 4;
  /** the length of the block being committed */
  optional int64 length = 5;
  optional CommitBlockPOptions options = 6;
}

message CommitBlockPOptions {}
message CommitBlockInUfsPRequest {
  /** the id of the worker */
  optional int64 blockId = 1;
  /** the space used in bytes on the target tier */
  optional int64 length = 2;
  optional CommitBlockInUfsPOptions options = 3;
}

message CommitBlockInUfsPOptions {}
message CommitBlockInUfsPResponse {}

message GetWorkerIdPOptions {}
message GetWorkerIdPRequest {
  /** the worker network address */
  optional grpc.WorkerNetAddress workerNetAddress = 1;
  optional GetWorkerIdPOptions options = 2;
}
message GetWorkerIdPResponse {
  optional int64 workerId = 1;
}

message RegisterWorkerPOptions {
  repeated grpc.ConfigProperty configs = 1;
}
message RegisterWorkerPRequest {
  /** the id of the worker */
  optional int64 workerId = 1;
  /** the list of storage tiers */
  repeated string storageTiers = 2;
  /** the map of total bytes on each tier */
  map<string, int64> totalBytesOnTiers = 3;
  /** the map of used bytes on each tier */
  map<string, int64> usedBytesOnTiers = 4;
  /** the map of list of blocks on each tier */
  map<string, TierList> currentBlocksOnTiers = 5;
  optional RegisterWorkerPOptions options = 6;
}
message RegisterWorkerPResponse {}

/**
 * This interface contains block master service endpoints for Alluxio workers.
 */
service BlockMasterWorkerService {

  /**
   * Periodic block worker heartbeat returns an optional command for the block worker to execute.
   */
  rpc BlockHeartbeat(BlockHeartbeatPRequest) returns (BlockHeartbeatPResponse);

  /**
   * Marks the given block as committed.
   */
  rpc CommitBlock(CommitBlockPRequest) returns(CommitBlockPResponse);

  /**
   * Marks the given block as committed which resides in UFS.
   */
  rpc CommitBlockInUfs(CommitBlockInUfsPRequest) returns(CommitBlockInUfsPResponse);

  /**
   * Returns a worker id for the given network address.
   */
  rpc GetWorkerId(GetWorkerIdPRequest) returns (GetWorkerIdPResponse);

  /**
   * Registers a worker.
   */
  rpc RegisterWorker(RegisterWorkerPRequest) returns (RegisterWorkerPResponse);
}
