// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/file_system_master.proto

package alluxio.grpc;

/**
 * Protobuf enum {@code alluxio.grpc.file.WritePType}
 */
public enum WritePType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>MUST_CACHE = 1;</code>
   */
  MUST_CACHE(1),
  /**
   * <code>TRY_CACHE = 2;</code>
   */
  TRY_CACHE(2),
  /**
   * <code>CACHE_THROUGH = 3;</code>
   */
  CACHE_THROUGH(3),
  /**
   * <code>THROUGH = 4;</code>
   */
  THROUGH(4),
  /**
   * <code>ASYNC_THROUGH = 5;</code>
   */
  ASYNC_THROUGH(5),
  /**
   * <code>NONE = 6;</code>
   */
  NONE(6),
  ;

  /**
   * <code>MUST_CACHE = 1;</code>
   */
  public static final int MUST_CACHE_VALUE = 1;
  /**
   * <code>TRY_CACHE = 2;</code>
   */
  public static final int TRY_CACHE_VALUE = 2;
  /**
   * <code>CACHE_THROUGH = 3;</code>
   */
  public static final int CACHE_THROUGH_VALUE = 3;
  /**
   * <code>THROUGH = 4;</code>
   */
  public static final int THROUGH_VALUE = 4;
  /**
   * <code>ASYNC_THROUGH = 5;</code>
   */
  public static final int ASYNC_THROUGH_VALUE = 5;
  /**
   * <code>NONE = 6;</code>
   */
  public static final int NONE_VALUE = 6;


  public final int getNumber() {
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static WritePType valueOf(int value) {
    return forNumber(value);
  }

  public static WritePType forNumber(int value) {
    switch (value) {
      case 1: return MUST_CACHE;
      case 2: return TRY_CACHE;
      case 3: return CACHE_THROUGH;
      case 4: return THROUGH;
      case 5: return ASYNC_THROUGH;
      case 6: return NONE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<WritePType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      WritePType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<WritePType>() {
          public WritePType findValueByNumber(int number) {
            return WritePType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return alluxio.grpc.FileSystemMasterProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final WritePType[] VALUES = values();

  public static WritePType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private WritePType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:alluxio.grpc.file.WritePType)
}

