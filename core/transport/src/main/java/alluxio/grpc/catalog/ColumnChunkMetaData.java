// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/catalog/catalog_master.proto

package alluxio.grpc.catalog;

/**
 * Protobuf type {@code alluxio.grpc.catalog.ColumnChunkMetaData}
 */
public  final class ColumnChunkMetaData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:alluxio.grpc.catalog.ColumnChunkMetaData)
    ColumnChunkMetaDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ColumnChunkMetaData.newBuilder() to construct.
  private ColumnChunkMetaData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ColumnChunkMetaData() {
    type_ = 0;
    codec_ = 0;
    encodings_ = java.util.Collections.emptyList();
    firstDataPage_ = 0L;
    pageOffset_ = 0L;
    valueCount_ = 0L;
    totalSize_ = 0L;
    totalUncompressedSize_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ColumnChunkMetaData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            alluxio.grpc.catalog.ColumnPath.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              subBuilder = path_.toBuilder();
            }
            path_ = input.readMessage(alluxio.grpc.catalog.ColumnPath.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(path_);
              path_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            alluxio.grpc.catalog.PrimitiveTypeName value = alluxio.grpc.catalog.PrimitiveTypeName.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(2, rawValue);
            } else {
              bitField0_ |= 0x00000002;
              type_ = rawValue;
            }
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
            alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName value = alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(3, rawValue);
            } else {
              bitField0_ |= 0x00000004;
              codec_ = rawValue;
            }
            break;
          }
          case 32: {
            int rawValue = input.readEnum();
            alluxio.grpc.catalog.ColumnChunkMetaData.Encoding value = alluxio.grpc.catalog.ColumnChunkMetaData.Encoding.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(4, rawValue);
            } else {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                encodings_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              encodings_.add(rawValue);
            }
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              alluxio.grpc.catalog.ColumnChunkMetaData.Encoding value = alluxio.grpc.catalog.ColumnChunkMetaData.Encoding.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  encodings_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                encodings_.add(rawValue);
              }
            }
            input.popLimit(oldLimit);
            break;
          }
          case 40: {
            bitField0_ |= 0x00000008;
            firstDataPage_ = input.readInt64();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000010;
            pageOffset_ = input.readInt64();
            break;
          }
          case 56: {
            bitField0_ |= 0x00000020;
            valueCount_ = input.readInt64();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000040;
            totalSize_ = input.readInt64();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000080;
            totalUncompressedSize_ = input.readInt64();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        encodings_ = java.util.Collections.unmodifiableList(encodings_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return alluxio.grpc.catalog.CatalogMasterProto.internal_static_alluxio_grpc_catalog_ColumnChunkMetaData_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return alluxio.grpc.catalog.CatalogMasterProto.internal_static_alluxio_grpc_catalog_ColumnChunkMetaData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            alluxio.grpc.catalog.ColumnChunkMetaData.class, alluxio.grpc.catalog.ColumnChunkMetaData.Builder.class);
  }

  /**
   * Protobuf enum {@code alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName}
   */
  public enum CompressionCodecName
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNCOMPRESSED = 0;</code>
     */
    UNCOMPRESSED(0),
    /**
     * <code>SNAPPY = 1;</code>
     */
    SNAPPY(1),
    /**
     * <code>GZIP = 2;</code>
     */
    GZIP(2),
    /**
     * <code>LZO = 3;</code>
     */
    LZO(3),
    /**
     * <code>BROTLI = 4;</code>
     */
    BROTLI(4),
    /**
     * <code>LZ4 = 5;</code>
     */
    LZ4(5),
    /**
     * <code>ZSTD = 6;</code>
     */
    ZSTD(6),
    ;

    /**
     * <code>UNCOMPRESSED = 0;</code>
     */
    public static final int UNCOMPRESSED_VALUE = 0;
    /**
     * <code>SNAPPY = 1;</code>
     */
    public static final int SNAPPY_VALUE = 1;
    /**
     * <code>GZIP = 2;</code>
     */
    public static final int GZIP_VALUE = 2;
    /**
     * <code>LZO = 3;</code>
     */
    public static final int LZO_VALUE = 3;
    /**
     * <code>BROTLI = 4;</code>
     */
    public static final int BROTLI_VALUE = 4;
    /**
     * <code>LZ4 = 5;</code>
     */
    public static final int LZ4_VALUE = 5;
    /**
     * <code>ZSTD = 6;</code>
     */
    public static final int ZSTD_VALUE = 6;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CompressionCodecName valueOf(int value) {
      return forNumber(value);
    }

    public static CompressionCodecName forNumber(int value) {
      switch (value) {
        case 0: return UNCOMPRESSED;
        case 1: return SNAPPY;
        case 2: return GZIP;
        case 3: return LZO;
        case 4: return BROTLI;
        case 5: return LZ4;
        case 6: return ZSTD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompressionCodecName>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CompressionCodecName> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompressionCodecName>() {
            public CompressionCodecName findValueByNumber(int number) {
              return CompressionCodecName.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return alluxio.grpc.catalog.ColumnChunkMetaData.getDescriptor().getEnumTypes().get(0);
    }

    private static final CompressionCodecName[] VALUES = values();

    public static CompressionCodecName valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CompressionCodecName(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName)
  }

  /**
   * Protobuf enum {@code alluxio.grpc.catalog.ColumnChunkMetaData.Encoding}
   */
  public enum Encoding
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PLAIN = 0;</code>
     */
    PLAIN(0),
    /**
     * <code>RLE = 1;</code>
     */
    RLE(1),
    /**
     * <code>BIT_PACKED = 2;</code>
     */
    BIT_PACKED(2),
    /**
     * <code>PLAIN_DICTIONARY = 3;</code>
     */
    PLAIN_DICTIONARY(3),
    /**
     * <code>DELTA_BINARY_PACKED = 4;</code>
     */
    DELTA_BINARY_PACKED(4),
    /**
     * <code>DELTA_LENGTH_BYTE_ARRAY = 5;</code>
     */
    DELTA_LENGTH_BYTE_ARRAY(5),
    /**
     * <code>DELTA_BYTE_ARRAY = 6;</code>
     */
    DELTA_BYTE_ARRAY(6),
    /**
     * <code>RLE_DICTIONARY = 7;</code>
     */
    RLE_DICTIONARY(7),
    ;

    /**
     * <code>PLAIN = 0;</code>
     */
    public static final int PLAIN_VALUE = 0;
    /**
     * <code>RLE = 1;</code>
     */
    public static final int RLE_VALUE = 1;
    /**
     * <code>BIT_PACKED = 2;</code>
     */
    public static final int BIT_PACKED_VALUE = 2;
    /**
     * <code>PLAIN_DICTIONARY = 3;</code>
     */
    public static final int PLAIN_DICTIONARY_VALUE = 3;
    /**
     * <code>DELTA_BINARY_PACKED = 4;</code>
     */
    public static final int DELTA_BINARY_PACKED_VALUE = 4;
    /**
     * <code>DELTA_LENGTH_BYTE_ARRAY = 5;</code>
     */
    public static final int DELTA_LENGTH_BYTE_ARRAY_VALUE = 5;
    /**
     * <code>DELTA_BYTE_ARRAY = 6;</code>
     */
    public static final int DELTA_BYTE_ARRAY_VALUE = 6;
    /**
     * <code>RLE_DICTIONARY = 7;</code>
     */
    public static final int RLE_DICTIONARY_VALUE = 7;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Encoding valueOf(int value) {
      return forNumber(value);
    }

    public static Encoding forNumber(int value) {
      switch (value) {
        case 0: return PLAIN;
        case 1: return RLE;
        case 2: return BIT_PACKED;
        case 3: return PLAIN_DICTIONARY;
        case 4: return DELTA_BINARY_PACKED;
        case 5: return DELTA_LENGTH_BYTE_ARRAY;
        case 6: return DELTA_BYTE_ARRAY;
        case 7: return RLE_DICTIONARY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Encoding>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Encoding> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Encoding>() {
            public Encoding findValueByNumber(int number) {
              return Encoding.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return alluxio.grpc.catalog.ColumnChunkMetaData.getDescriptor().getEnumTypes().get(1);
    }

    private static final Encoding[] VALUES = values();

    public static Encoding valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Encoding(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:alluxio.grpc.catalog.ColumnChunkMetaData.Encoding)
  }

  private int bitField0_;
  public static final int PATH_FIELD_NUMBER = 1;
  private alluxio.grpc.catalog.ColumnPath path_;
  /**
   * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
   */
  public boolean hasPath() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
   */
  public alluxio.grpc.catalog.ColumnPath getPath() {
    return path_ == null ? alluxio.grpc.catalog.ColumnPath.getDefaultInstance() : path_;
  }
  /**
   * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
   */
  public alluxio.grpc.catalog.ColumnPathOrBuilder getPathOrBuilder() {
    return path_ == null ? alluxio.grpc.catalog.ColumnPath.getDefaultInstance() : path_;
  }

  public static final int TYPE_FIELD_NUMBER = 2;
  private int type_;
  /**
   * <code>optional .alluxio.grpc.catalog.PrimitiveTypeName type = 2;</code>
   */
  public boolean hasType() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional .alluxio.grpc.catalog.PrimitiveTypeName type = 2;</code>
   */
  public alluxio.grpc.catalog.PrimitiveTypeName getType() {
    alluxio.grpc.catalog.PrimitiveTypeName result = alluxio.grpc.catalog.PrimitiveTypeName.valueOf(type_);
    return result == null ? alluxio.grpc.catalog.PrimitiveTypeName.PARQUETTYPE_INT64 : result;
  }

  public static final int CODEC_FIELD_NUMBER = 3;
  private int codec_;
  /**
   * <code>optional .alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName codec = 3;</code>
   */
  public boolean hasCodec() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional .alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName codec = 3;</code>
   */
  public alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName getCodec() {
    alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName result = alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName.valueOf(codec_);
    return result == null ? alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName.UNCOMPRESSED : result;
  }

  public static final int ENCODINGS_FIELD_NUMBER = 4;
  private java.util.List<java.lang.Integer> encodings_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, alluxio.grpc.catalog.ColumnChunkMetaData.Encoding> encodings_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, alluxio.grpc.catalog.ColumnChunkMetaData.Encoding>() {
            public alluxio.grpc.catalog.ColumnChunkMetaData.Encoding convert(java.lang.Integer from) {
              alluxio.grpc.catalog.ColumnChunkMetaData.Encoding result = alluxio.grpc.catalog.ColumnChunkMetaData.Encoding.valueOf(from);
              return result == null ? alluxio.grpc.catalog.ColumnChunkMetaData.Encoding.PLAIN : result;
            }
          };
  /**
   * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
   */
  public java.util.List<alluxio.grpc.catalog.ColumnChunkMetaData.Encoding> getEncodingsList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, alluxio.grpc.catalog.ColumnChunkMetaData.Encoding>(encodings_, encodings_converter_);
  }
  /**
   * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
   */
  public int getEncodingsCount() {
    return encodings_.size();
  }
  /**
   * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
   */
  public alluxio.grpc.catalog.ColumnChunkMetaData.Encoding getEncodings(int index) {
    return encodings_converter_.convert(encodings_.get(index));
  }

  public static final int FIRST_DATA_PAGE_FIELD_NUMBER = 5;
  private long firstDataPage_;
  /**
   * <code>optional int64 first_data_page = 5;</code>
   */
  public boolean hasFirstDataPage() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional int64 first_data_page = 5;</code>
   */
  public long getFirstDataPage() {
    return firstDataPage_;
  }

  public static final int PAGE_OFFSET_FIELD_NUMBER = 6;
  private long pageOffset_;
  /**
   * <code>optional int64 page_offset = 6;</code>
   */
  public boolean hasPageOffset() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional int64 page_offset = 6;</code>
   */
  public long getPageOffset() {
    return pageOffset_;
  }

  public static final int VALUE_COUNT_FIELD_NUMBER = 7;
  private long valueCount_;
  /**
   * <code>optional int64 value_count = 7;</code>
   */
  public boolean hasValueCount() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional int64 value_count = 7;</code>
   */
  public long getValueCount() {
    return valueCount_;
  }

  public static final int TOTAL_SIZE_FIELD_NUMBER = 8;
  private long totalSize_;
  /**
   * <code>optional int64 total_size = 8;</code>
   */
  public boolean hasTotalSize() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional int64 total_size = 8;</code>
   */
  public long getTotalSize() {
    return totalSize_;
  }

  public static final int TOTAL_UNCOMPRESSED_SIZE_FIELD_NUMBER = 9;
  private long totalUncompressedSize_;
  /**
   * <code>optional int64 total_uncompressed_size = 9;</code>
   */
  public boolean hasTotalUncompressedSize() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional int64 total_uncompressed_size = 9;</code>
   */
  public long getTotalUncompressedSize() {
    return totalUncompressedSize_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, getPath());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeEnum(2, type_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeEnum(3, codec_);
    }
    for (int i = 0; i < encodings_.size(); i++) {
      output.writeEnum(4, encodings_.get(i));
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt64(5, firstDataPage_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt64(6, pageOffset_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt64(7, valueCount_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeInt64(8, totalSize_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeInt64(9, totalUncompressedSize_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPath());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, type_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, codec_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < encodings_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(encodings_.get(i));
      }
      size += dataSize;
      size += 1 * encodings_.size();
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, firstDataPage_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, pageOffset_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, valueCount_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, totalSize_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(9, totalUncompressedSize_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof alluxio.grpc.catalog.ColumnChunkMetaData)) {
      return super.equals(obj);
    }
    alluxio.grpc.catalog.ColumnChunkMetaData other = (alluxio.grpc.catalog.ColumnChunkMetaData) obj;

    boolean result = true;
    result = result && (hasPath() == other.hasPath());
    if (hasPath()) {
      result = result && getPath()
          .equals(other.getPath());
    }
    result = result && (hasType() == other.hasType());
    if (hasType()) {
      result = result && type_ == other.type_;
    }
    result = result && (hasCodec() == other.hasCodec());
    if (hasCodec()) {
      result = result && codec_ == other.codec_;
    }
    result = result && encodings_.equals(other.encodings_);
    result = result && (hasFirstDataPage() == other.hasFirstDataPage());
    if (hasFirstDataPage()) {
      result = result && (getFirstDataPage()
          == other.getFirstDataPage());
    }
    result = result && (hasPageOffset() == other.hasPageOffset());
    if (hasPageOffset()) {
      result = result && (getPageOffset()
          == other.getPageOffset());
    }
    result = result && (hasValueCount() == other.hasValueCount());
    if (hasValueCount()) {
      result = result && (getValueCount()
          == other.getValueCount());
    }
    result = result && (hasTotalSize() == other.hasTotalSize());
    if (hasTotalSize()) {
      result = result && (getTotalSize()
          == other.getTotalSize());
    }
    result = result && (hasTotalUncompressedSize() == other.hasTotalUncompressedSize());
    if (hasTotalUncompressedSize()) {
      result = result && (getTotalUncompressedSize()
          == other.getTotalUncompressedSize());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPath()) {
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
    }
    if (hasType()) {
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
    }
    if (hasCodec()) {
      hash = (37 * hash) + CODEC_FIELD_NUMBER;
      hash = (53 * hash) + codec_;
    }
    if (getEncodingsCount() > 0) {
      hash = (37 * hash) + ENCODINGS_FIELD_NUMBER;
      hash = (53 * hash) + encodings_.hashCode();
    }
    if (hasFirstDataPage()) {
      hash = (37 * hash) + FIRST_DATA_PAGE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFirstDataPage());
    }
    if (hasPageOffset()) {
      hash = (37 * hash) + PAGE_OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getPageOffset());
    }
    if (hasValueCount()) {
      hash = (37 * hash) + VALUE_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getValueCount());
    }
    if (hasTotalSize()) {
      hash = (37 * hash) + TOTAL_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTotalSize());
    }
    if (hasTotalUncompressedSize()) {
      hash = (37 * hash) + TOTAL_UNCOMPRESSED_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTotalUncompressedSize());
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static alluxio.grpc.catalog.ColumnChunkMetaData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(alluxio.grpc.catalog.ColumnChunkMetaData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code alluxio.grpc.catalog.ColumnChunkMetaData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:alluxio.grpc.catalog.ColumnChunkMetaData)
      alluxio.grpc.catalog.ColumnChunkMetaDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return alluxio.grpc.catalog.CatalogMasterProto.internal_static_alluxio_grpc_catalog_ColumnChunkMetaData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return alluxio.grpc.catalog.CatalogMasterProto.internal_static_alluxio_grpc_catalog_ColumnChunkMetaData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              alluxio.grpc.catalog.ColumnChunkMetaData.class, alluxio.grpc.catalog.ColumnChunkMetaData.Builder.class);
    }

    // Construct using alluxio.grpc.catalog.ColumnChunkMetaData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPathFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (pathBuilder_ == null) {
        path_ = null;
      } else {
        pathBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      codec_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      encodings_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      firstDataPage_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000010);
      pageOffset_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000020);
      valueCount_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000040);
      totalSize_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000080);
      totalUncompressedSize_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000100);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return alluxio.grpc.catalog.CatalogMasterProto.internal_static_alluxio_grpc_catalog_ColumnChunkMetaData_descriptor;
    }

    public alluxio.grpc.catalog.ColumnChunkMetaData getDefaultInstanceForType() {
      return alluxio.grpc.catalog.ColumnChunkMetaData.getDefaultInstance();
    }

    public alluxio.grpc.catalog.ColumnChunkMetaData build() {
      alluxio.grpc.catalog.ColumnChunkMetaData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public alluxio.grpc.catalog.ColumnChunkMetaData buildPartial() {
      alluxio.grpc.catalog.ColumnChunkMetaData result = new alluxio.grpc.catalog.ColumnChunkMetaData(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      if (pathBuilder_ == null) {
        result.path_ = path_;
      } else {
        result.path_ = pathBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.type_ = type_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.codec_ = codec_;
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        encodings_ = java.util.Collections.unmodifiableList(encodings_);
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.encodings_ = encodings_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000008;
      }
      result.firstDataPage_ = firstDataPage_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000010;
      }
      result.pageOffset_ = pageOffset_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000020;
      }
      result.valueCount_ = valueCount_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000040;
      }
      result.totalSize_ = totalSize_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000080;
      }
      result.totalUncompressedSize_ = totalUncompressedSize_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof alluxio.grpc.catalog.ColumnChunkMetaData) {
        return mergeFrom((alluxio.grpc.catalog.ColumnChunkMetaData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(alluxio.grpc.catalog.ColumnChunkMetaData other) {
      if (other == alluxio.grpc.catalog.ColumnChunkMetaData.getDefaultInstance()) return this;
      if (other.hasPath()) {
        mergePath(other.getPath());
      }
      if (other.hasType()) {
        setType(other.getType());
      }
      if (other.hasCodec()) {
        setCodec(other.getCodec());
      }
      if (!other.encodings_.isEmpty()) {
        if (encodings_.isEmpty()) {
          encodings_ = other.encodings_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureEncodingsIsMutable();
          encodings_.addAll(other.encodings_);
        }
        onChanged();
      }
      if (other.hasFirstDataPage()) {
        setFirstDataPage(other.getFirstDataPage());
      }
      if (other.hasPageOffset()) {
        setPageOffset(other.getPageOffset());
      }
      if (other.hasValueCount()) {
        setValueCount(other.getValueCount());
      }
      if (other.hasTotalSize()) {
        setTotalSize(other.getTotalSize());
      }
      if (other.hasTotalUncompressedSize()) {
        setTotalUncompressedSize(other.getTotalUncompressedSize());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      alluxio.grpc.catalog.ColumnChunkMetaData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (alluxio.grpc.catalog.ColumnChunkMetaData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private alluxio.grpc.catalog.ColumnPath path_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        alluxio.grpc.catalog.ColumnPath, alluxio.grpc.catalog.ColumnPath.Builder, alluxio.grpc.catalog.ColumnPathOrBuilder> pathBuilder_;
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    public boolean hasPath() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    public alluxio.grpc.catalog.ColumnPath getPath() {
      if (pathBuilder_ == null) {
        return path_ == null ? alluxio.grpc.catalog.ColumnPath.getDefaultInstance() : path_;
      } else {
        return pathBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    public Builder setPath(alluxio.grpc.catalog.ColumnPath value) {
      if (pathBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        path_ = value;
        onChanged();
      } else {
        pathBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    public Builder setPath(
        alluxio.grpc.catalog.ColumnPath.Builder builderForValue) {
      if (pathBuilder_ == null) {
        path_ = builderForValue.build();
        onChanged();
      } else {
        pathBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    public Builder mergePath(alluxio.grpc.catalog.ColumnPath value) {
      if (pathBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            path_ != null &&
            path_ != alluxio.grpc.catalog.ColumnPath.getDefaultInstance()) {
          path_ =
            alluxio.grpc.catalog.ColumnPath.newBuilder(path_).mergeFrom(value).buildPartial();
        } else {
          path_ = value;
        }
        onChanged();
      } else {
        pathBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    public Builder clearPath() {
      if (pathBuilder_ == null) {
        path_ = null;
        onChanged();
      } else {
        pathBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    public alluxio.grpc.catalog.ColumnPath.Builder getPathBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getPathFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    public alluxio.grpc.catalog.ColumnPathOrBuilder getPathOrBuilder() {
      if (pathBuilder_ != null) {
        return pathBuilder_.getMessageOrBuilder();
      } else {
        return path_ == null ?
            alluxio.grpc.catalog.ColumnPath.getDefaultInstance() : path_;
      }
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnPath path = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        alluxio.grpc.catalog.ColumnPath, alluxio.grpc.catalog.ColumnPath.Builder, alluxio.grpc.catalog.ColumnPathOrBuilder> 
        getPathFieldBuilder() {
      if (pathBuilder_ == null) {
        pathBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            alluxio.grpc.catalog.ColumnPath, alluxio.grpc.catalog.ColumnPath.Builder, alluxio.grpc.catalog.ColumnPathOrBuilder>(
                getPath(),
                getParentForChildren(),
                isClean());
        path_ = null;
      }
      return pathBuilder_;
    }

    private int type_ = 0;
    /**
     * <code>optional .alluxio.grpc.catalog.PrimitiveTypeName type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .alluxio.grpc.catalog.PrimitiveTypeName type = 2;</code>
     */
    public alluxio.grpc.catalog.PrimitiveTypeName getType() {
      alluxio.grpc.catalog.PrimitiveTypeName result = alluxio.grpc.catalog.PrimitiveTypeName.valueOf(type_);
      return result == null ? alluxio.grpc.catalog.PrimitiveTypeName.PARQUETTYPE_INT64 : result;
    }
    /**
     * <code>optional .alluxio.grpc.catalog.PrimitiveTypeName type = 2;</code>
     */
    public Builder setType(alluxio.grpc.catalog.PrimitiveTypeName value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .alluxio.grpc.catalog.PrimitiveTypeName type = 2;</code>
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      type_ = 0;
      onChanged();
      return this;
    }

    private int codec_ = 0;
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName codec = 3;</code>
     */
    public boolean hasCodec() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName codec = 3;</code>
     */
    public alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName getCodec() {
      alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName result = alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName.valueOf(codec_);
      return result == null ? alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName.UNCOMPRESSED : result;
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName codec = 3;</code>
     */
    public Builder setCodec(alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      codec_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .alluxio.grpc.catalog.ColumnChunkMetaData.CompressionCodecName codec = 3;</code>
     */
    public Builder clearCodec() {
      bitField0_ = (bitField0_ & ~0x00000004);
      codec_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> encodings_ =
      java.util.Collections.emptyList();
    private void ensureEncodingsIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        encodings_ = new java.util.ArrayList<java.lang.Integer>(encodings_);
        bitField0_ |= 0x00000008;
      }
    }
    /**
     * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
     */
    public java.util.List<alluxio.grpc.catalog.ColumnChunkMetaData.Encoding> getEncodingsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, alluxio.grpc.catalog.ColumnChunkMetaData.Encoding>(encodings_, encodings_converter_);
    }
    /**
     * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
     */
    public int getEncodingsCount() {
      return encodings_.size();
    }
    /**
     * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
     */
    public alluxio.grpc.catalog.ColumnChunkMetaData.Encoding getEncodings(int index) {
      return encodings_converter_.convert(encodings_.get(index));
    }
    /**
     * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
     */
    public Builder setEncodings(
        int index, alluxio.grpc.catalog.ColumnChunkMetaData.Encoding value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureEncodingsIsMutable();
      encodings_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
     */
    public Builder addEncodings(alluxio.grpc.catalog.ColumnChunkMetaData.Encoding value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureEncodingsIsMutable();
      encodings_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
     */
    public Builder addAllEncodings(
        java.lang.Iterable<? extends alluxio.grpc.catalog.ColumnChunkMetaData.Encoding> values) {
      ensureEncodingsIsMutable();
      for (alluxio.grpc.catalog.ColumnChunkMetaData.Encoding value : values) {
        encodings_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .alluxio.grpc.catalog.ColumnChunkMetaData.Encoding encodings = 4;</code>
     */
    public Builder clearEncodings() {
      encodings_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private long firstDataPage_ ;
    /**
     * <code>optional int64 first_data_page = 5;</code>
     */
    public boolean hasFirstDataPage() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int64 first_data_page = 5;</code>
     */
    public long getFirstDataPage() {
      return firstDataPage_;
    }
    /**
     * <code>optional int64 first_data_page = 5;</code>
     */
    public Builder setFirstDataPage(long value) {
      bitField0_ |= 0x00000010;
      firstDataPage_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 first_data_page = 5;</code>
     */
    public Builder clearFirstDataPage() {
      bitField0_ = (bitField0_ & ~0x00000010);
      firstDataPage_ = 0L;
      onChanged();
      return this;
    }

    private long pageOffset_ ;
    /**
     * <code>optional int64 page_offset = 6;</code>
     */
    public boolean hasPageOffset() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int64 page_offset = 6;</code>
     */
    public long getPageOffset() {
      return pageOffset_;
    }
    /**
     * <code>optional int64 page_offset = 6;</code>
     */
    public Builder setPageOffset(long value) {
      bitField0_ |= 0x00000020;
      pageOffset_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 page_offset = 6;</code>
     */
    public Builder clearPageOffset() {
      bitField0_ = (bitField0_ & ~0x00000020);
      pageOffset_ = 0L;
      onChanged();
      return this;
    }

    private long valueCount_ ;
    /**
     * <code>optional int64 value_count = 7;</code>
     */
    public boolean hasValueCount() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int64 value_count = 7;</code>
     */
    public long getValueCount() {
      return valueCount_;
    }
    /**
     * <code>optional int64 value_count = 7;</code>
     */
    public Builder setValueCount(long value) {
      bitField0_ |= 0x00000040;
      valueCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 value_count = 7;</code>
     */
    public Builder clearValueCount() {
      bitField0_ = (bitField0_ & ~0x00000040);
      valueCount_ = 0L;
      onChanged();
      return this;
    }

    private long totalSize_ ;
    /**
     * <code>optional int64 total_size = 8;</code>
     */
    public boolean hasTotalSize() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 total_size = 8;</code>
     */
    public long getTotalSize() {
      return totalSize_;
    }
    /**
     * <code>optional int64 total_size = 8;</code>
     */
    public Builder setTotalSize(long value) {
      bitField0_ |= 0x00000080;
      totalSize_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 total_size = 8;</code>
     */
    public Builder clearTotalSize() {
      bitField0_ = (bitField0_ & ~0x00000080);
      totalSize_ = 0L;
      onChanged();
      return this;
    }

    private long totalUncompressedSize_ ;
    /**
     * <code>optional int64 total_uncompressed_size = 9;</code>
     */
    public boolean hasTotalUncompressedSize() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int64 total_uncompressed_size = 9;</code>
     */
    public long getTotalUncompressedSize() {
      return totalUncompressedSize_;
    }
    /**
     * <code>optional int64 total_uncompressed_size = 9;</code>
     */
    public Builder setTotalUncompressedSize(long value) {
      bitField0_ |= 0x00000100;
      totalUncompressedSize_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 total_uncompressed_size = 9;</code>
     */
    public Builder clearTotalUncompressedSize() {
      bitField0_ = (bitField0_ & ~0x00000100);
      totalUncompressedSize_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:alluxio.grpc.catalog.ColumnChunkMetaData)
  }

  // @@protoc_insertion_point(class_scope:alluxio.grpc.catalog.ColumnChunkMetaData)
  private static final alluxio.grpc.catalog.ColumnChunkMetaData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new alluxio.grpc.catalog.ColumnChunkMetaData();
  }

  public static alluxio.grpc.catalog.ColumnChunkMetaData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<ColumnChunkMetaData>
      PARSER = new com.google.protobuf.AbstractParser<ColumnChunkMetaData>() {
    public ColumnChunkMetaData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ColumnChunkMetaData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ColumnChunkMetaData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ColumnChunkMetaData> getParserForType() {
    return PARSER;
  }

  public alluxio.grpc.catalog.ColumnChunkMetaData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

