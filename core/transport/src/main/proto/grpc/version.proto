syntax = "proto2";

option java_multiple_files = true;
option java_package = "alluxio.grpc";
option java_outer_classname = "VersionProto";

package alluxio.grpc.version;


enum ServiceType {
  // FILE_SYSTEM_WORKER_WORKER_SERVICE is replaced by BLOCK_WORKER_CLIENT_SERVICE
  // as a clearer type name
  reserved 12;
  reserved "FILE_SYSTEM_WORKER_WORKER_SERVICE";

  UNKNOWN_SERVICE = 0;
  FILE_SYSTEM_MASTER_CLIENT_SERVICE = 1;
  FILE_SYSTEM_MASTER_WORKER_SERVICE = 2;
  FILE_SYSTEM_MASTER_JOB_SERVICE = 3;
  BLOCK_MASTER_CLIENT_SERVICE = 4;
  BLOCK_MASTER_WORKER_SERVICE = 5;
  META_MASTER_CONFIG_SERVICE = 6;
  META_MASTER_CLIENT_SERVICE = 7;
  META_MASTER_MASTER_SERVICE = 8;
  METRICS_MASTER_CLIENT_SERVICE = 9;
  JOB_MASTER_CLIENT_SERVICE = 10;
  JOB_MASTER_WORKER_SERVICE = 11;
  JOURNAL_MASTER_CLIENT_SERVICE = 13;
  TABLE_MASTER_CLIENT_SERVICE = 14;
  META_MASTER_BACKUP_MESSAGING_SERVICE = 15;
  RAFT_JOURNAL_SERVICE = 16;
  BLOCK_WORKER_CLIENT_SERVICE = 17;
}

message GetServiceVersionPRequest {
  optional ServiceType serviceType = 1;
  // This field is added for backwards compatibility.
  // When gRPC services are enabled on standby masters, PollingMasterInquireClient will not be able to
  // tell which master is the primary and which is the standby by calling this endpoint.
  // So we rejected get service version requests on standby masters,
  // which allows us to enable gRPC services on standby masters without making client side code change.
  // However, this endpoint is also used outside the PollingMasterInquireClient.
  // When a client makes a request to a master, it will also call this endpoint to verify the version.
  // And hence the request to standby master will never succeed because it will constantly be rejected.
  // We added this field as a backdoor to let these version verification requests pass through
  // so that a client can make requests to standby masters successfully.
  optional bool allowOnStandbyMasters = 2;
}
message GetServiceVersionPResponse {
  optional int64 version = 1;
}

service ServiceVersionClientService {

  /**
   * Returns the version of the master service.
   * NOTE: The version should be updated every time a backwards incompatible API change occurs.
   */
  rpc getServiceVersion(GetServiceVersionPRequest) returns (GetServiceVersionPResponse);
}
