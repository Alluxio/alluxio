/*
 * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0
 * (the "License"). You may not use this work except in compliance with the License, which is
 * available at www.apache.org/licenses/LICENSE-2.0
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied, as more fully set forth in the License.
 *
 * See the NOTICE file distributed with this work for information regarding copyright ownership.
 */

package alluxio.worker.block;

import static alluxio.Constants.CLUSTERID_FILE;

import alluxio.conf.PropertyKey;
import alluxio.conf.ServerConfiguration;
import alluxio.metrics.MetricsConfig;
import alluxio.util.IdUtils;
import alluxio.util.io.FileUtils;
import alluxio.util.io.PathUtils;

import com.google.common.base.Preconditions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.concurrent.NotThreadSafe;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;

/**
 * persistence worker info to a file.
 */
@NotThreadSafe
public class DefaultBlockWorkerDB implements BlockWorkerDB {
  private static final String CLUSTER_ID_KEY = "clusterId";
  private static final Logger LOG = LoggerFactory.getLogger(MetricsConfig.class);
  /*Use Properties to persistence info */
  final Properties mProperties;
  /*Properties file path */
  final String mFile;
  boolean mIsInit;

  DefaultBlockWorkerDB(String path) throws IOException {
    mProperties = new Properties();
    mFile = path;
    mIsInit = false;
    initFile(); // If the DB file does not exist, it will be created
  }

  DefaultBlockWorkerDB() throws IOException {
    this(PathUtils.concatPath(
        ServerConfiguration.get(PropertyKey.WORKER_CLUSTERID_PATH), CLUSTERID_FILE));
  }

  @Override
  public String getClusterId() {
    String mClusterId = get(CLUSTER_ID_KEY);
    return (mClusterId.isEmpty()) ? IdUtils.EMPTY_CLUSTER_ID : mClusterId;
  }

  @Override
  public void setClusterId(String clusterId) throws IOException {
    set(CLUSTER_ID_KEY, clusterId);
  }

  @Override
  public void reset() throws IOException {
    if (!Files.exists(Paths.get(mFile))) {
      return;
    }
    // clear mProperties in memory
    mProperties.clear();
    // clear the persistence file
    try (OutputStream os = new FileOutputStream(mFile)) {
      os.write("".getBytes(StandardCharsets.UTF_8));
    } catch (Exception e) {
      LOG.error("Failed to resetState file.", e);
    }
  }

  /**
   * Searches for the property with the specified key in file.
   * If the property file does not exist or key is not found in this property list
   * will return empty string
   *
   * @param key the property key
   * @return the value in this property list with the specified key value
   */
  private String get(String key) {
    Preconditions.checkNotNull(key, "get");

    String value = "";
    if (Files.exists(Paths.get(mFile))) {
      try (InputStream is = new FileInputStream(mFile)) {
        mProperties.load(is);
        value = mProperties.getProperty(key);
      } catch (Exception e) {
        LOG.error("Failed to read file.", e);
      }
    }
    return (value == null) ? "" : value;
  }

  /**
   * persist a key-value to property file.
   *
   * @param key   the key to be persist into this file
   * @param value the value corresponding to key
   * @throws IOException I/O error if create or write file failed
   */
  private void set(String key, String value) throws IOException {
    Preconditions.checkNotNull(key, "set");
    Preconditions.checkNotNull(value, "set");

    try (OutputStream os = new FileOutputStream(mFile)) {
      mProperties.setProperty(key, value);
      mProperties.store(os, "generated by worker process, don't edit it");
    } catch (Exception e) {
      LOG.error("Failed to write file.", e);
      throw new IOException("Failed to write file", e);
    }
  }

  private void initFile() throws IOException {
    if (mIsInit) {
      return;
    }

    if (!Files.exists(Paths.get(mFile))) {
      try {
        FileUtils.createFile(mFile);
      } catch (IOException e) {
        LOG.error("Failed to create file", e);
        throw new IOException("Failed to create file", e);
      }
    }
    mIsInit = true;
  }
}
