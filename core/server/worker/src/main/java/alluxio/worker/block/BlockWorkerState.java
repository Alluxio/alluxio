/*
 * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0
 * (the "License"). You may not use this work except in compliance with the License, which is
 * available at www.apache.org/licenses/LICENSE-2.0
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied, as more fully set forth in the License.
 *
 * See the NOTICE file distributed with this work for information regarding copyright ownership.
 */

package alluxio.worker.block;

import alluxio.conf.PropertyKey;
import alluxio.conf.ServerConfiguration;
import alluxio.metrics.MetricsConfig;
import com.google.common.base.Preconditions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.concurrent.NotThreadSafe;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;

@NotThreadSafe
public class BlockWorkerState {
  private static final Logger LOG = LoggerFactory.getLogger(MetricsConfig.class);
  final Properties mProperties;
  final String mPath;

  BlockWorkerState(Properties properties) {
    mProperties = properties;
    mPath = ServerConfiguration.get(PropertyKey.WORKER_PERSISTENCE_CLUSTER_ID_PATH);;
  }

  BlockWorkerState() {
    this(new Properties());
  }

  public String get(String k) {
    Preconditions.checkNotNull(k, "get");

    String value = "";
    try (InputStream is = new FileInputStream(mPath)) {
      mProperties.load(is);
      value = mProperties.getProperty(k);
    } catch (Exception e) {
      LOG.error("Error loading metrics configuration file.", e);
    }
    return (value == null) ? "" : value;
  }

  public void set(String k, String v) throws IOException {
    Preconditions.checkNotNull(k, "get");
    Preconditions.checkNotNull(v, "get");

    if (!Files.exists(Paths.get(mPath))) {
      Files.createFile(Paths.get(mPath));
    }
    try (OutputStream os = new FileOutputStream(mPath)) {
      mProperties.setProperty(k, v);
      mProperties.store(os, "generated by worker process, don't edit it");
    } catch (Exception e) {
      LOG.error("Error loading metrics configuration file.", e);
    }
  }

  public void reset() throws IOException {
    try (OutputStream os = new FileOutputStream(mPath)) {
      os.write("".getBytes(StandardCharsets.UTF_8));
    } catch (Exception e) {
      LOG.error("Error loading metrics configuration file.", e);
    }
  }
}
