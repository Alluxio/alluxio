/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class FreeTOptions implements org.apache.thrift.TBase<FreeTOptions, FreeTOptions._Fields>, java.io.Serializable, Cloneable, Comparable<FreeTOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FreeTOptions");

  private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField FORCED_FIELD_DESC = new org.apache.thrift.protocol.TField("forced", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField COMMON_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("commonOptions", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FreeTOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FreeTOptionsTupleSchemeFactory());
  }

  private boolean recursive; // optional
  private boolean forced; // optional
  private FileSystemMasterCommonTOptions commonOptions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECURSIVE((short)1, "recursive"),
    FORCED((short)2, "forced"),
    COMMON_OPTIONS((short)3, "commonOptions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECURSIVE
          return RECURSIVE;
        case 2: // FORCED
          return FORCED;
        case 3: // COMMON_OPTIONS
          return COMMON_OPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECURSIVE_ISSET_ID = 0;
  private static final int __FORCED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RECURSIVE,_Fields.FORCED,_Fields.COMMON_OPTIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FORCED, new org.apache.thrift.meta_data.FieldMetaData("forced", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMMON_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("commonOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileSystemMasterCommonTOptions.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FreeTOptions.class, metaDataMap);
  }

  public FreeTOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FreeTOptions(FreeTOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.recursive = other.recursive;
    this.forced = other.forced;
    if (other.isSetCommonOptions()) {
      this.commonOptions = new FileSystemMasterCommonTOptions(other.commonOptions);
    }
  }

  public FreeTOptions deepCopy() {
    return new FreeTOptions(this);
  }

  @Override
  public void clear() {
    setRecursiveIsSet(false);
    this.recursive = false;
    setForcedIsSet(false);
    this.forced = false;
    this.commonOptions = null;
  }

  public boolean isRecursive() {
    return this.recursive;
  }

  public FreeTOptions setRecursive(boolean recursive) {
    this.recursive = recursive;
    setRecursiveIsSet(true);
    return this;
  }

  public void unsetRecursive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
  }

  /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
  public boolean isSetRecursive() {
    return EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
  }

  public void setRecursiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
  }

  public boolean isForced() {
    return this.forced;
  }

  public FreeTOptions setForced(boolean forced) {
    this.forced = forced;
    setForcedIsSet(true);
    return this;
  }

  public void unsetForced() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCED_ISSET_ID);
  }

  /** Returns true if field forced is set (has been assigned a value) and false otherwise */
  public boolean isSetForced() {
    return EncodingUtils.testBit(__isset_bitfield, __FORCED_ISSET_ID);
  }

  public void setForcedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCED_ISSET_ID, value);
  }

  public FileSystemMasterCommonTOptions getCommonOptions() {
    return this.commonOptions;
  }

  public FreeTOptions setCommonOptions(FileSystemMasterCommonTOptions commonOptions) {
    this.commonOptions = commonOptions;
    return this;
  }

  public void unsetCommonOptions() {
    this.commonOptions = null;
  }

  /** Returns true if field commonOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonOptions() {
    return this.commonOptions != null;
  }

  public void setCommonOptionsIsSet(boolean value) {
    if (!value) {
      this.commonOptions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECURSIVE:
      if (value == null) {
        unsetRecursive();
      } else {
        setRecursive((Boolean)value);
      }
      break;

    case FORCED:
      if (value == null) {
        unsetForced();
      } else {
        setForced((Boolean)value);
      }
      break;

    case COMMON_OPTIONS:
      if (value == null) {
        unsetCommonOptions();
      } else {
        setCommonOptions((FileSystemMasterCommonTOptions)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECURSIVE:
      return isRecursive();

    case FORCED:
      return isForced();

    case COMMON_OPTIONS:
      return getCommonOptions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECURSIVE:
      return isSetRecursive();
    case FORCED:
      return isSetForced();
    case COMMON_OPTIONS:
      return isSetCommonOptions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FreeTOptions)
      return this.equals((FreeTOptions)that);
    return false;
  }

  public boolean equals(FreeTOptions that) {
    if (that == null)
      return false;

    boolean this_present_recursive = true && this.isSetRecursive();
    boolean that_present_recursive = true && that.isSetRecursive();
    if (this_present_recursive || that_present_recursive) {
      if (!(this_present_recursive && that_present_recursive))
        return false;
      if (this.recursive != that.recursive)
        return false;
    }

    boolean this_present_forced = true && this.isSetForced();
    boolean that_present_forced = true && that.isSetForced();
    if (this_present_forced || that_present_forced) {
      if (!(this_present_forced && that_present_forced))
        return false;
      if (this.forced != that.forced)
        return false;
    }

    boolean this_present_commonOptions = true && this.isSetCommonOptions();
    boolean that_present_commonOptions = true && that.isSetCommonOptions();
    if (this_present_commonOptions || that_present_commonOptions) {
      if (!(this_present_commonOptions && that_present_commonOptions))
        return false;
      if (!this.commonOptions.equals(that.commonOptions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_recursive = true && (isSetRecursive());
    list.add(present_recursive);
    if (present_recursive)
      list.add(recursive);

    boolean present_forced = true && (isSetForced());
    list.add(present_forced);
    if (present_forced)
      list.add(forced);

    boolean present_commonOptions = true && (isSetCommonOptions());
    list.add(present_commonOptions);
    if (present_commonOptions)
      list.add(commonOptions);

    return list.hashCode();
  }

  @Override
  public int compareTo(FreeTOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecursive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForced()).compareTo(other.isSetForced());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForced()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forced, other.forced);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommonOptions()).compareTo(other.isSetCommonOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonOptions, other.commonOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FreeTOptions(");
    boolean first = true;

    if (isSetRecursive()) {
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
    }
    if (isSetForced()) {
      if (!first) sb.append(", ");
      sb.append("forced:");
      sb.append(this.forced);
      first = false;
    }
    if (isSetCommonOptions()) {
      if (!first) sb.append(", ");
      sb.append("commonOptions:");
      if (this.commonOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.commonOptions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commonOptions != null) {
      commonOptions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FreeTOptionsStandardSchemeFactory implements SchemeFactory {
    public FreeTOptionsStandardScheme getScheme() {
      return new FreeTOptionsStandardScheme();
    }
  }

  private static class FreeTOptionsStandardScheme extends StandardScheme<FreeTOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FreeTOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECURSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.recursive = iprot.readBool();
              struct.setRecursiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORCED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.forced = iprot.readBool();
              struct.setForcedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMON_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commonOptions = new FileSystemMasterCommonTOptions();
              struct.commonOptions.read(iprot);
              struct.setCommonOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FreeTOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRecursive()) {
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForced()) {
        oprot.writeFieldBegin(FORCED_FIELD_DESC);
        oprot.writeBool(struct.forced);
        oprot.writeFieldEnd();
      }
      if (struct.commonOptions != null) {
        if (struct.isSetCommonOptions()) {
          oprot.writeFieldBegin(COMMON_OPTIONS_FIELD_DESC);
          struct.commonOptions.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FreeTOptionsTupleSchemeFactory implements SchemeFactory {
    public FreeTOptionsTupleScheme getScheme() {
      return new FreeTOptionsTupleScheme();
    }
  }

  private static class FreeTOptionsTupleScheme extends TupleScheme<FreeTOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FreeTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRecursive()) {
        optionals.set(0);
      }
      if (struct.isSetForced()) {
        optionals.set(1);
      }
      if (struct.isSetCommonOptions()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRecursive()) {
        oprot.writeBool(struct.recursive);
      }
      if (struct.isSetForced()) {
        oprot.writeBool(struct.forced);
      }
      if (struct.isSetCommonOptions()) {
        struct.commonOptions.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FreeTOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.recursive = iprot.readBool();
        struct.setRecursiveIsSet(true);
      }
      if (incoming.get(1)) {
        struct.forced = iprot.readBool();
        struct.setForcedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commonOptions = new FileSystemMasterCommonTOptions();
        struct.commonOptions.read(iprot);
        struct.setCommonOptionsIsSet(true);
      }
    }
  }

}

