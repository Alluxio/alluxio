#!/usr/bin/env bash

function printUsage() {
  cat << EOF 
Usage: tachyon-perf-repeat <TestCase> [Options]

The TestCase is the same as tachyon-perf

Options are as follows:

  -a
  --abort
    When set any previous performance testing processes are aborted prior to starting

  -b <TestCase>
  --before <TestCase>
    When set runs the given test case once prior to running the actual test case, this is useful
    when a test case is dependent on the data generated by another.

    For example to run SimpleRead you must have run SimpleWrite beforehand.

  -c
  --clean
    When set the workspace will be cleaned after each iteration of the test case

  -i <Iterations>
  --iterations <Iterations>
    The number of iterations to run i.e. number of times to repeat the test case

    This defaults to 10 if not specified

  -p
  --pre-clean
    When set clean the workspace prior to starting iterations
EOF
}

TEST=$1
if [ -z "${TEST}" ]; then
  echo "No test case specified"
  printUsage
  exit 1
fi

# Get Options
ABORT=0
BEFORE=
ITERATIONS=10
PRECLEAN=0
CLEAN=0
shift

while [ $# -gt 0 ]
do
  OPTION=$1
  shift

  case ${OPTION} in
    -a|--abort)
      ABORT=1
      ;;
    -b|--before)
      BEFORE=$1
      shift
      ;;
    -c|--clean)
      CLEAN=1
      ;;
    -i|--iterations)
      ITERATIONS=$1
      shift
      ;;
    -p|--pre-clean)
      PRECLEAN=1
      ;;
    *)
      echo "Unknown Option/Argument ${OPTION} was ignored"
      ;;
  esac
done

bin=`cd "$( dirname "$0" )"; pwd`

DEFAULT_PERF_LIBEXEC_DIR="$bin"/../libexec
TACHYON_PERF_LIBEXEC_DIR=${TACHYON_PERF_LIBEXEC_DIR:-$DEFAULT_PERF_LIBEXEC_DIR}
. $TACHYON_PERF_LIBEXEC_DIR/tachyon-perf-config.sh

# Clean up appropriately
rm -fv result/TachyonPerfResult-${TEST}-*
if [ ${ABORT} -eq 1 ]; then
  echo "Aborting any previous Perf testing processes"
  ${bin}/tachyon-perf-abort
  echo "Previous Perf testing processes aborted"
fi
if [ ${PRECLEAN} -eq 1 ]; then
  echo "Cleaning workspace prior to testing"
  ${bin}/tachyon-perf-clean
fi

if [ -n "${BEFORE}" ]; then
  # Need to run something before
  echo "Running before test case ${BEFORE}"
  ${bin}/tachyon-perf ${BEFORE}
  echo "Ran before test case ${BEFORE}"
fi

echo "Running test ${TEST} for ${ITERATIONS} iterations"

# Run test iterations
i=1
while [ "${i}" -le "${ITERATIONS}" ]; do
  # Run the test
  echo "Running ${TEST} iteration ${i}"
  ${bin}/tachyon-perf ${TEST}

  # Collect the results
  ${bin}/tachyon-perf-collect ${TEST}
  cp -v result/TachyonPerfReport-${TEST} result/TachyonPerfResult-${TEST}-${i}

  # Clean up if necessary
  if [ ${CLEAN} -eq 1 ]; then
    echo "Cleaning workspace after ${TEST} iteration ${i}"
    ${bin}/tachyon-perf-clean
  fi
  echo "Completed ${TEST} iteration ${i}"

  i=`expr ${i} + 1`
done

echo "Completed ${ITERATIONS} iterations of test ${TEST}"

# Collate results files
pushd result
RESULTS="TachyonPerfResult-${TEST}.tar.gz"
tar -cz TachyonPerfResult-${TEST}-* -f "${RESULTS}"
echo "Created results archive at ${RESULTS}"
popd

# Calculate statistics
TOTALS_FILE="result/totals-${TEST}.txt"
grep "Total" result/TachyonPerfResult-${TEST}-* | cut -f 2 | sort -n > ${TOTALS_FILE}
AVG_THROUGHPUT=`cat ${TOTALS_FILE} | awk '{a+=$0} END{print a/NR}'`
MAX_THROUGHPUT=`tail -n 1 ${TOTALS_FILE}`
MIN_THROUGHPUT=`head -n 1 ${TOTALS_FILE}`
rm -fv ${TOTALS_FILE}

# Output statistics
echo "Statistics for ${TEST} over ${ITERATIONS} iterations"
echo "Average Throughput was ${AVG_THROUGHPUT}"
echo "Max Throughput was ${MAX_THROUGHPUT}"
echo "Min Throughout was ${MIN_THROUGHPUT}"
