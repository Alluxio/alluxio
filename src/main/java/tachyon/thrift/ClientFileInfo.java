/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package tachyon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientFileInfo implements org.apache.thrift.TBase<ClientFileInfo, ClientFileInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientFileInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHECKPOINT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("checkpointPath", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSizeByte", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("creationTimeMs", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("complete", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField FOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("folder", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IN_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("inMemory", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField NEED_PIN_FIELD_DESC = new org.apache.thrift.protocol.TField("needPin", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField NEED_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("needCache", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField BLOCK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("blockIds", org.apache.thrift.protocol.TType.LIST, (short)13);

  public int id; // required
  public String name; // required
  public String path; // required
  public String checkpointPath; // required
  public long length; // required
  public long blockSizeByte; // required
  public long creationTimeMs; // required
  public boolean complete; // required
  public boolean folder; // required
  public boolean inMemory; // required
  public boolean needPin; // required
  public boolean needCache; // required
  public List<Long> blockIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    PATH((short)3, "path"),
    CHECKPOINT_PATH((short)4, "checkpointPath"),
    LENGTH((short)5, "length"),
    BLOCK_SIZE_BYTE((short)6, "blockSizeByte"),
    CREATION_TIME_MS((short)7, "creationTimeMs"),
    COMPLETE((short)8, "complete"),
    FOLDER((short)9, "folder"),
    IN_MEMORY((short)10, "inMemory"),
    NEED_PIN((short)11, "needPin"),
    NEED_CACHE((short)12, "needCache"),
    BLOCK_IDS((short)13, "blockIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // PATH
          return PATH;
        case 4: // CHECKPOINT_PATH
          return CHECKPOINT_PATH;
        case 5: // LENGTH
          return LENGTH;
        case 6: // BLOCK_SIZE_BYTE
          return BLOCK_SIZE_BYTE;
        case 7: // CREATION_TIME_MS
          return CREATION_TIME_MS;
        case 8: // COMPLETE
          return COMPLETE;
        case 9: // FOLDER
          return FOLDER;
        case 10: // IN_MEMORY
          return IN_MEMORY;
        case 11: // NEED_PIN
          return NEED_PIN;
        case 12: // NEED_CACHE
          return NEED_CACHE;
        case 13: // BLOCK_IDS
          return BLOCK_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private static final int __BLOCKSIZEBYTE_ISSET_ID = 2;
  private static final int __CREATIONTIMEMS_ISSET_ID = 3;
  private static final int __COMPLETE_ISSET_ID = 4;
  private static final int __FOLDER_ISSET_ID = 5;
  private static final int __INMEMORY_ISSET_ID = 6;
  private static final int __NEEDPIN_ISSET_ID = 7;
  private static final int __NEEDCACHE_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECKPOINT_PATH, new org.apache.thrift.meta_data.FieldMetaData("checkpointPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_SIZE_BYTE, new org.apache.thrift.meta_data.FieldMetaData("blockSizeByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATION_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("creationTimeMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("complete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FOLDER, new org.apache.thrift.meta_data.FieldMetaData("folder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IN_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("inMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEED_PIN, new org.apache.thrift.meta_data.FieldMetaData("needPin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEED_CACHE, new org.apache.thrift.meta_data.FieldMetaData("needCache", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLOCK_IDS, new org.apache.thrift.meta_data.FieldMetaData("blockIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientFileInfo.class, metaDataMap);
  }

  public ClientFileInfo() {
  }

  public ClientFileInfo(
    int id,
    String name,
    String path,
    String checkpointPath,
    long length,
    long blockSizeByte,
    long creationTimeMs,
    boolean complete,
    boolean folder,
    boolean inMemory,
    boolean needPin,
    boolean needCache,
    List<Long> blockIds)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.path = path;
    this.checkpointPath = checkpointPath;
    this.length = length;
    setLengthIsSet(true);
    this.blockSizeByte = blockSizeByte;
    setBlockSizeByteIsSet(true);
    this.creationTimeMs = creationTimeMs;
    setCreationTimeMsIsSet(true);
    this.complete = complete;
    setCompleteIsSet(true);
    this.folder = folder;
    setFolderIsSet(true);
    this.inMemory = inMemory;
    setInMemoryIsSet(true);
    this.needPin = needPin;
    setNeedPinIsSet(true);
    this.needCache = needCache;
    setNeedCacheIsSet(true);
    this.blockIds = blockIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientFileInfo(ClientFileInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetCheckpointPath()) {
      this.checkpointPath = other.checkpointPath;
    }
    this.length = other.length;
    this.blockSizeByte = other.blockSizeByte;
    this.creationTimeMs = other.creationTimeMs;
    this.complete = other.complete;
    this.folder = other.folder;
    this.inMemory = other.inMemory;
    this.needPin = other.needPin;
    this.needCache = other.needCache;
    if (other.isSetBlockIds()) {
      List<Long> __this__blockIds = new ArrayList<Long>();
      for (Long other_element : other.blockIds) {
        __this__blockIds.add(other_element);
      }
      this.blockIds = __this__blockIds;
    }
  }

  public ClientFileInfo deepCopy() {
    return new ClientFileInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.path = null;
    this.checkpointPath = null;
    setLengthIsSet(false);
    this.length = 0;
    setBlockSizeByteIsSet(false);
    this.blockSizeByte = 0;
    setCreationTimeMsIsSet(false);
    this.creationTimeMs = 0;
    setCompleteIsSet(false);
    this.complete = false;
    setFolderIsSet(false);
    this.folder = false;
    setInMemoryIsSet(false);
    this.inMemory = false;
    setNeedPinIsSet(false);
    this.needPin = false;
    setNeedCacheIsSet(false);
    this.needCache = false;
    this.blockIds = null;
  }

  public int getId() {
    return this.id;
  }

  public ClientFileInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ClientFileInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public ClientFileInfo setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getCheckpointPath() {
    return this.checkpointPath;
  }

  public ClientFileInfo setCheckpointPath(String checkpointPath) {
    this.checkpointPath = checkpointPath;
    return this;
  }

  public void unsetCheckpointPath() {
    this.checkpointPath = null;
  }

  /** Returns true if field checkpointPath is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckpointPath() {
    return this.checkpointPath != null;
  }

  public void setCheckpointPathIsSet(boolean value) {
    if (!value) {
      this.checkpointPath = null;
    }
  }

  public long getLength() {
    return this.length;
  }

  public ClientFileInfo setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bit_vector.clear(__LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return __isset_bit_vector.get(__LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bit_vector.set(__LENGTH_ISSET_ID, value);
  }

  public long getBlockSizeByte() {
    return this.blockSizeByte;
  }

  public ClientFileInfo setBlockSizeByte(long blockSizeByte) {
    this.blockSizeByte = blockSizeByte;
    setBlockSizeByteIsSet(true);
    return this;
  }

  public void unsetBlockSizeByte() {
    __isset_bit_vector.clear(__BLOCKSIZEBYTE_ISSET_ID);
  }

  /** Returns true if field blockSizeByte is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockSizeByte() {
    return __isset_bit_vector.get(__BLOCKSIZEBYTE_ISSET_ID);
  }

  public void setBlockSizeByteIsSet(boolean value) {
    __isset_bit_vector.set(__BLOCKSIZEBYTE_ISSET_ID, value);
  }

  public long getCreationTimeMs() {
    return this.creationTimeMs;
  }

  public ClientFileInfo setCreationTimeMs(long creationTimeMs) {
    this.creationTimeMs = creationTimeMs;
    setCreationTimeMsIsSet(true);
    return this;
  }

  public void unsetCreationTimeMs() {
    __isset_bit_vector.clear(__CREATIONTIMEMS_ISSET_ID);
  }

  /** Returns true if field creationTimeMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationTimeMs() {
    return __isset_bit_vector.get(__CREATIONTIMEMS_ISSET_ID);
  }

  public void setCreationTimeMsIsSet(boolean value) {
    __isset_bit_vector.set(__CREATIONTIMEMS_ISSET_ID, value);
  }

  public boolean isComplete() {
    return this.complete;
  }

  public ClientFileInfo setComplete(boolean complete) {
    this.complete = complete;
    setCompleteIsSet(true);
    return this;
  }

  public void unsetComplete() {
    __isset_bit_vector.clear(__COMPLETE_ISSET_ID);
  }

  /** Returns true if field complete is set (has been assigned a value) and false otherwise */
  public boolean isSetComplete() {
    return __isset_bit_vector.get(__COMPLETE_ISSET_ID);
  }

  public void setCompleteIsSet(boolean value) {
    __isset_bit_vector.set(__COMPLETE_ISSET_ID, value);
  }

  public boolean isFolder() {
    return this.folder;
  }

  public ClientFileInfo setFolder(boolean folder) {
    this.folder = folder;
    setFolderIsSet(true);
    return this;
  }

  public void unsetFolder() {
    __isset_bit_vector.clear(__FOLDER_ISSET_ID);
  }

  /** Returns true if field folder is set (has been assigned a value) and false otherwise */
  public boolean isSetFolder() {
    return __isset_bit_vector.get(__FOLDER_ISSET_ID);
  }

  public void setFolderIsSet(boolean value) {
    __isset_bit_vector.set(__FOLDER_ISSET_ID, value);
  }

  public boolean isInMemory() {
    return this.inMemory;
  }

  public ClientFileInfo setInMemory(boolean inMemory) {
    this.inMemory = inMemory;
    setInMemoryIsSet(true);
    return this;
  }

  public void unsetInMemory() {
    __isset_bit_vector.clear(__INMEMORY_ISSET_ID);
  }

  /** Returns true if field inMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetInMemory() {
    return __isset_bit_vector.get(__INMEMORY_ISSET_ID);
  }

  public void setInMemoryIsSet(boolean value) {
    __isset_bit_vector.set(__INMEMORY_ISSET_ID, value);
  }

  public boolean isNeedPin() {
    return this.needPin;
  }

  public ClientFileInfo setNeedPin(boolean needPin) {
    this.needPin = needPin;
    setNeedPinIsSet(true);
    return this;
  }

  public void unsetNeedPin() {
    __isset_bit_vector.clear(__NEEDPIN_ISSET_ID);
  }

  /** Returns true if field needPin is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedPin() {
    return __isset_bit_vector.get(__NEEDPIN_ISSET_ID);
  }

  public void setNeedPinIsSet(boolean value) {
    __isset_bit_vector.set(__NEEDPIN_ISSET_ID, value);
  }

  public boolean isNeedCache() {
    return this.needCache;
  }

  public ClientFileInfo setNeedCache(boolean needCache) {
    this.needCache = needCache;
    setNeedCacheIsSet(true);
    return this;
  }

  public void unsetNeedCache() {
    __isset_bit_vector.clear(__NEEDCACHE_ISSET_ID);
  }

  /** Returns true if field needCache is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedCache() {
    return __isset_bit_vector.get(__NEEDCACHE_ISSET_ID);
  }

  public void setNeedCacheIsSet(boolean value) {
    __isset_bit_vector.set(__NEEDCACHE_ISSET_ID, value);
  }

  public int getBlockIdsSize() {
    return (this.blockIds == null) ? 0 : this.blockIds.size();
  }

  public java.util.Iterator<Long> getBlockIdsIterator() {
    return (this.blockIds == null) ? null : this.blockIds.iterator();
  }

  public void addToBlockIds(long elem) {
    if (this.blockIds == null) {
      this.blockIds = new ArrayList<Long>();
    }
    this.blockIds.add(elem);
  }

  public List<Long> getBlockIds() {
    return this.blockIds;
  }

  public ClientFileInfo setBlockIds(List<Long> blockIds) {
    this.blockIds = blockIds;
    return this;
  }

  public void unsetBlockIds() {
    this.blockIds = null;
  }

  /** Returns true if field blockIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockIds() {
    return this.blockIds != null;
  }

  public void setBlockIdsIsSet(boolean value) {
    if (!value) {
      this.blockIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case CHECKPOINT_PATH:
      if (value == null) {
        unsetCheckpointPath();
      } else {
        setCheckpointPath((String)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case BLOCK_SIZE_BYTE:
      if (value == null) {
        unsetBlockSizeByte();
      } else {
        setBlockSizeByte((Long)value);
      }
      break;

    case CREATION_TIME_MS:
      if (value == null) {
        unsetCreationTimeMs();
      } else {
        setCreationTimeMs((Long)value);
      }
      break;

    case COMPLETE:
      if (value == null) {
        unsetComplete();
      } else {
        setComplete((Boolean)value);
      }
      break;

    case FOLDER:
      if (value == null) {
        unsetFolder();
      } else {
        setFolder((Boolean)value);
      }
      break;

    case IN_MEMORY:
      if (value == null) {
        unsetInMemory();
      } else {
        setInMemory((Boolean)value);
      }
      break;

    case NEED_PIN:
      if (value == null) {
        unsetNeedPin();
      } else {
        setNeedPin((Boolean)value);
      }
      break;

    case NEED_CACHE:
      if (value == null) {
        unsetNeedCache();
      } else {
        setNeedCache((Boolean)value);
      }
      break;

    case BLOCK_IDS:
      if (value == null) {
        unsetBlockIds();
      } else {
        setBlockIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case PATH:
      return getPath();

    case CHECKPOINT_PATH:
      return getCheckpointPath();

    case LENGTH:
      return Long.valueOf(getLength());

    case BLOCK_SIZE_BYTE:
      return Long.valueOf(getBlockSizeByte());

    case CREATION_TIME_MS:
      return Long.valueOf(getCreationTimeMs());

    case COMPLETE:
      return Boolean.valueOf(isComplete());

    case FOLDER:
      return Boolean.valueOf(isFolder());

    case IN_MEMORY:
      return Boolean.valueOf(isInMemory());

    case NEED_PIN:
      return Boolean.valueOf(isNeedPin());

    case NEED_CACHE:
      return Boolean.valueOf(isNeedCache());

    case BLOCK_IDS:
      return getBlockIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case PATH:
      return isSetPath();
    case CHECKPOINT_PATH:
      return isSetCheckpointPath();
    case LENGTH:
      return isSetLength();
    case BLOCK_SIZE_BYTE:
      return isSetBlockSizeByte();
    case CREATION_TIME_MS:
      return isSetCreationTimeMs();
    case COMPLETE:
      return isSetComplete();
    case FOLDER:
      return isSetFolder();
    case IN_MEMORY:
      return isSetInMemory();
    case NEED_PIN:
      return isSetNeedPin();
    case NEED_CACHE:
      return isSetNeedCache();
    case BLOCK_IDS:
      return isSetBlockIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientFileInfo)
      return this.equals((ClientFileInfo)that);
    return false;
  }

  public boolean equals(ClientFileInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_checkpointPath = true && this.isSetCheckpointPath();
    boolean that_present_checkpointPath = true && that.isSetCheckpointPath();
    if (this_present_checkpointPath || that_present_checkpointPath) {
      if (!(this_present_checkpointPath && that_present_checkpointPath))
        return false;
      if (!this.checkpointPath.equals(that.checkpointPath))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_blockSizeByte = true;
    boolean that_present_blockSizeByte = true;
    if (this_present_blockSizeByte || that_present_blockSizeByte) {
      if (!(this_present_blockSizeByte && that_present_blockSizeByte))
        return false;
      if (this.blockSizeByte != that.blockSizeByte)
        return false;
    }

    boolean this_present_creationTimeMs = true;
    boolean that_present_creationTimeMs = true;
    if (this_present_creationTimeMs || that_present_creationTimeMs) {
      if (!(this_present_creationTimeMs && that_present_creationTimeMs))
        return false;
      if (this.creationTimeMs != that.creationTimeMs)
        return false;
    }

    boolean this_present_complete = true;
    boolean that_present_complete = true;
    if (this_present_complete || that_present_complete) {
      if (!(this_present_complete && that_present_complete))
        return false;
      if (this.complete != that.complete)
        return false;
    }

    boolean this_present_folder = true;
    boolean that_present_folder = true;
    if (this_present_folder || that_present_folder) {
      if (!(this_present_folder && that_present_folder))
        return false;
      if (this.folder != that.folder)
        return false;
    }

    boolean this_present_inMemory = true;
    boolean that_present_inMemory = true;
    if (this_present_inMemory || that_present_inMemory) {
      if (!(this_present_inMemory && that_present_inMemory))
        return false;
      if (this.inMemory != that.inMemory)
        return false;
    }

    boolean this_present_needPin = true;
    boolean that_present_needPin = true;
    if (this_present_needPin || that_present_needPin) {
      if (!(this_present_needPin && that_present_needPin))
        return false;
      if (this.needPin != that.needPin)
        return false;
    }

    boolean this_present_needCache = true;
    boolean that_present_needCache = true;
    if (this_present_needCache || that_present_needCache) {
      if (!(this_present_needCache && that_present_needCache))
        return false;
      if (this.needCache != that.needCache)
        return false;
    }

    boolean this_present_blockIds = true && this.isSetBlockIds();
    boolean that_present_blockIds = true && that.isSetBlockIds();
    if (this_present_blockIds || that_present_blockIds) {
      if (!(this_present_blockIds && that_present_blockIds))
        return false;
      if (!this.blockIds.equals(that.blockIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ClientFileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ClientFileInfo typedOther = (ClientFileInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckpointPath()).compareTo(typedOther.isSetCheckpointPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckpointPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkpointPath, typedOther.checkpointPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockSizeByte()).compareTo(typedOther.isSetBlockSizeByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockSizeByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSizeByte, typedOther.blockSizeByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationTimeMs()).compareTo(typedOther.isSetCreationTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationTimeMs, typedOther.creationTimeMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComplete()).compareTo(typedOther.isSetComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complete, typedOther.complete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFolder()).compareTo(typedOther.isSetFolder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFolder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folder, typedOther.folder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInMemory()).compareTo(typedOther.isSetInMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inMemory, typedOther.inMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedPin()).compareTo(typedOther.isSetNeedPin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedPin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needPin, typedOther.needPin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedCache()).compareTo(typedOther.isSetNeedCache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedCache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needCache, typedOther.needCache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockIds()).compareTo(typedOther.isSetBlockIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockIds, typedOther.blockIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PATH
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.path = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CHECKPOINT_PATH
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.checkpointPath = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // LENGTH
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.length = iprot.readI64();
            setLengthIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // BLOCK_SIZE_BYTE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.blockSizeByte = iprot.readI64();
            setBlockSizeByteIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CREATION_TIME_MS
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.creationTimeMs = iprot.readI64();
            setCreationTimeMsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // COMPLETE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.complete = iprot.readBool();
            setCompleteIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // FOLDER
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.folder = iprot.readBool();
            setFolderIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // IN_MEMORY
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.inMemory = iprot.readBool();
            setInMemoryIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // NEED_PIN
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.needPin = iprot.readBool();
            setNeedPinIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // NEED_CACHE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.needCache = iprot.readBool();
            setNeedCacheIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // BLOCK_IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
              this.blockIds = new ArrayList<Long>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                long _elem6; // required
                _elem6 = iprot.readI64();
                this.blockIds.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.path != null) {
      oprot.writeFieldBegin(PATH_FIELD_DESC);
      oprot.writeString(this.path);
      oprot.writeFieldEnd();
    }
    if (this.checkpointPath != null) {
      oprot.writeFieldBegin(CHECKPOINT_PATH_FIELD_DESC);
      oprot.writeString(this.checkpointPath);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LENGTH_FIELD_DESC);
    oprot.writeI64(this.length);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BLOCK_SIZE_BYTE_FIELD_DESC);
    oprot.writeI64(this.blockSizeByte);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CREATION_TIME_MS_FIELD_DESC);
    oprot.writeI64(this.creationTimeMs);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COMPLETE_FIELD_DESC);
    oprot.writeBool(this.complete);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FOLDER_FIELD_DESC);
    oprot.writeBool(this.folder);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IN_MEMORY_FIELD_DESC);
    oprot.writeBool(this.inMemory);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NEED_PIN_FIELD_DESC);
    oprot.writeBool(this.needPin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NEED_CACHE_FIELD_DESC);
    oprot.writeBool(this.needCache);
    oprot.writeFieldEnd();
    if (this.blockIds != null) {
      oprot.writeFieldBegin(BLOCK_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, this.blockIds.size()));
        for (long _iter7 : this.blockIds)
        {
          oprot.writeI64(_iter7);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientFileInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkpointPath:");
    if (this.checkpointPath == null) {
      sb.append("null");
    } else {
      sb.append(this.checkpointPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockSizeByte:");
    sb.append(this.blockSizeByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creationTimeMs:");
    sb.append(this.creationTimeMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("complete:");
    sb.append(this.complete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("folder:");
    sb.append(this.folder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inMemory:");
    sb.append(this.inMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("needPin:");
    sb.append(this.needPin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("needCache:");
    sb.append(this.needCache);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockIds:");
    if (this.blockIds == null) {
      sb.append("null");
    } else {
      sb.append(this.blockIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

