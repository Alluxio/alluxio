/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RawColumnDatasetInfo implements org.apache.thrift.TBase<RawColumnDatasetInfo, RawColumnDatasetInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RawColumnDatasetInfo");

  private static final org.apache.thrift.protocol.TField M_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField M_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("mPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField M_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("mColumns", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField M_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mSizeBytes", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField M_NUM_OF_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("mNumOfPartitions", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField M_COLUMN_DATASET_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mColumnDatasetIdList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField M_PARTITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mPartitionList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RawColumnDatasetInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RawColumnDatasetInfoTupleSchemeFactory());
  }

  public int mId; // required
  public String mPath; // required
  public int mColumns; // required
  public long mSizeBytes; // required
  public int mNumOfPartitions; // required
  public List<Integer> mColumnDatasetIdList; // required
  public List<PartitionInfo> mPartitionList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_ID((short)1, "mId"),
    M_PATH((short)2, "mPath"),
    M_COLUMNS((short)3, "mColumns"),
    M_SIZE_BYTES((short)4, "mSizeBytes"),
    M_NUM_OF_PARTITIONS((short)5, "mNumOfPartitions"),
    M_COLUMN_DATASET_ID_LIST((short)6, "mColumnDatasetIdList"),
    M_PARTITION_LIST((short)7, "mPartitionList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_ID
          return M_ID;
        case 2: // M_PATH
          return M_PATH;
        case 3: // M_COLUMNS
          return M_COLUMNS;
        case 4: // M_SIZE_BYTES
          return M_SIZE_BYTES;
        case 5: // M_NUM_OF_PARTITIONS
          return M_NUM_OF_PARTITIONS;
        case 6: // M_COLUMN_DATASET_ID_LIST
          return M_COLUMN_DATASET_ID_LIST;
        case 7: // M_PARTITION_LIST
          return M_PARTITION_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MID_ISSET_ID = 0;
  private static final int __MCOLUMNS_ISSET_ID = 1;
  private static final int __MSIZEBYTES_ISSET_ID = 2;
  private static final int __MNUMOFPARTITIONS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_ID, new org.apache.thrift.meta_data.FieldMetaData("mId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_PATH, new org.apache.thrift.meta_data.FieldMetaData("mPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("mColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mSizeBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.M_NUM_OF_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("mNumOfPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_COLUMN_DATASET_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("mColumnDatasetIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.M_PARTITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("mPartitionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartitionInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RawColumnDatasetInfo.class, metaDataMap);
  }

  public RawColumnDatasetInfo() {
  }

  public RawColumnDatasetInfo(
    int mId,
    String mPath,
    int mColumns,
    long mSizeBytes,
    int mNumOfPartitions,
    List<Integer> mColumnDatasetIdList,
    List<PartitionInfo> mPartitionList)
  {
    this();
    this.mId = mId;
    setMIdIsSet(true);
    this.mPath = mPath;
    this.mColumns = mColumns;
    setMColumnsIsSet(true);
    this.mSizeBytes = mSizeBytes;
    setMSizeBytesIsSet(true);
    this.mNumOfPartitions = mNumOfPartitions;
    setMNumOfPartitionsIsSet(true);
    this.mColumnDatasetIdList = mColumnDatasetIdList;
    this.mPartitionList = mPartitionList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RawColumnDatasetInfo(RawColumnDatasetInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mId = other.mId;
    if (other.isSetMPath()) {
      this.mPath = other.mPath;
    }
    this.mColumns = other.mColumns;
    this.mSizeBytes = other.mSizeBytes;
    this.mNumOfPartitions = other.mNumOfPartitions;
    if (other.isSetMColumnDatasetIdList()) {
      List<Integer> __this__mColumnDatasetIdList = new ArrayList<Integer>();
      for (Integer other_element : other.mColumnDatasetIdList) {
        __this__mColumnDatasetIdList.add(other_element);
      }
      this.mColumnDatasetIdList = __this__mColumnDatasetIdList;
    }
    if (other.isSetMPartitionList()) {
      List<PartitionInfo> __this__mPartitionList = new ArrayList<PartitionInfo>();
      for (PartitionInfo other_element : other.mPartitionList) {
        __this__mPartitionList.add(new PartitionInfo(other_element));
      }
      this.mPartitionList = __this__mPartitionList;
    }
  }

  public RawColumnDatasetInfo deepCopy() {
    return new RawColumnDatasetInfo(this);
  }

  @Override
  public void clear() {
    setMIdIsSet(false);
    this.mId = 0;
    this.mPath = null;
    setMColumnsIsSet(false);
    this.mColumns = 0;
    setMSizeBytesIsSet(false);
    this.mSizeBytes = 0;
    setMNumOfPartitionsIsSet(false);
    this.mNumOfPartitions = 0;
    this.mColumnDatasetIdList = null;
    this.mPartitionList = null;
  }

  public int getMId() {
    return this.mId;
  }

  public RawColumnDatasetInfo setMId(int mId) {
    this.mId = mId;
    setMIdIsSet(true);
    return this;
  }

  public void unsetMId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mId is set (has been assigned a value) and false otherwise */
  public boolean isSetMId() {
    return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public String getMPath() {
    return this.mPath;
  }

  public RawColumnDatasetInfo setMPath(String mPath) {
    this.mPath = mPath;
    return this;
  }

  public void unsetMPath() {
    this.mPath = null;
  }

  /** Returns true if field mPath is set (has been assigned a value) and false otherwise */
  public boolean isSetMPath() {
    return this.mPath != null;
  }

  public void setMPathIsSet(boolean value) {
    if (!value) {
      this.mPath = null;
    }
  }

  public int getMColumns() {
    return this.mColumns;
  }

  public RawColumnDatasetInfo setMColumns(int mColumns) {
    this.mColumns = mColumns;
    setMColumnsIsSet(true);
    return this;
  }

  public void unsetMColumns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MCOLUMNS_ISSET_ID);
  }

  /** Returns true if field mColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetMColumns() {
    return EncodingUtils.testBit(__isset_bitfield, __MCOLUMNS_ISSET_ID);
  }

  public void setMColumnsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MCOLUMNS_ISSET_ID, value);
  }

  public long getMSizeBytes() {
    return this.mSizeBytes;
  }

  public RawColumnDatasetInfo setMSizeBytes(long mSizeBytes) {
    this.mSizeBytes = mSizeBytes;
    setMSizeBytesIsSet(true);
    return this;
  }

  public void unsetMSizeBytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID);
  }

  /** Returns true if field mSizeBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMSizeBytes() {
    return EncodingUtils.testBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID);
  }

  public void setMSizeBytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID, value);
  }

  public int getMNumOfPartitions() {
    return this.mNumOfPartitions;
  }

  public RawColumnDatasetInfo setMNumOfPartitions(int mNumOfPartitions) {
    this.mNumOfPartitions = mNumOfPartitions;
    setMNumOfPartitionsIsSet(true);
    return this;
  }

  public void unsetMNumOfPartitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MNUMOFPARTITIONS_ISSET_ID);
  }

  /** Returns true if field mNumOfPartitions is set (has been assigned a value) and false otherwise */
  public boolean isSetMNumOfPartitions() {
    return EncodingUtils.testBit(__isset_bitfield, __MNUMOFPARTITIONS_ISSET_ID);
  }

  public void setMNumOfPartitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MNUMOFPARTITIONS_ISSET_ID, value);
  }

  public int getMColumnDatasetIdListSize() {
    return (this.mColumnDatasetIdList == null) ? 0 : this.mColumnDatasetIdList.size();
  }

  public java.util.Iterator<Integer> getMColumnDatasetIdListIterator() {
    return (this.mColumnDatasetIdList == null) ? null : this.mColumnDatasetIdList.iterator();
  }

  public void addToMColumnDatasetIdList(int elem) {
    if (this.mColumnDatasetIdList == null) {
      this.mColumnDatasetIdList = new ArrayList<Integer>();
    }
    this.mColumnDatasetIdList.add(elem);
  }

  public List<Integer> getMColumnDatasetIdList() {
    return this.mColumnDatasetIdList;
  }

  public RawColumnDatasetInfo setMColumnDatasetIdList(List<Integer> mColumnDatasetIdList) {
    this.mColumnDatasetIdList = mColumnDatasetIdList;
    return this;
  }

  public void unsetMColumnDatasetIdList() {
    this.mColumnDatasetIdList = null;
  }

  /** Returns true if field mColumnDatasetIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetMColumnDatasetIdList() {
    return this.mColumnDatasetIdList != null;
  }

  public void setMColumnDatasetIdListIsSet(boolean value) {
    if (!value) {
      this.mColumnDatasetIdList = null;
    }
  }

  public int getMPartitionListSize() {
    return (this.mPartitionList == null) ? 0 : this.mPartitionList.size();
  }

  public java.util.Iterator<PartitionInfo> getMPartitionListIterator() {
    return (this.mPartitionList == null) ? null : this.mPartitionList.iterator();
  }

  public void addToMPartitionList(PartitionInfo elem) {
    if (this.mPartitionList == null) {
      this.mPartitionList = new ArrayList<PartitionInfo>();
    }
    this.mPartitionList.add(elem);
  }

  public List<PartitionInfo> getMPartitionList() {
    return this.mPartitionList;
  }

  public RawColumnDatasetInfo setMPartitionList(List<PartitionInfo> mPartitionList) {
    this.mPartitionList = mPartitionList;
    return this;
  }

  public void unsetMPartitionList() {
    this.mPartitionList = null;
  }

  /** Returns true if field mPartitionList is set (has been assigned a value) and false otherwise */
  public boolean isSetMPartitionList() {
    return this.mPartitionList != null;
  }

  public void setMPartitionListIsSet(boolean value) {
    if (!value) {
      this.mPartitionList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_ID:
      if (value == null) {
        unsetMId();
      } else {
        setMId((Integer)value);
      }
      break;

    case M_PATH:
      if (value == null) {
        unsetMPath();
      } else {
        setMPath((String)value);
      }
      break;

    case M_COLUMNS:
      if (value == null) {
        unsetMColumns();
      } else {
        setMColumns((Integer)value);
      }
      break;

    case M_SIZE_BYTES:
      if (value == null) {
        unsetMSizeBytes();
      } else {
        setMSizeBytes((Long)value);
      }
      break;

    case M_NUM_OF_PARTITIONS:
      if (value == null) {
        unsetMNumOfPartitions();
      } else {
        setMNumOfPartitions((Integer)value);
      }
      break;

    case M_COLUMN_DATASET_ID_LIST:
      if (value == null) {
        unsetMColumnDatasetIdList();
      } else {
        setMColumnDatasetIdList((List<Integer>)value);
      }
      break;

    case M_PARTITION_LIST:
      if (value == null) {
        unsetMPartitionList();
      } else {
        setMPartitionList((List<PartitionInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_ID:
      return Integer.valueOf(getMId());

    case M_PATH:
      return getMPath();

    case M_COLUMNS:
      return Integer.valueOf(getMColumns());

    case M_SIZE_BYTES:
      return Long.valueOf(getMSizeBytes());

    case M_NUM_OF_PARTITIONS:
      return Integer.valueOf(getMNumOfPartitions());

    case M_COLUMN_DATASET_ID_LIST:
      return getMColumnDatasetIdList();

    case M_PARTITION_LIST:
      return getMPartitionList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_ID:
      return isSetMId();
    case M_PATH:
      return isSetMPath();
    case M_COLUMNS:
      return isSetMColumns();
    case M_SIZE_BYTES:
      return isSetMSizeBytes();
    case M_NUM_OF_PARTITIONS:
      return isSetMNumOfPartitions();
    case M_COLUMN_DATASET_ID_LIST:
      return isSetMColumnDatasetIdList();
    case M_PARTITION_LIST:
      return isSetMPartitionList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RawColumnDatasetInfo)
      return this.equals((RawColumnDatasetInfo)that);
    return false;
  }

  public boolean equals(RawColumnDatasetInfo that) {
    if (that == null)
      return false;

    boolean this_present_mId = true;
    boolean that_present_mId = true;
    if (this_present_mId || that_present_mId) {
      if (!(this_present_mId && that_present_mId))
        return false;
      if (this.mId != that.mId)
        return false;
    }

    boolean this_present_mPath = true && this.isSetMPath();
    boolean that_present_mPath = true && that.isSetMPath();
    if (this_present_mPath || that_present_mPath) {
      if (!(this_present_mPath && that_present_mPath))
        return false;
      if (!this.mPath.equals(that.mPath))
        return false;
    }

    boolean this_present_mColumns = true;
    boolean that_present_mColumns = true;
    if (this_present_mColumns || that_present_mColumns) {
      if (!(this_present_mColumns && that_present_mColumns))
        return false;
      if (this.mColumns != that.mColumns)
        return false;
    }

    boolean this_present_mSizeBytes = true;
    boolean that_present_mSizeBytes = true;
    if (this_present_mSizeBytes || that_present_mSizeBytes) {
      if (!(this_present_mSizeBytes && that_present_mSizeBytes))
        return false;
      if (this.mSizeBytes != that.mSizeBytes)
        return false;
    }

    boolean this_present_mNumOfPartitions = true;
    boolean that_present_mNumOfPartitions = true;
    if (this_present_mNumOfPartitions || that_present_mNumOfPartitions) {
      if (!(this_present_mNumOfPartitions && that_present_mNumOfPartitions))
        return false;
      if (this.mNumOfPartitions != that.mNumOfPartitions)
        return false;
    }

    boolean this_present_mColumnDatasetIdList = true && this.isSetMColumnDatasetIdList();
    boolean that_present_mColumnDatasetIdList = true && that.isSetMColumnDatasetIdList();
    if (this_present_mColumnDatasetIdList || that_present_mColumnDatasetIdList) {
      if (!(this_present_mColumnDatasetIdList && that_present_mColumnDatasetIdList))
        return false;
      if (!this.mColumnDatasetIdList.equals(that.mColumnDatasetIdList))
        return false;
    }

    boolean this_present_mPartitionList = true && this.isSetMPartitionList();
    boolean that_present_mPartitionList = true && that.isSetMPartitionList();
    if (this_present_mPartitionList || that_present_mPartitionList) {
      if (!(this_present_mPartitionList && that_present_mPartitionList))
        return false;
      if (!this.mPartitionList.equals(that.mPartitionList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RawColumnDatasetInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RawColumnDatasetInfo typedOther = (RawColumnDatasetInfo)other;

    lastComparison = Boolean.valueOf(isSetMId()).compareTo(typedOther.isSetMId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mId, typedOther.mId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMPath()).compareTo(typedOther.isSetMPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mPath, typedOther.mPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMColumns()).compareTo(typedOther.isSetMColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mColumns, typedOther.mColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMSizeBytes()).compareTo(typedOther.isSetMSizeBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMSizeBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mSizeBytes, typedOther.mSizeBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMNumOfPartitions()).compareTo(typedOther.isSetMNumOfPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMNumOfPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mNumOfPartitions, typedOther.mNumOfPartitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMColumnDatasetIdList()).compareTo(typedOther.isSetMColumnDatasetIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMColumnDatasetIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mColumnDatasetIdList, typedOther.mColumnDatasetIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMPartitionList()).compareTo(typedOther.isSetMPartitionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMPartitionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mPartitionList, typedOther.mPartitionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RawColumnDatasetInfo(");
    boolean first = true;

    sb.append("mId:");
    sb.append(this.mId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mPath:");
    if (this.mPath == null) {
      sb.append("null");
    } else {
      sb.append(this.mPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mColumns:");
    sb.append(this.mColumns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mSizeBytes:");
    sb.append(this.mSizeBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mNumOfPartitions:");
    sb.append(this.mNumOfPartitions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mColumnDatasetIdList:");
    if (this.mColumnDatasetIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.mColumnDatasetIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mPartitionList:");
    if (this.mPartitionList == null) {
      sb.append("null");
    } else {
      sb.append(this.mPartitionList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RawColumnDatasetInfoStandardSchemeFactory implements SchemeFactory {
    public RawColumnDatasetInfoStandardScheme getScheme() {
      return new RawColumnDatasetInfoStandardScheme();
    }
  }

  private static class RawColumnDatasetInfoStandardScheme extends StandardScheme<RawColumnDatasetInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RawColumnDatasetInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mId = iprot.readI32();
              struct.setMIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mPath = iprot.readString();
              struct.setMPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mColumns = iprot.readI32();
              struct.setMColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // M_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mSizeBytes = iprot.readI64();
              struct.setMSizeBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // M_NUM_OF_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mNumOfPartitions = iprot.readI32();
              struct.setMNumOfPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // M_COLUMN_DATASET_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.mColumnDatasetIdList = new ArrayList<Integer>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  int _elem20; // required
                  _elem20 = iprot.readI32();
                  struct.mColumnDatasetIdList.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setMColumnDatasetIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // M_PARTITION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.mPartitionList = new ArrayList<PartitionInfo>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  PartitionInfo _elem23; // required
                  _elem23 = new PartitionInfo();
                  _elem23.read(iprot);
                  struct.mPartitionList.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setMPartitionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RawColumnDatasetInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(M_ID_FIELD_DESC);
      oprot.writeI32(struct.mId);
      oprot.writeFieldEnd();
      if (struct.mPath != null) {
        oprot.writeFieldBegin(M_PATH_FIELD_DESC);
        oprot.writeString(struct.mPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(M_COLUMNS_FIELD_DESC);
      oprot.writeI32(struct.mColumns);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_SIZE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.mSizeBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_NUM_OF_PARTITIONS_FIELD_DESC);
      oprot.writeI32(struct.mNumOfPartitions);
      oprot.writeFieldEnd();
      if (struct.mColumnDatasetIdList != null) {
        oprot.writeFieldBegin(M_COLUMN_DATASET_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mColumnDatasetIdList.size()));
          for (int _iter24 : struct.mColumnDatasetIdList)
          {
            oprot.writeI32(_iter24);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mPartitionList != null) {
        oprot.writeFieldBegin(M_PARTITION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mPartitionList.size()));
          for (PartitionInfo _iter25 : struct.mPartitionList)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RawColumnDatasetInfoTupleSchemeFactory implements SchemeFactory {
    public RawColumnDatasetInfoTupleScheme getScheme() {
      return new RawColumnDatasetInfoTupleScheme();
    }
  }

  private static class RawColumnDatasetInfoTupleScheme extends TupleScheme<RawColumnDatasetInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RawColumnDatasetInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMId()) {
        optionals.set(0);
      }
      if (struct.isSetMPath()) {
        optionals.set(1);
      }
      if (struct.isSetMColumns()) {
        optionals.set(2);
      }
      if (struct.isSetMSizeBytes()) {
        optionals.set(3);
      }
      if (struct.isSetMNumOfPartitions()) {
        optionals.set(4);
      }
      if (struct.isSetMColumnDatasetIdList()) {
        optionals.set(5);
      }
      if (struct.isSetMPartitionList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMId()) {
        oprot.writeI32(struct.mId);
      }
      if (struct.isSetMPath()) {
        oprot.writeString(struct.mPath);
      }
      if (struct.isSetMColumns()) {
        oprot.writeI32(struct.mColumns);
      }
      if (struct.isSetMSizeBytes()) {
        oprot.writeI64(struct.mSizeBytes);
      }
      if (struct.isSetMNumOfPartitions()) {
        oprot.writeI32(struct.mNumOfPartitions);
      }
      if (struct.isSetMColumnDatasetIdList()) {
        {
          oprot.writeI32(struct.mColumnDatasetIdList.size());
          for (int _iter26 : struct.mColumnDatasetIdList)
          {
            oprot.writeI32(_iter26);
          }
        }
      }
      if (struct.isSetMPartitionList()) {
        {
          oprot.writeI32(struct.mPartitionList.size());
          for (PartitionInfo _iter27 : struct.mPartitionList)
          {
            _iter27.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RawColumnDatasetInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.mId = iprot.readI32();
        struct.setMIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mPath = iprot.readString();
        struct.setMPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mColumns = iprot.readI32();
        struct.setMColumnsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mSizeBytes = iprot.readI64();
        struct.setMSizeBytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mNumOfPartitions = iprot.readI32();
        struct.setMNumOfPartitionsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mColumnDatasetIdList = new ArrayList<Integer>(_list28.size);
          for (int _i29 = 0; _i29 < _list28.size; ++_i29)
          {
            int _elem30; // required
            _elem30 = iprot.readI32();
            struct.mColumnDatasetIdList.add(_elem30);
          }
        }
        struct.setMColumnDatasetIdListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mPartitionList = new ArrayList<PartitionInfo>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            PartitionInfo _elem33; // required
            _elem33 = new PartitionInfo();
            _elem33.read(iprot);
            struct.mPartitionList.add(_elem33);
          }
        }
        struct.setMPartitionListIsSet(true);
      }
    }
  }

}

