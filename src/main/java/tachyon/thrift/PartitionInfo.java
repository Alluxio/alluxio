/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PartitionInfo implements org.apache.thrift.TBase<PartitionInfo, PartitionInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartitionInfo");

  private static final org.apache.thrift.protocol.TField M_DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mDatasetId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField M_PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mPartitionId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField M_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mSizeBytes", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField M_LOCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("mLocations", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField M_HAS_CHECKPOINTED_FIELD_DESC = new org.apache.thrift.protocol.TField("mHasCheckpointed", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField M_CHECKPOINT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("mCheckpointPath", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartitionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartitionInfoTupleSchemeFactory());
  }

  public int mDatasetId; // required
  public int mPartitionId; // required
  public int mSizeBytes; // required
  public Map<Long,NetAddress> mLocations; // required
  public boolean mHasCheckpointed; // required
  public String mCheckpointPath; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_DATASET_ID((short)1, "mDatasetId"),
    M_PARTITION_ID((short)2, "mPartitionId"),
    M_SIZE_BYTES((short)3, "mSizeBytes"),
    M_LOCATIONS((short)4, "mLocations"),
    M_HAS_CHECKPOINTED((short)5, "mHasCheckpointed"),
    M_CHECKPOINT_PATH((short)6, "mCheckpointPath");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_DATASET_ID
          return M_DATASET_ID;
        case 2: // M_PARTITION_ID
          return M_PARTITION_ID;
        case 3: // M_SIZE_BYTES
          return M_SIZE_BYTES;
        case 4: // M_LOCATIONS
          return M_LOCATIONS;
        case 5: // M_HAS_CHECKPOINTED
          return M_HAS_CHECKPOINTED;
        case 6: // M_CHECKPOINT_PATH
          return M_CHECKPOINT_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MDATASETID_ISSET_ID = 0;
  private static final int __MPARTITIONID_ISSET_ID = 1;
  private static final int __MSIZEBYTES_ISSET_ID = 2;
  private static final int __MHASCHECKPOINTED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("mDatasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("mPartitionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mSizeBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_LOCATIONS, new org.apache.thrift.meta_data.FieldMetaData("mLocations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class))));
    tmpMap.put(_Fields.M_HAS_CHECKPOINTED, new org.apache.thrift.meta_data.FieldMetaData("mHasCheckpointed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.M_CHECKPOINT_PATH, new org.apache.thrift.meta_data.FieldMetaData("mCheckpointPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartitionInfo.class, metaDataMap);
  }

  public PartitionInfo() {
  }

  public PartitionInfo(
    int mDatasetId,
    int mPartitionId,
    int mSizeBytes,
    Map<Long,NetAddress> mLocations,
    boolean mHasCheckpointed,
    String mCheckpointPath)
  {
    this();
    this.mDatasetId = mDatasetId;
    setMDatasetIdIsSet(true);
    this.mPartitionId = mPartitionId;
    setMPartitionIdIsSet(true);
    this.mSizeBytes = mSizeBytes;
    setMSizeBytesIsSet(true);
    this.mLocations = mLocations;
    this.mHasCheckpointed = mHasCheckpointed;
    setMHasCheckpointedIsSet(true);
    this.mCheckpointPath = mCheckpointPath;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartitionInfo(PartitionInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mDatasetId = other.mDatasetId;
    this.mPartitionId = other.mPartitionId;
    this.mSizeBytes = other.mSizeBytes;
    if (other.isSetMLocations()) {
      Map<Long,NetAddress> __this__mLocations = new HashMap<Long,NetAddress>();
      for (Map.Entry<Long, NetAddress> other_element : other.mLocations.entrySet()) {

        Long other_element_key = other_element.getKey();
        NetAddress other_element_value = other_element.getValue();

        Long __this__mLocations_copy_key = other_element_key;

        NetAddress __this__mLocations_copy_value = new NetAddress(other_element_value);

        __this__mLocations.put(__this__mLocations_copy_key, __this__mLocations_copy_value);
      }
      this.mLocations = __this__mLocations;
    }
    this.mHasCheckpointed = other.mHasCheckpointed;
    if (other.isSetMCheckpointPath()) {
      this.mCheckpointPath = other.mCheckpointPath;
    }
  }

  public PartitionInfo deepCopy() {
    return new PartitionInfo(this);
  }

  @Override
  public void clear() {
    setMDatasetIdIsSet(false);
    this.mDatasetId = 0;
    setMPartitionIdIsSet(false);
    this.mPartitionId = 0;
    setMSizeBytesIsSet(false);
    this.mSizeBytes = 0;
    this.mLocations = null;
    setMHasCheckpointedIsSet(false);
    this.mHasCheckpointed = false;
    this.mCheckpointPath = null;
  }

  public int getMDatasetId() {
    return this.mDatasetId;
  }

  public PartitionInfo setMDatasetId(int mDatasetId) {
    this.mDatasetId = mDatasetId;
    setMDatasetIdIsSet(true);
    return this;
  }

  public void unsetMDatasetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MDATASETID_ISSET_ID);
  }

  /** Returns true if field mDatasetId is set (has been assigned a value) and false otherwise */
  public boolean isSetMDatasetId() {
    return EncodingUtils.testBit(__isset_bitfield, __MDATASETID_ISSET_ID);
  }

  public void setMDatasetIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MDATASETID_ISSET_ID, value);
  }

  public int getMPartitionId() {
    return this.mPartitionId;
  }

  public PartitionInfo setMPartitionId(int mPartitionId) {
    this.mPartitionId = mPartitionId;
    setMPartitionIdIsSet(true);
    return this;
  }

  public void unsetMPartitionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MPARTITIONID_ISSET_ID);
  }

  /** Returns true if field mPartitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetMPartitionId() {
    return EncodingUtils.testBit(__isset_bitfield, __MPARTITIONID_ISSET_ID);
  }

  public void setMPartitionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MPARTITIONID_ISSET_ID, value);
  }

  public int getMSizeBytes() {
    return this.mSizeBytes;
  }

  public PartitionInfo setMSizeBytes(int mSizeBytes) {
    this.mSizeBytes = mSizeBytes;
    setMSizeBytesIsSet(true);
    return this;
  }

  public void unsetMSizeBytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID);
  }

  /** Returns true if field mSizeBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMSizeBytes() {
    return EncodingUtils.testBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID);
  }

  public void setMSizeBytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID, value);
  }

  public int getMLocationsSize() {
    return (this.mLocations == null) ? 0 : this.mLocations.size();
  }

  public void putToMLocations(long key, NetAddress val) {
    if (this.mLocations == null) {
      this.mLocations = new HashMap<Long,NetAddress>();
    }
    this.mLocations.put(key, val);
  }

  public Map<Long,NetAddress> getMLocations() {
    return this.mLocations;
  }

  public PartitionInfo setMLocations(Map<Long,NetAddress> mLocations) {
    this.mLocations = mLocations;
    return this;
  }

  public void unsetMLocations() {
    this.mLocations = null;
  }

  /** Returns true if field mLocations is set (has been assigned a value) and false otherwise */
  public boolean isSetMLocations() {
    return this.mLocations != null;
  }

  public void setMLocationsIsSet(boolean value) {
    if (!value) {
      this.mLocations = null;
    }
  }

  public boolean isMHasCheckpointed() {
    return this.mHasCheckpointed;
  }

  public PartitionInfo setMHasCheckpointed(boolean mHasCheckpointed) {
    this.mHasCheckpointed = mHasCheckpointed;
    setMHasCheckpointedIsSet(true);
    return this;
  }

  public void unsetMHasCheckpointed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MHASCHECKPOINTED_ISSET_ID);
  }

  /** Returns true if field mHasCheckpointed is set (has been assigned a value) and false otherwise */
  public boolean isSetMHasCheckpointed() {
    return EncodingUtils.testBit(__isset_bitfield, __MHASCHECKPOINTED_ISSET_ID);
  }

  public void setMHasCheckpointedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MHASCHECKPOINTED_ISSET_ID, value);
  }

  public String getMCheckpointPath() {
    return this.mCheckpointPath;
  }

  public PartitionInfo setMCheckpointPath(String mCheckpointPath) {
    this.mCheckpointPath = mCheckpointPath;
    return this;
  }

  public void unsetMCheckpointPath() {
    this.mCheckpointPath = null;
  }

  /** Returns true if field mCheckpointPath is set (has been assigned a value) and false otherwise */
  public boolean isSetMCheckpointPath() {
    return this.mCheckpointPath != null;
  }

  public void setMCheckpointPathIsSet(boolean value) {
    if (!value) {
      this.mCheckpointPath = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_DATASET_ID:
      if (value == null) {
        unsetMDatasetId();
      } else {
        setMDatasetId((Integer)value);
      }
      break;

    case M_PARTITION_ID:
      if (value == null) {
        unsetMPartitionId();
      } else {
        setMPartitionId((Integer)value);
      }
      break;

    case M_SIZE_BYTES:
      if (value == null) {
        unsetMSizeBytes();
      } else {
        setMSizeBytes((Integer)value);
      }
      break;

    case M_LOCATIONS:
      if (value == null) {
        unsetMLocations();
      } else {
        setMLocations((Map<Long,NetAddress>)value);
      }
      break;

    case M_HAS_CHECKPOINTED:
      if (value == null) {
        unsetMHasCheckpointed();
      } else {
        setMHasCheckpointed((Boolean)value);
      }
      break;

    case M_CHECKPOINT_PATH:
      if (value == null) {
        unsetMCheckpointPath();
      } else {
        setMCheckpointPath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_DATASET_ID:
      return Integer.valueOf(getMDatasetId());

    case M_PARTITION_ID:
      return Integer.valueOf(getMPartitionId());

    case M_SIZE_BYTES:
      return Integer.valueOf(getMSizeBytes());

    case M_LOCATIONS:
      return getMLocations();

    case M_HAS_CHECKPOINTED:
      return Boolean.valueOf(isMHasCheckpointed());

    case M_CHECKPOINT_PATH:
      return getMCheckpointPath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_DATASET_ID:
      return isSetMDatasetId();
    case M_PARTITION_ID:
      return isSetMPartitionId();
    case M_SIZE_BYTES:
      return isSetMSizeBytes();
    case M_LOCATIONS:
      return isSetMLocations();
    case M_HAS_CHECKPOINTED:
      return isSetMHasCheckpointed();
    case M_CHECKPOINT_PATH:
      return isSetMCheckpointPath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartitionInfo)
      return this.equals((PartitionInfo)that);
    return false;
  }

  public boolean equals(PartitionInfo that) {
    if (that == null)
      return false;

    boolean this_present_mDatasetId = true;
    boolean that_present_mDatasetId = true;
    if (this_present_mDatasetId || that_present_mDatasetId) {
      if (!(this_present_mDatasetId && that_present_mDatasetId))
        return false;
      if (this.mDatasetId != that.mDatasetId)
        return false;
    }

    boolean this_present_mPartitionId = true;
    boolean that_present_mPartitionId = true;
    if (this_present_mPartitionId || that_present_mPartitionId) {
      if (!(this_present_mPartitionId && that_present_mPartitionId))
        return false;
      if (this.mPartitionId != that.mPartitionId)
        return false;
    }

    boolean this_present_mSizeBytes = true;
    boolean that_present_mSizeBytes = true;
    if (this_present_mSizeBytes || that_present_mSizeBytes) {
      if (!(this_present_mSizeBytes && that_present_mSizeBytes))
        return false;
      if (this.mSizeBytes != that.mSizeBytes)
        return false;
    }

    boolean this_present_mLocations = true && this.isSetMLocations();
    boolean that_present_mLocations = true && that.isSetMLocations();
    if (this_present_mLocations || that_present_mLocations) {
      if (!(this_present_mLocations && that_present_mLocations))
        return false;
      if (!this.mLocations.equals(that.mLocations))
        return false;
    }

    boolean this_present_mHasCheckpointed = true;
    boolean that_present_mHasCheckpointed = true;
    if (this_present_mHasCheckpointed || that_present_mHasCheckpointed) {
      if (!(this_present_mHasCheckpointed && that_present_mHasCheckpointed))
        return false;
      if (this.mHasCheckpointed != that.mHasCheckpointed)
        return false;
    }

    boolean this_present_mCheckpointPath = true && this.isSetMCheckpointPath();
    boolean that_present_mCheckpointPath = true && that.isSetMCheckpointPath();
    if (this_present_mCheckpointPath || that_present_mCheckpointPath) {
      if (!(this_present_mCheckpointPath && that_present_mCheckpointPath))
        return false;
      if (!this.mCheckpointPath.equals(that.mCheckpointPath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PartitionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PartitionInfo typedOther = (PartitionInfo)other;

    lastComparison = Boolean.valueOf(isSetMDatasetId()).compareTo(typedOther.isSetMDatasetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMDatasetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mDatasetId, typedOther.mDatasetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMPartitionId()).compareTo(typedOther.isSetMPartitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMPartitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mPartitionId, typedOther.mPartitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMSizeBytes()).compareTo(typedOther.isSetMSizeBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMSizeBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mSizeBytes, typedOther.mSizeBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMLocations()).compareTo(typedOther.isSetMLocations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMLocations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mLocations, typedOther.mLocations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMHasCheckpointed()).compareTo(typedOther.isSetMHasCheckpointed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMHasCheckpointed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mHasCheckpointed, typedOther.mHasCheckpointed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMCheckpointPath()).compareTo(typedOther.isSetMCheckpointPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMCheckpointPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mCheckpointPath, typedOther.mCheckpointPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartitionInfo(");
    boolean first = true;

    sb.append("mDatasetId:");
    sb.append(this.mDatasetId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mPartitionId:");
    sb.append(this.mPartitionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mSizeBytes:");
    sb.append(this.mSizeBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mLocations:");
    if (this.mLocations == null) {
      sb.append("null");
    } else {
      sb.append(this.mLocations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mHasCheckpointed:");
    sb.append(this.mHasCheckpointed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mCheckpointPath:");
    if (this.mCheckpointPath == null) {
      sb.append("null");
    } else {
      sb.append(this.mCheckpointPath);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartitionInfoStandardSchemeFactory implements SchemeFactory {
    public PartitionInfoStandardScheme getScheme() {
      return new PartitionInfoStandardScheme();
    }
  }

  private static class PartitionInfoStandardScheme extends StandardScheme<PartitionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartitionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_DATASET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mDatasetId = iprot.readI32();
              struct.setMDatasetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mPartitionId = iprot.readI32();
              struct.setMPartitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mSizeBytes = iprot.readI32();
              struct.setMSizeBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // M_LOCATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.mLocations = new HashMap<Long,NetAddress>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  long _key2; // required
                  NetAddress _val3; // required
                  _key2 = iprot.readI64();
                  _val3 = new NetAddress();
                  _val3.read(iprot);
                  struct.mLocations.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setMLocationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // M_HAS_CHECKPOINTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mHasCheckpointed = iprot.readBool();
              struct.setMHasCheckpointedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // M_CHECKPOINT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mCheckpointPath = iprot.readString();
              struct.setMCheckpointPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartitionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(M_DATASET_ID_FIELD_DESC);
      oprot.writeI32(struct.mDatasetId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_PARTITION_ID_FIELD_DESC);
      oprot.writeI32(struct.mPartitionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_SIZE_BYTES_FIELD_DESC);
      oprot.writeI32(struct.mSizeBytes);
      oprot.writeFieldEnd();
      if (struct.mLocations != null) {
        oprot.writeFieldBegin(M_LOCATIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.mLocations.size()));
          for (Map.Entry<Long, NetAddress> _iter4 : struct.mLocations.entrySet())
          {
            oprot.writeI64(_iter4.getKey());
            _iter4.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(M_HAS_CHECKPOINTED_FIELD_DESC);
      oprot.writeBool(struct.mHasCheckpointed);
      oprot.writeFieldEnd();
      if (struct.mCheckpointPath != null) {
        oprot.writeFieldBegin(M_CHECKPOINT_PATH_FIELD_DESC);
        oprot.writeString(struct.mCheckpointPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartitionInfoTupleSchemeFactory implements SchemeFactory {
    public PartitionInfoTupleScheme getScheme() {
      return new PartitionInfoTupleScheme();
    }
  }

  private static class PartitionInfoTupleScheme extends TupleScheme<PartitionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartitionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMDatasetId()) {
        optionals.set(0);
      }
      if (struct.isSetMPartitionId()) {
        optionals.set(1);
      }
      if (struct.isSetMSizeBytes()) {
        optionals.set(2);
      }
      if (struct.isSetMLocations()) {
        optionals.set(3);
      }
      if (struct.isSetMHasCheckpointed()) {
        optionals.set(4);
      }
      if (struct.isSetMCheckpointPath()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMDatasetId()) {
        oprot.writeI32(struct.mDatasetId);
      }
      if (struct.isSetMPartitionId()) {
        oprot.writeI32(struct.mPartitionId);
      }
      if (struct.isSetMSizeBytes()) {
        oprot.writeI32(struct.mSizeBytes);
      }
      if (struct.isSetMLocations()) {
        {
          oprot.writeI32(struct.mLocations.size());
          for (Map.Entry<Long, NetAddress> _iter5 : struct.mLocations.entrySet())
          {
            oprot.writeI64(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetMHasCheckpointed()) {
        oprot.writeBool(struct.mHasCheckpointed);
      }
      if (struct.isSetMCheckpointPath()) {
        oprot.writeString(struct.mCheckpointPath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartitionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.mDatasetId = iprot.readI32();
        struct.setMDatasetIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mPartitionId = iprot.readI32();
        struct.setMPartitionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mSizeBytes = iprot.readI32();
        struct.setMSizeBytesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mLocations = new HashMap<Long,NetAddress>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            long _key8; // required
            NetAddress _val9; // required
            _key8 = iprot.readI64();
            _val9 = new NetAddress();
            _val9.read(iprot);
            struct.mLocations.put(_key8, _val9);
          }
        }
        struct.setMLocationsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mHasCheckpointed = iprot.readBool();
        struct.setMHasCheckpointedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mCheckpointPath = iprot.readString();
        struct.setMCheckpointPathIsSet(true);
      }
    }
  }

}

