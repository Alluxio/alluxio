/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package tachyon.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CoordinatorService {

  public interface Iface {

    /**
     * Get the max transaction id of one master.
     * @return max transaction of the master
     */
    public long getMaxTransactionId() throws org.apache.thrift.TException;

    /**
     * Send transactions.
     * @return max transaction id.
     * 
     * @param leftTransactionId
     * @param rightTransactionId
     * @param transactions
     */
    public long sendNewTransactions(long leftTransactionId, long rightTransactionId, List<ByteBuffer> transactions) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getMaxTransactionId(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMaxTransactionId_call> resultHandler) throws org.apache.thrift.TException;

    public void sendNewTransactions(long leftTransactionId, long rightTransactionId, List<ByteBuffer> transactions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendNewTransactions_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getMaxTransactionId() throws org.apache.thrift.TException
    {
      send_getMaxTransactionId();
      return recv_getMaxTransactionId();
    }

    public void send_getMaxTransactionId() throws org.apache.thrift.TException
    {
      getMaxTransactionId_args args = new getMaxTransactionId_args();
      sendBase("getMaxTransactionId", args);
    }

    public long recv_getMaxTransactionId() throws org.apache.thrift.TException
    {
      getMaxTransactionId_result result = new getMaxTransactionId_result();
      receiveBase(result, "getMaxTransactionId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMaxTransactionId failed: unknown result");
    }

    public long sendNewTransactions(long leftTransactionId, long rightTransactionId, List<ByteBuffer> transactions) throws org.apache.thrift.TException
    {
      send_sendNewTransactions(leftTransactionId, rightTransactionId, transactions);
      return recv_sendNewTransactions();
    }

    public void send_sendNewTransactions(long leftTransactionId, long rightTransactionId, List<ByteBuffer> transactions) throws org.apache.thrift.TException
    {
      sendNewTransactions_args args = new sendNewTransactions_args();
      args.setLeftTransactionId(leftTransactionId);
      args.setRightTransactionId(rightTransactionId);
      args.setTransactions(transactions);
      sendBase("sendNewTransactions", args);
    }

    public long recv_sendNewTransactions() throws org.apache.thrift.TException
    {
      sendNewTransactions_result result = new sendNewTransactions_result();
      receiveBase(result, "sendNewTransactions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendNewTransactions failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getMaxTransactionId(org.apache.thrift.async.AsyncMethodCallback<getMaxTransactionId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMaxTransactionId_call method_call = new getMaxTransactionId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMaxTransactionId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getMaxTransactionId_call(org.apache.thrift.async.AsyncMethodCallback<getMaxTransactionId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMaxTransactionId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMaxTransactionId_args args = new getMaxTransactionId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMaxTransactionId();
      }
    }

    public void sendNewTransactions(long leftTransactionId, long rightTransactionId, List<ByteBuffer> transactions, org.apache.thrift.async.AsyncMethodCallback<sendNewTransactions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendNewTransactions_call method_call = new sendNewTransactions_call(leftTransactionId, rightTransactionId, transactions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendNewTransactions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long leftTransactionId;
      private long rightTransactionId;
      private List<ByteBuffer> transactions;
      public sendNewTransactions_call(long leftTransactionId, long rightTransactionId, List<ByteBuffer> transactions, org.apache.thrift.async.AsyncMethodCallback<sendNewTransactions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.leftTransactionId = leftTransactionId;
        this.rightTransactionId = rightTransactionId;
        this.transactions = transactions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendNewTransactions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendNewTransactions_args args = new sendNewTransactions_args();
        args.setLeftTransactionId(leftTransactionId);
        args.setRightTransactionId(rightTransactionId);
        args.setTransactions(transactions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendNewTransactions();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getMaxTransactionId", new getMaxTransactionId());
      processMap.put("sendNewTransactions", new sendNewTransactions());
      return processMap;
    }

    private static class getMaxTransactionId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMaxTransactionId_args> {
      public getMaxTransactionId() {
        super("getMaxTransactionId");
      }

      protected getMaxTransactionId_args getEmptyArgsInstance() {
        return new getMaxTransactionId_args();
      }

      protected getMaxTransactionId_result getResult(I iface, getMaxTransactionId_args args) throws org.apache.thrift.TException {
        getMaxTransactionId_result result = new getMaxTransactionId_result();
        result.success = iface.getMaxTransactionId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class sendNewTransactions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendNewTransactions_args> {
      public sendNewTransactions() {
        super("sendNewTransactions");
      }

      protected sendNewTransactions_args getEmptyArgsInstance() {
        return new sendNewTransactions_args();
      }

      protected sendNewTransactions_result getResult(I iface, sendNewTransactions_args args) throws org.apache.thrift.TException {
        sendNewTransactions_result result = new sendNewTransactions_result();
        result.success = iface.sendNewTransactions(args.leftTransactionId, args.rightTransactionId, args.transactions);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class getMaxTransactionId_args implements org.apache.thrift.TBase<getMaxTransactionId_args, getMaxTransactionId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxTransactionId_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxTransactionId_args.class, metaDataMap);
    }

    public getMaxTransactionId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxTransactionId_args(getMaxTransactionId_args other) {
    }

    public getMaxTransactionId_args deepCopy() {
      return new getMaxTransactionId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxTransactionId_args)
        return this.equals((getMaxTransactionId_args)that);
      return false;
    }

    public boolean equals(getMaxTransactionId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMaxTransactionId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMaxTransactionId_args typedOther = (getMaxTransactionId_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxTransactionId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getMaxTransactionId_result implements org.apache.thrift.TBase<getMaxTransactionId_result, getMaxTransactionId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMaxTransactionId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMaxTransactionId_result.class, metaDataMap);
    }

    public getMaxTransactionId_result() {
    }

    public getMaxTransactionId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMaxTransactionId_result(getMaxTransactionId_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public getMaxTransactionId_result deepCopy() {
      return new getMaxTransactionId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getMaxTransactionId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMaxTransactionId_result)
        return this.equals((getMaxTransactionId_result)that);
      return false;
    }

    public boolean equals(getMaxTransactionId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMaxTransactionId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMaxTransactionId_result typedOther = (getMaxTransactionId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMaxTransactionId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class sendNewTransactions_args implements org.apache.thrift.TBase<sendNewTransactions_args, sendNewTransactions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendNewTransactions_args");

    private static final org.apache.thrift.protocol.TField LEFT_TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leftTransactionId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField RIGHT_TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rightTransactionId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TRANSACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("transactions", org.apache.thrift.protocol.TType.LIST, (short)3);

    public long leftTransactionId; // required
    public long rightTransactionId; // required
    public List<ByteBuffer> transactions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LEFT_TRANSACTION_ID((short)1, "leftTransactionId"),
      RIGHT_TRANSACTION_ID((short)2, "rightTransactionId"),
      TRANSACTIONS((short)3, "transactions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LEFT_TRANSACTION_ID
            return LEFT_TRANSACTION_ID;
          case 2: // RIGHT_TRANSACTION_ID
            return RIGHT_TRANSACTION_ID;
          case 3: // TRANSACTIONS
            return TRANSACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LEFTTRANSACTIONID_ISSET_ID = 0;
    private static final int __RIGHTTRANSACTIONID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LEFT_TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("leftTransactionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RIGHT_TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("rightTransactionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TRANSACTIONS, new org.apache.thrift.meta_data.FieldMetaData("transactions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendNewTransactions_args.class, metaDataMap);
    }

    public sendNewTransactions_args() {
    }

    public sendNewTransactions_args(
      long leftTransactionId,
      long rightTransactionId,
      List<ByteBuffer> transactions)
    {
      this();
      this.leftTransactionId = leftTransactionId;
      setLeftTransactionIdIsSet(true);
      this.rightTransactionId = rightTransactionId;
      setRightTransactionIdIsSet(true);
      this.transactions = transactions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendNewTransactions_args(sendNewTransactions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.leftTransactionId = other.leftTransactionId;
      this.rightTransactionId = other.rightTransactionId;
      if (other.isSetTransactions()) {
        List<ByteBuffer> __this__transactions = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.transactions) {
          ByteBuffer temp_binary_element = org.apache.thrift.TBaseHelper.copyBinary(other_element);
;
          __this__transactions.add(temp_binary_element);
        }
        this.transactions = __this__transactions;
      }
    }

    public sendNewTransactions_args deepCopy() {
      return new sendNewTransactions_args(this);
    }

    @Override
    public void clear() {
      setLeftTransactionIdIsSet(false);
      this.leftTransactionId = 0;
      setRightTransactionIdIsSet(false);
      this.rightTransactionId = 0;
      this.transactions = null;
    }

    public long getLeftTransactionId() {
      return this.leftTransactionId;
    }

    public sendNewTransactions_args setLeftTransactionId(long leftTransactionId) {
      this.leftTransactionId = leftTransactionId;
      setLeftTransactionIdIsSet(true);
      return this;
    }

    public void unsetLeftTransactionId() {
      __isset_bit_vector.clear(__LEFTTRANSACTIONID_ISSET_ID);
    }

    /** Returns true if field leftTransactionId is set (has been assigned a value) and false otherwise */
    public boolean isSetLeftTransactionId() {
      return __isset_bit_vector.get(__LEFTTRANSACTIONID_ISSET_ID);
    }

    public void setLeftTransactionIdIsSet(boolean value) {
      __isset_bit_vector.set(__LEFTTRANSACTIONID_ISSET_ID, value);
    }

    public long getRightTransactionId() {
      return this.rightTransactionId;
    }

    public sendNewTransactions_args setRightTransactionId(long rightTransactionId) {
      this.rightTransactionId = rightTransactionId;
      setRightTransactionIdIsSet(true);
      return this;
    }

    public void unsetRightTransactionId() {
      __isset_bit_vector.clear(__RIGHTTRANSACTIONID_ISSET_ID);
    }

    /** Returns true if field rightTransactionId is set (has been assigned a value) and false otherwise */
    public boolean isSetRightTransactionId() {
      return __isset_bit_vector.get(__RIGHTTRANSACTIONID_ISSET_ID);
    }

    public void setRightTransactionIdIsSet(boolean value) {
      __isset_bit_vector.set(__RIGHTTRANSACTIONID_ISSET_ID, value);
    }

    public int getTransactionsSize() {
      return (this.transactions == null) ? 0 : this.transactions.size();
    }

    public java.util.Iterator<ByteBuffer> getTransactionsIterator() {
      return (this.transactions == null) ? null : this.transactions.iterator();
    }

    public void addToTransactions(ByteBuffer elem) {
      if (this.transactions == null) {
        this.transactions = new ArrayList<ByteBuffer>();
      }
      this.transactions.add(elem);
    }

    public List<ByteBuffer> getTransactions() {
      return this.transactions;
    }

    public sendNewTransactions_args setTransactions(List<ByteBuffer> transactions) {
      this.transactions = transactions;
      return this;
    }

    public void unsetTransactions() {
      this.transactions = null;
    }

    /** Returns true if field transactions is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactions() {
      return this.transactions != null;
    }

    public void setTransactionsIsSet(boolean value) {
      if (!value) {
        this.transactions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LEFT_TRANSACTION_ID:
        if (value == null) {
          unsetLeftTransactionId();
        } else {
          setLeftTransactionId((Long)value);
        }
        break;

      case RIGHT_TRANSACTION_ID:
        if (value == null) {
          unsetRightTransactionId();
        } else {
          setRightTransactionId((Long)value);
        }
        break;

      case TRANSACTIONS:
        if (value == null) {
          unsetTransactions();
        } else {
          setTransactions((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LEFT_TRANSACTION_ID:
        return Long.valueOf(getLeftTransactionId());

      case RIGHT_TRANSACTION_ID:
        return Long.valueOf(getRightTransactionId());

      case TRANSACTIONS:
        return getTransactions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LEFT_TRANSACTION_ID:
        return isSetLeftTransactionId();
      case RIGHT_TRANSACTION_ID:
        return isSetRightTransactionId();
      case TRANSACTIONS:
        return isSetTransactions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendNewTransactions_args)
        return this.equals((sendNewTransactions_args)that);
      return false;
    }

    public boolean equals(sendNewTransactions_args that) {
      if (that == null)
        return false;

      boolean this_present_leftTransactionId = true;
      boolean that_present_leftTransactionId = true;
      if (this_present_leftTransactionId || that_present_leftTransactionId) {
        if (!(this_present_leftTransactionId && that_present_leftTransactionId))
          return false;
        if (this.leftTransactionId != that.leftTransactionId)
          return false;
      }

      boolean this_present_rightTransactionId = true;
      boolean that_present_rightTransactionId = true;
      if (this_present_rightTransactionId || that_present_rightTransactionId) {
        if (!(this_present_rightTransactionId && that_present_rightTransactionId))
          return false;
        if (this.rightTransactionId != that.rightTransactionId)
          return false;
      }

      boolean this_present_transactions = true && this.isSetTransactions();
      boolean that_present_transactions = true && that.isSetTransactions();
      if (this_present_transactions || that_present_transactions) {
        if (!(this_present_transactions && that_present_transactions))
          return false;
        if (!this.transactions.equals(that.transactions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendNewTransactions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendNewTransactions_args typedOther = (sendNewTransactions_args)other;

      lastComparison = Boolean.valueOf(isSetLeftTransactionId()).compareTo(typedOther.isSetLeftTransactionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeftTransactionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftTransactionId, typedOther.leftTransactionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRightTransactionId()).compareTo(typedOther.isSetRightTransactionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRightTransactionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightTransactionId, typedOther.rightTransactionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransactions()).compareTo(typedOther.isSetTransactions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactions, typedOther.transactions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // LEFT_TRANSACTION_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.leftTransactionId = iprot.readI64();
              setLeftTransactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // RIGHT_TRANSACTION_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.rightTransactionId = iprot.readI64();
              setRightTransactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TRANSACTIONS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                this.transactions = new ArrayList<ByteBuffer>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  ByteBuffer _elem14; // required
                  _elem14 = iprot.readBinary();
                  this.transactions.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEFT_TRANSACTION_ID_FIELD_DESC);
      oprot.writeI64(this.leftTransactionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RIGHT_TRANSACTION_ID_FIELD_DESC);
      oprot.writeI64(this.rightTransactionId);
      oprot.writeFieldEnd();
      if (this.transactions != null) {
        oprot.writeFieldBegin(TRANSACTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.transactions.size()));
          for (ByteBuffer _iter15 : this.transactions)
          {
            oprot.writeBinary(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendNewTransactions_args(");
      boolean first = true;

      sb.append("leftTransactionId:");
      sb.append(this.leftTransactionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rightTransactionId:");
      sb.append(this.rightTransactionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transactions:");
      if (this.transactions == null) {
        sb.append("null");
      } else {
        sb.append(this.transactions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class sendNewTransactions_result implements org.apache.thrift.TBase<sendNewTransactions_result, sendNewTransactions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendNewTransactions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendNewTransactions_result.class, metaDataMap);
    }

    public sendNewTransactions_result() {
    }

    public sendNewTransactions_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendNewTransactions_result(sendNewTransactions_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public sendNewTransactions_result deepCopy() {
      return new sendNewTransactions_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public sendNewTransactions_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendNewTransactions_result)
        return this.equals((sendNewTransactions_result)that);
      return false;
    }

    public boolean equals(sendNewTransactions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendNewTransactions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendNewTransactions_result typedOther = (sendNewTransactions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendNewTransactions_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
