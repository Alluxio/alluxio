/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DatasetInfo implements org.apache.thrift.TBase<DatasetInfo, DatasetInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DatasetInfo");

  private static final org.apache.thrift.protocol.TField M_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField M_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("mPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField M_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("mSizeBytes", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField M_NUM_OF_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("mNumOfPartitions", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField M_PARTITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mPartitionList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField M_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("mCache", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField M_PIN_FIELD_DESC = new org.apache.thrift.protocol.TField("mPin", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField M_IS_SUB_DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("mIsSubDataset", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField M_PARENT_DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mParentDatasetId", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DatasetInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DatasetInfoTupleSchemeFactory());
  }

  public int mId; // required
  public String mPath; // required
  public long mSizeBytes; // required
  public int mNumOfPartitions; // required
  public List<PartitionInfo> mPartitionList; // required
  public boolean mCache; // required
  public boolean mPin; // required
  public boolean mIsSubDataset; // required
  public int mParentDatasetId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    M_ID((short)1, "mId"),
    M_PATH((short)2, "mPath"),
    M_SIZE_BYTES((short)3, "mSizeBytes"),
    M_NUM_OF_PARTITIONS((short)4, "mNumOfPartitions"),
    M_PARTITION_LIST((short)5, "mPartitionList"),
    M_CACHE((short)6, "mCache"),
    M_PIN((short)7, "mPin"),
    M_IS_SUB_DATASET((short)8, "mIsSubDataset"),
    M_PARENT_DATASET_ID((short)9, "mParentDatasetId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // M_ID
          return M_ID;
        case 2: // M_PATH
          return M_PATH;
        case 3: // M_SIZE_BYTES
          return M_SIZE_BYTES;
        case 4: // M_NUM_OF_PARTITIONS
          return M_NUM_OF_PARTITIONS;
        case 5: // M_PARTITION_LIST
          return M_PARTITION_LIST;
        case 6: // M_CACHE
          return M_CACHE;
        case 7: // M_PIN
          return M_PIN;
        case 8: // M_IS_SUB_DATASET
          return M_IS_SUB_DATASET;
        case 9: // M_PARENT_DATASET_ID
          return M_PARENT_DATASET_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MID_ISSET_ID = 0;
  private static final int __MSIZEBYTES_ISSET_ID = 1;
  private static final int __MNUMOFPARTITIONS_ISSET_ID = 2;
  private static final int __MCACHE_ISSET_ID = 3;
  private static final int __MPIN_ISSET_ID = 4;
  private static final int __MISSUBDATASET_ISSET_ID = 5;
  private static final int __MPARENTDATASETID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.M_ID, new org.apache.thrift.meta_data.FieldMetaData("mId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_PATH, new org.apache.thrift.meta_data.FieldMetaData("mPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("mSizeBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.M_NUM_OF_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("mNumOfPartitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.M_PARTITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("mPartitionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartitionInfo.class))));
    tmpMap.put(_Fields.M_CACHE, new org.apache.thrift.meta_data.FieldMetaData("mCache", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.M_PIN, new org.apache.thrift.meta_data.FieldMetaData("mPin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.M_IS_SUB_DATASET, new org.apache.thrift.meta_data.FieldMetaData("mIsSubDataset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.M_PARENT_DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("mParentDatasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DatasetInfo.class, metaDataMap);
  }

  public DatasetInfo() {
  }

  public DatasetInfo(
    int mId,
    String mPath,
    long mSizeBytes,
    int mNumOfPartitions,
    List<PartitionInfo> mPartitionList,
    boolean mCache,
    boolean mPin,
    boolean mIsSubDataset,
    int mParentDatasetId)
  {
    this();
    this.mId = mId;
    setMIdIsSet(true);
    this.mPath = mPath;
    this.mSizeBytes = mSizeBytes;
    setMSizeBytesIsSet(true);
    this.mNumOfPartitions = mNumOfPartitions;
    setMNumOfPartitionsIsSet(true);
    this.mPartitionList = mPartitionList;
    this.mCache = mCache;
    setMCacheIsSet(true);
    this.mPin = mPin;
    setMPinIsSet(true);
    this.mIsSubDataset = mIsSubDataset;
    setMIsSubDatasetIsSet(true);
    this.mParentDatasetId = mParentDatasetId;
    setMParentDatasetIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DatasetInfo(DatasetInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mId = other.mId;
    if (other.isSetMPath()) {
      this.mPath = other.mPath;
    }
    this.mSizeBytes = other.mSizeBytes;
    this.mNumOfPartitions = other.mNumOfPartitions;
    if (other.isSetMPartitionList()) {
      List<PartitionInfo> __this__mPartitionList = new ArrayList<PartitionInfo>();
      for (PartitionInfo other_element : other.mPartitionList) {
        __this__mPartitionList.add(new PartitionInfo(other_element));
      }
      this.mPartitionList = __this__mPartitionList;
    }
    this.mCache = other.mCache;
    this.mPin = other.mPin;
    this.mIsSubDataset = other.mIsSubDataset;
    this.mParentDatasetId = other.mParentDatasetId;
  }

  public DatasetInfo deepCopy() {
    return new DatasetInfo(this);
  }

  @Override
  public void clear() {
    setMIdIsSet(false);
    this.mId = 0;
    this.mPath = null;
    setMSizeBytesIsSet(false);
    this.mSizeBytes = 0;
    setMNumOfPartitionsIsSet(false);
    this.mNumOfPartitions = 0;
    this.mPartitionList = null;
    setMCacheIsSet(false);
    this.mCache = false;
    setMPinIsSet(false);
    this.mPin = false;
    setMIsSubDatasetIsSet(false);
    this.mIsSubDataset = false;
    setMParentDatasetIdIsSet(false);
    this.mParentDatasetId = 0;
  }

  public int getMId() {
    return this.mId;
  }

  public DatasetInfo setMId(int mId) {
    this.mId = mId;
    setMIdIsSet(true);
    return this;
  }

  public void unsetMId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mId is set (has been assigned a value) and false otherwise */
  public boolean isSetMId() {
    return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public String getMPath() {
    return this.mPath;
  }

  public DatasetInfo setMPath(String mPath) {
    this.mPath = mPath;
    return this;
  }

  public void unsetMPath() {
    this.mPath = null;
  }

  /** Returns true if field mPath is set (has been assigned a value) and false otherwise */
  public boolean isSetMPath() {
    return this.mPath != null;
  }

  public void setMPathIsSet(boolean value) {
    if (!value) {
      this.mPath = null;
    }
  }

  public long getMSizeBytes() {
    return this.mSizeBytes;
  }

  public DatasetInfo setMSizeBytes(long mSizeBytes) {
    this.mSizeBytes = mSizeBytes;
    setMSizeBytesIsSet(true);
    return this;
  }

  public void unsetMSizeBytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID);
  }

  /** Returns true if field mSizeBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMSizeBytes() {
    return EncodingUtils.testBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID);
  }

  public void setMSizeBytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSIZEBYTES_ISSET_ID, value);
  }

  public int getMNumOfPartitions() {
    return this.mNumOfPartitions;
  }

  public DatasetInfo setMNumOfPartitions(int mNumOfPartitions) {
    this.mNumOfPartitions = mNumOfPartitions;
    setMNumOfPartitionsIsSet(true);
    return this;
  }

  public void unsetMNumOfPartitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MNUMOFPARTITIONS_ISSET_ID);
  }

  /** Returns true if field mNumOfPartitions is set (has been assigned a value) and false otherwise */
  public boolean isSetMNumOfPartitions() {
    return EncodingUtils.testBit(__isset_bitfield, __MNUMOFPARTITIONS_ISSET_ID);
  }

  public void setMNumOfPartitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MNUMOFPARTITIONS_ISSET_ID, value);
  }

  public int getMPartitionListSize() {
    return (this.mPartitionList == null) ? 0 : this.mPartitionList.size();
  }

  public java.util.Iterator<PartitionInfo> getMPartitionListIterator() {
    return (this.mPartitionList == null) ? null : this.mPartitionList.iterator();
  }

  public void addToMPartitionList(PartitionInfo elem) {
    if (this.mPartitionList == null) {
      this.mPartitionList = new ArrayList<PartitionInfo>();
    }
    this.mPartitionList.add(elem);
  }

  public List<PartitionInfo> getMPartitionList() {
    return this.mPartitionList;
  }

  public DatasetInfo setMPartitionList(List<PartitionInfo> mPartitionList) {
    this.mPartitionList = mPartitionList;
    return this;
  }

  public void unsetMPartitionList() {
    this.mPartitionList = null;
  }

  /** Returns true if field mPartitionList is set (has been assigned a value) and false otherwise */
  public boolean isSetMPartitionList() {
    return this.mPartitionList != null;
  }

  public void setMPartitionListIsSet(boolean value) {
    if (!value) {
      this.mPartitionList = null;
    }
  }

  public boolean isMCache() {
    return this.mCache;
  }

  public DatasetInfo setMCache(boolean mCache) {
    this.mCache = mCache;
    setMCacheIsSet(true);
    return this;
  }

  public void unsetMCache() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MCACHE_ISSET_ID);
  }

  /** Returns true if field mCache is set (has been assigned a value) and false otherwise */
  public boolean isSetMCache() {
    return EncodingUtils.testBit(__isset_bitfield, __MCACHE_ISSET_ID);
  }

  public void setMCacheIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MCACHE_ISSET_ID, value);
  }

  public boolean isMPin() {
    return this.mPin;
  }

  public DatasetInfo setMPin(boolean mPin) {
    this.mPin = mPin;
    setMPinIsSet(true);
    return this;
  }

  public void unsetMPin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MPIN_ISSET_ID);
  }

  /** Returns true if field mPin is set (has been assigned a value) and false otherwise */
  public boolean isSetMPin() {
    return EncodingUtils.testBit(__isset_bitfield, __MPIN_ISSET_ID);
  }

  public void setMPinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MPIN_ISSET_ID, value);
  }

  public boolean isMIsSubDataset() {
    return this.mIsSubDataset;
  }

  public DatasetInfo setMIsSubDataset(boolean mIsSubDataset) {
    this.mIsSubDataset = mIsSubDataset;
    setMIsSubDatasetIsSet(true);
    return this;
  }

  public void unsetMIsSubDataset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSUBDATASET_ISSET_ID);
  }

  /** Returns true if field mIsSubDataset is set (has been assigned a value) and false otherwise */
  public boolean isSetMIsSubDataset() {
    return EncodingUtils.testBit(__isset_bitfield, __MISSUBDATASET_ISSET_ID);
  }

  public void setMIsSubDatasetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSUBDATASET_ISSET_ID, value);
  }

  public int getMParentDatasetId() {
    return this.mParentDatasetId;
  }

  public DatasetInfo setMParentDatasetId(int mParentDatasetId) {
    this.mParentDatasetId = mParentDatasetId;
    setMParentDatasetIdIsSet(true);
    return this;
  }

  public void unsetMParentDatasetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MPARENTDATASETID_ISSET_ID);
  }

  /** Returns true if field mParentDatasetId is set (has been assigned a value) and false otherwise */
  public boolean isSetMParentDatasetId() {
    return EncodingUtils.testBit(__isset_bitfield, __MPARENTDATASETID_ISSET_ID);
  }

  public void setMParentDatasetIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MPARENTDATASETID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case M_ID:
      if (value == null) {
        unsetMId();
      } else {
        setMId((Integer)value);
      }
      break;

    case M_PATH:
      if (value == null) {
        unsetMPath();
      } else {
        setMPath((String)value);
      }
      break;

    case M_SIZE_BYTES:
      if (value == null) {
        unsetMSizeBytes();
      } else {
        setMSizeBytes((Long)value);
      }
      break;

    case M_NUM_OF_PARTITIONS:
      if (value == null) {
        unsetMNumOfPartitions();
      } else {
        setMNumOfPartitions((Integer)value);
      }
      break;

    case M_PARTITION_LIST:
      if (value == null) {
        unsetMPartitionList();
      } else {
        setMPartitionList((List<PartitionInfo>)value);
      }
      break;

    case M_CACHE:
      if (value == null) {
        unsetMCache();
      } else {
        setMCache((Boolean)value);
      }
      break;

    case M_PIN:
      if (value == null) {
        unsetMPin();
      } else {
        setMPin((Boolean)value);
      }
      break;

    case M_IS_SUB_DATASET:
      if (value == null) {
        unsetMIsSubDataset();
      } else {
        setMIsSubDataset((Boolean)value);
      }
      break;

    case M_PARENT_DATASET_ID:
      if (value == null) {
        unsetMParentDatasetId();
      } else {
        setMParentDatasetId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case M_ID:
      return Integer.valueOf(getMId());

    case M_PATH:
      return getMPath();

    case M_SIZE_BYTES:
      return Long.valueOf(getMSizeBytes());

    case M_NUM_OF_PARTITIONS:
      return Integer.valueOf(getMNumOfPartitions());

    case M_PARTITION_LIST:
      return getMPartitionList();

    case M_CACHE:
      return Boolean.valueOf(isMCache());

    case M_PIN:
      return Boolean.valueOf(isMPin());

    case M_IS_SUB_DATASET:
      return Boolean.valueOf(isMIsSubDataset());

    case M_PARENT_DATASET_ID:
      return Integer.valueOf(getMParentDatasetId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case M_ID:
      return isSetMId();
    case M_PATH:
      return isSetMPath();
    case M_SIZE_BYTES:
      return isSetMSizeBytes();
    case M_NUM_OF_PARTITIONS:
      return isSetMNumOfPartitions();
    case M_PARTITION_LIST:
      return isSetMPartitionList();
    case M_CACHE:
      return isSetMCache();
    case M_PIN:
      return isSetMPin();
    case M_IS_SUB_DATASET:
      return isSetMIsSubDataset();
    case M_PARENT_DATASET_ID:
      return isSetMParentDatasetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DatasetInfo)
      return this.equals((DatasetInfo)that);
    return false;
  }

  public boolean equals(DatasetInfo that) {
    if (that == null)
      return false;

    boolean this_present_mId = true;
    boolean that_present_mId = true;
    if (this_present_mId || that_present_mId) {
      if (!(this_present_mId && that_present_mId))
        return false;
      if (this.mId != that.mId)
        return false;
    }

    boolean this_present_mPath = true && this.isSetMPath();
    boolean that_present_mPath = true && that.isSetMPath();
    if (this_present_mPath || that_present_mPath) {
      if (!(this_present_mPath && that_present_mPath))
        return false;
      if (!this.mPath.equals(that.mPath))
        return false;
    }

    boolean this_present_mSizeBytes = true;
    boolean that_present_mSizeBytes = true;
    if (this_present_mSizeBytes || that_present_mSizeBytes) {
      if (!(this_present_mSizeBytes && that_present_mSizeBytes))
        return false;
      if (this.mSizeBytes != that.mSizeBytes)
        return false;
    }

    boolean this_present_mNumOfPartitions = true;
    boolean that_present_mNumOfPartitions = true;
    if (this_present_mNumOfPartitions || that_present_mNumOfPartitions) {
      if (!(this_present_mNumOfPartitions && that_present_mNumOfPartitions))
        return false;
      if (this.mNumOfPartitions != that.mNumOfPartitions)
        return false;
    }

    boolean this_present_mPartitionList = true && this.isSetMPartitionList();
    boolean that_present_mPartitionList = true && that.isSetMPartitionList();
    if (this_present_mPartitionList || that_present_mPartitionList) {
      if (!(this_present_mPartitionList && that_present_mPartitionList))
        return false;
      if (!this.mPartitionList.equals(that.mPartitionList))
        return false;
    }

    boolean this_present_mCache = true;
    boolean that_present_mCache = true;
    if (this_present_mCache || that_present_mCache) {
      if (!(this_present_mCache && that_present_mCache))
        return false;
      if (this.mCache != that.mCache)
        return false;
    }

    boolean this_present_mPin = true;
    boolean that_present_mPin = true;
    if (this_present_mPin || that_present_mPin) {
      if (!(this_present_mPin && that_present_mPin))
        return false;
      if (this.mPin != that.mPin)
        return false;
    }

    boolean this_present_mIsSubDataset = true;
    boolean that_present_mIsSubDataset = true;
    if (this_present_mIsSubDataset || that_present_mIsSubDataset) {
      if (!(this_present_mIsSubDataset && that_present_mIsSubDataset))
        return false;
      if (this.mIsSubDataset != that.mIsSubDataset)
        return false;
    }

    boolean this_present_mParentDatasetId = true;
    boolean that_present_mParentDatasetId = true;
    if (this_present_mParentDatasetId || that_present_mParentDatasetId) {
      if (!(this_present_mParentDatasetId && that_present_mParentDatasetId))
        return false;
      if (this.mParentDatasetId != that.mParentDatasetId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DatasetInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DatasetInfo typedOther = (DatasetInfo)other;

    lastComparison = Boolean.valueOf(isSetMId()).compareTo(typedOther.isSetMId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mId, typedOther.mId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMPath()).compareTo(typedOther.isSetMPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mPath, typedOther.mPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMSizeBytes()).compareTo(typedOther.isSetMSizeBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMSizeBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mSizeBytes, typedOther.mSizeBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMNumOfPartitions()).compareTo(typedOther.isSetMNumOfPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMNumOfPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mNumOfPartitions, typedOther.mNumOfPartitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMPartitionList()).compareTo(typedOther.isSetMPartitionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMPartitionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mPartitionList, typedOther.mPartitionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMCache()).compareTo(typedOther.isSetMCache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMCache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mCache, typedOther.mCache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMPin()).compareTo(typedOther.isSetMPin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMPin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mPin, typedOther.mPin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMIsSubDataset()).compareTo(typedOther.isSetMIsSubDataset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMIsSubDataset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mIsSubDataset, typedOther.mIsSubDataset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMParentDatasetId()).compareTo(typedOther.isSetMParentDatasetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMParentDatasetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mParentDatasetId, typedOther.mParentDatasetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DatasetInfo(");
    boolean first = true;

    sb.append("mId:");
    sb.append(this.mId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mPath:");
    if (this.mPath == null) {
      sb.append("null");
    } else {
      sb.append(this.mPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mSizeBytes:");
    sb.append(this.mSizeBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mNumOfPartitions:");
    sb.append(this.mNumOfPartitions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mPartitionList:");
    if (this.mPartitionList == null) {
      sb.append("null");
    } else {
      sb.append(this.mPartitionList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mCache:");
    sb.append(this.mCache);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mPin:");
    sb.append(this.mPin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mIsSubDataset:");
    sb.append(this.mIsSubDataset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mParentDatasetId:");
    sb.append(this.mParentDatasetId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DatasetInfoStandardSchemeFactory implements SchemeFactory {
    public DatasetInfoStandardScheme getScheme() {
      return new DatasetInfoStandardScheme();
    }
  }

  private static class DatasetInfoStandardScheme extends StandardScheme<DatasetInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DatasetInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // M_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mId = iprot.readI32();
              struct.setMIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // M_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mPath = iprot.readString();
              struct.setMPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mSizeBytes = iprot.readI64();
              struct.setMSizeBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // M_NUM_OF_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mNumOfPartitions = iprot.readI32();
              struct.setMNumOfPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // M_PARTITION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.mPartitionList = new ArrayList<PartitionInfo>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  PartitionInfo _elem12; // required
                  _elem12 = new PartitionInfo();
                  _elem12.read(iprot);
                  struct.mPartitionList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setMPartitionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // M_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mCache = iprot.readBool();
              struct.setMCacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // M_PIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mPin = iprot.readBool();
              struct.setMPinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // M_IS_SUB_DATASET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mIsSubDataset = iprot.readBool();
              struct.setMIsSubDatasetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // M_PARENT_DATASET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mParentDatasetId = iprot.readI32();
              struct.setMParentDatasetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DatasetInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(M_ID_FIELD_DESC);
      oprot.writeI32(struct.mId);
      oprot.writeFieldEnd();
      if (struct.mPath != null) {
        oprot.writeFieldBegin(M_PATH_FIELD_DESC);
        oprot.writeString(struct.mPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(M_SIZE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.mSizeBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_NUM_OF_PARTITIONS_FIELD_DESC);
      oprot.writeI32(struct.mNumOfPartitions);
      oprot.writeFieldEnd();
      if (struct.mPartitionList != null) {
        oprot.writeFieldBegin(M_PARTITION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mPartitionList.size()));
          for (PartitionInfo _iter13 : struct.mPartitionList)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(M_CACHE_FIELD_DESC);
      oprot.writeBool(struct.mCache);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_PIN_FIELD_DESC);
      oprot.writeBool(struct.mPin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_IS_SUB_DATASET_FIELD_DESC);
      oprot.writeBool(struct.mIsSubDataset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M_PARENT_DATASET_ID_FIELD_DESC);
      oprot.writeI32(struct.mParentDatasetId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DatasetInfoTupleSchemeFactory implements SchemeFactory {
    public DatasetInfoTupleScheme getScheme() {
      return new DatasetInfoTupleScheme();
    }
  }

  private static class DatasetInfoTupleScheme extends TupleScheme<DatasetInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DatasetInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMId()) {
        optionals.set(0);
      }
      if (struct.isSetMPath()) {
        optionals.set(1);
      }
      if (struct.isSetMSizeBytes()) {
        optionals.set(2);
      }
      if (struct.isSetMNumOfPartitions()) {
        optionals.set(3);
      }
      if (struct.isSetMPartitionList()) {
        optionals.set(4);
      }
      if (struct.isSetMCache()) {
        optionals.set(5);
      }
      if (struct.isSetMPin()) {
        optionals.set(6);
      }
      if (struct.isSetMIsSubDataset()) {
        optionals.set(7);
      }
      if (struct.isSetMParentDatasetId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMId()) {
        oprot.writeI32(struct.mId);
      }
      if (struct.isSetMPath()) {
        oprot.writeString(struct.mPath);
      }
      if (struct.isSetMSizeBytes()) {
        oprot.writeI64(struct.mSizeBytes);
      }
      if (struct.isSetMNumOfPartitions()) {
        oprot.writeI32(struct.mNumOfPartitions);
      }
      if (struct.isSetMPartitionList()) {
        {
          oprot.writeI32(struct.mPartitionList.size());
          for (PartitionInfo _iter14 : struct.mPartitionList)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetMCache()) {
        oprot.writeBool(struct.mCache);
      }
      if (struct.isSetMPin()) {
        oprot.writeBool(struct.mPin);
      }
      if (struct.isSetMIsSubDataset()) {
        oprot.writeBool(struct.mIsSubDataset);
      }
      if (struct.isSetMParentDatasetId()) {
        oprot.writeI32(struct.mParentDatasetId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DatasetInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.mId = iprot.readI32();
        struct.setMIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mPath = iprot.readString();
        struct.setMPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mSizeBytes = iprot.readI64();
        struct.setMSizeBytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mNumOfPartitions = iprot.readI32();
        struct.setMNumOfPartitionsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mPartitionList = new ArrayList<PartitionInfo>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            PartitionInfo _elem17; // required
            _elem17 = new PartitionInfo();
            _elem17.read(iprot);
            struct.mPartitionList.add(_elem17);
          }
        }
        struct.setMPartitionListIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mCache = iprot.readBool();
        struct.setMCacheIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mPin = iprot.readBool();
        struct.setMPinIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mIsSubDataset = iprot.readBool();
        struct.setMIsSubDatasetIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mParentDatasetId = iprot.readI32();
        struct.setMParentDatasetIdIsSet(true);
      }
    }
  }

}

