/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MasterService {

  public interface Iface {

    public long worker_register(NetAddress workerNetAddress, long totalBytes, long usedBytes, List<Long> currentPartitionList) throws org.apache.thrift.TException;

    public Command worker_heartbeat(long workerId, long usedBytes, List<Long> removedPartitionList) throws org.apache.thrift.TException;

    public void worker_addPartition(long workerId, long workerUsedBytes, int datasetId, int partitionId, int partitionSizeBytes) throws PartitionDoesNotExistException, SuspectedPartitionSizeException, org.apache.thrift.TException;

    public void worker_addDoneRCDPartition(long workerId, int datasetId, int partitionId, int partitionSizeBytes) throws PartitionDoesNotExistException, SuspectedPartitionSizeException, org.apache.thrift.TException;

    public Set<Integer> worker_getPinList() throws org.apache.thrift.TException;

    public long user_getUserId() throws org.apache.thrift.TException;

    public int user_createRawColumnDataset(String datasetPath, int columns, int partitions) throws DatasetAlreadyExistException, InvalidPathException, org.apache.thrift.TException;

    public int user_createDataset(String datasetPath, int partitions) throws DatasetAlreadyExistException, InvalidPathException, org.apache.thrift.TException;

    public int user_getDatasetId(String datasetPath) throws org.apache.thrift.TException;

    public NetAddress user_getLocalWorker(String host) throws NoLocalWorkerException, org.apache.thrift.TException;

    public PartitionInfo user_getPartitionInfo(int datasetId, int partitionId) throws PartitionDoesNotExistException, org.apache.thrift.TException;

    public DatasetInfo user_getDatasetById(int datasetId) throws DatasetDoesNotExistException, org.apache.thrift.TException;

    public DatasetInfo user_getDatasetByPath(String datasetPath) throws DatasetDoesNotExistException, org.apache.thrift.TException;

    public RawColumnDatasetInfo user_getRawColumnDatasetById(int datasetId) throws DatasetDoesNotExistException, org.apache.thrift.TException;

    public RawColumnDatasetInfo user_getRawColumnDatasetByPath(String datasetPath) throws DatasetDoesNotExistException, org.apache.thrift.TException;

    public void user_deleteDataset(int datasetId) throws DatasetDoesNotExistException, org.apache.thrift.TException;

    public void user_unpinDataset(int datasetId) throws DatasetDoesNotExistException, org.apache.thrift.TException;

    public void user_renameDataset(String srcDataset, String dstDataset) throws DatasetDoesNotExistException, org.apache.thrift.TException;

    public void user_outOfMemoryForPinDataset(int datasetId) throws org.apache.thrift.TException;

    public List<DatasetInfo> cmd_ls(String folder) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void worker_register(NetAddress workerNetAddress, long totalBytes, long usedBytes, List<Long> currentPartitionList, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.worker_register_call> resultHandler) throws org.apache.thrift.TException;

    public void worker_heartbeat(long workerId, long usedBytes, List<Long> removedPartitionList, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.worker_heartbeat_call> resultHandler) throws org.apache.thrift.TException;

    public void worker_addPartition(long workerId, long workerUsedBytes, int datasetId, int partitionId, int partitionSizeBytes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.worker_addPartition_call> resultHandler) throws org.apache.thrift.TException;

    public void worker_addDoneRCDPartition(long workerId, int datasetId, int partitionId, int partitionSizeBytes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.worker_addDoneRCDPartition_call> resultHandler) throws org.apache.thrift.TException;

    public void worker_getPinList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.worker_getPinList_call> resultHandler) throws org.apache.thrift.TException;

    public void user_getUserId(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_getUserId_call> resultHandler) throws org.apache.thrift.TException;

    public void user_createRawColumnDataset(String datasetPath, int columns, int partitions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_createRawColumnDataset_call> resultHandler) throws org.apache.thrift.TException;

    public void user_createDataset(String datasetPath, int partitions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_createDataset_call> resultHandler) throws org.apache.thrift.TException;

    public void user_getDatasetId(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_getDatasetId_call> resultHandler) throws org.apache.thrift.TException;

    public void user_getLocalWorker(String host, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_getLocalWorker_call> resultHandler) throws org.apache.thrift.TException;

    public void user_getPartitionInfo(int datasetId, int partitionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_getPartitionInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void user_getDatasetById(int datasetId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_getDatasetById_call> resultHandler) throws org.apache.thrift.TException;

    public void user_getDatasetByPath(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_getDatasetByPath_call> resultHandler) throws org.apache.thrift.TException;

    public void user_getRawColumnDatasetById(int datasetId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_getRawColumnDatasetById_call> resultHandler) throws org.apache.thrift.TException;

    public void user_getRawColumnDatasetByPath(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_getRawColumnDatasetByPath_call> resultHandler) throws org.apache.thrift.TException;

    public void user_deleteDataset(int datasetId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_deleteDataset_call> resultHandler) throws org.apache.thrift.TException;

    public void user_unpinDataset(int datasetId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_unpinDataset_call> resultHandler) throws org.apache.thrift.TException;

    public void user_renameDataset(String srcDataset, String dstDataset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_renameDataset_call> resultHandler) throws org.apache.thrift.TException;

    public void user_outOfMemoryForPinDataset(int datasetId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_outOfMemoryForPinDataset_call> resultHandler) throws org.apache.thrift.TException;

    public void cmd_ls(String folder, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cmd_ls_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long worker_register(NetAddress workerNetAddress, long totalBytes, long usedBytes, List<Long> currentPartitionList) throws org.apache.thrift.TException
    {
      send_worker_register(workerNetAddress, totalBytes, usedBytes, currentPartitionList);
      return recv_worker_register();
    }

    public void send_worker_register(NetAddress workerNetAddress, long totalBytes, long usedBytes, List<Long> currentPartitionList) throws org.apache.thrift.TException
    {
      worker_register_args args = new worker_register_args();
      args.setWorkerNetAddress(workerNetAddress);
      args.setTotalBytes(totalBytes);
      args.setUsedBytes(usedBytes);
      args.setCurrentPartitionList(currentPartitionList);
      sendBase("worker_register", args);
    }

    public long recv_worker_register() throws org.apache.thrift.TException
    {
      worker_register_result result = new worker_register_result();
      receiveBase(result, "worker_register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "worker_register failed: unknown result");
    }

    public Command worker_heartbeat(long workerId, long usedBytes, List<Long> removedPartitionList) throws org.apache.thrift.TException
    {
      send_worker_heartbeat(workerId, usedBytes, removedPartitionList);
      return recv_worker_heartbeat();
    }

    public void send_worker_heartbeat(long workerId, long usedBytes, List<Long> removedPartitionList) throws org.apache.thrift.TException
    {
      worker_heartbeat_args args = new worker_heartbeat_args();
      args.setWorkerId(workerId);
      args.setUsedBytes(usedBytes);
      args.setRemovedPartitionList(removedPartitionList);
      sendBase("worker_heartbeat", args);
    }

    public Command recv_worker_heartbeat() throws org.apache.thrift.TException
    {
      worker_heartbeat_result result = new worker_heartbeat_result();
      receiveBase(result, "worker_heartbeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "worker_heartbeat failed: unknown result");
    }

    public void worker_addPartition(long workerId, long workerUsedBytes, int datasetId, int partitionId, int partitionSizeBytes) throws PartitionDoesNotExistException, SuspectedPartitionSizeException, org.apache.thrift.TException
    {
      send_worker_addPartition(workerId, workerUsedBytes, datasetId, partitionId, partitionSizeBytes);
      recv_worker_addPartition();
    }

    public void send_worker_addPartition(long workerId, long workerUsedBytes, int datasetId, int partitionId, int partitionSizeBytes) throws org.apache.thrift.TException
    {
      worker_addPartition_args args = new worker_addPartition_args();
      args.setWorkerId(workerId);
      args.setWorkerUsedBytes(workerUsedBytes);
      args.setDatasetId(datasetId);
      args.setPartitionId(partitionId);
      args.setPartitionSizeBytes(partitionSizeBytes);
      sendBase("worker_addPartition", args);
    }

    public void recv_worker_addPartition() throws PartitionDoesNotExistException, SuspectedPartitionSizeException, org.apache.thrift.TException
    {
      worker_addPartition_result result = new worker_addPartition_result();
      receiveBase(result, "worker_addPartition");
      if (result.eP != null) {
        throw result.eP;
      }
      if (result.eS != null) {
        throw result.eS;
      }
      return;
    }

    public void worker_addDoneRCDPartition(long workerId, int datasetId, int partitionId, int partitionSizeBytes) throws PartitionDoesNotExistException, SuspectedPartitionSizeException, org.apache.thrift.TException
    {
      send_worker_addDoneRCDPartition(workerId, datasetId, partitionId, partitionSizeBytes);
      recv_worker_addDoneRCDPartition();
    }

    public void send_worker_addDoneRCDPartition(long workerId, int datasetId, int partitionId, int partitionSizeBytes) throws org.apache.thrift.TException
    {
      worker_addDoneRCDPartition_args args = new worker_addDoneRCDPartition_args();
      args.setWorkerId(workerId);
      args.setDatasetId(datasetId);
      args.setPartitionId(partitionId);
      args.setPartitionSizeBytes(partitionSizeBytes);
      sendBase("worker_addDoneRCDPartition", args);
    }

    public void recv_worker_addDoneRCDPartition() throws PartitionDoesNotExistException, SuspectedPartitionSizeException, org.apache.thrift.TException
    {
      worker_addDoneRCDPartition_result result = new worker_addDoneRCDPartition_result();
      receiveBase(result, "worker_addDoneRCDPartition");
      if (result.eP != null) {
        throw result.eP;
      }
      if (result.eS != null) {
        throw result.eS;
      }
      return;
    }

    public Set<Integer> worker_getPinList() throws org.apache.thrift.TException
    {
      send_worker_getPinList();
      return recv_worker_getPinList();
    }

    public void send_worker_getPinList() throws org.apache.thrift.TException
    {
      worker_getPinList_args args = new worker_getPinList_args();
      sendBase("worker_getPinList", args);
    }

    public Set<Integer> recv_worker_getPinList() throws org.apache.thrift.TException
    {
      worker_getPinList_result result = new worker_getPinList_result();
      receiveBase(result, "worker_getPinList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "worker_getPinList failed: unknown result");
    }

    public long user_getUserId() throws org.apache.thrift.TException
    {
      send_user_getUserId();
      return recv_user_getUserId();
    }

    public void send_user_getUserId() throws org.apache.thrift.TException
    {
      user_getUserId_args args = new user_getUserId_args();
      sendBase("user_getUserId", args);
    }

    public long recv_user_getUserId() throws org.apache.thrift.TException
    {
      user_getUserId_result result = new user_getUserId_result();
      receiveBase(result, "user_getUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getUserId failed: unknown result");
    }

    public int user_createRawColumnDataset(String datasetPath, int columns, int partitions) throws DatasetAlreadyExistException, InvalidPathException, org.apache.thrift.TException
    {
      send_user_createRawColumnDataset(datasetPath, columns, partitions);
      return recv_user_createRawColumnDataset();
    }

    public void send_user_createRawColumnDataset(String datasetPath, int columns, int partitions) throws org.apache.thrift.TException
    {
      user_createRawColumnDataset_args args = new user_createRawColumnDataset_args();
      args.setDatasetPath(datasetPath);
      args.setColumns(columns);
      args.setPartitions(partitions);
      sendBase("user_createRawColumnDataset", args);
    }

    public int recv_user_createRawColumnDataset() throws DatasetAlreadyExistException, InvalidPathException, org.apache.thrift.TException
    {
      user_createRawColumnDataset_result result = new user_createRawColumnDataset_result();
      receiveBase(result, "user_createRawColumnDataset");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eR != null) {
        throw result.eR;
      }
      if (result.eI != null) {
        throw result.eI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_createRawColumnDataset failed: unknown result");
    }

    public int user_createDataset(String datasetPath, int partitions) throws DatasetAlreadyExistException, InvalidPathException, org.apache.thrift.TException
    {
      send_user_createDataset(datasetPath, partitions);
      return recv_user_createDataset();
    }

    public void send_user_createDataset(String datasetPath, int partitions) throws org.apache.thrift.TException
    {
      user_createDataset_args args = new user_createDataset_args();
      args.setDatasetPath(datasetPath);
      args.setPartitions(partitions);
      sendBase("user_createDataset", args);
    }

    public int recv_user_createDataset() throws DatasetAlreadyExistException, InvalidPathException, org.apache.thrift.TException
    {
      user_createDataset_result result = new user_createDataset_result();
      receiveBase(result, "user_createDataset");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.eR != null) {
        throw result.eR;
      }
      if (result.eI != null) {
        throw result.eI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_createDataset failed: unknown result");
    }

    public int user_getDatasetId(String datasetPath) throws org.apache.thrift.TException
    {
      send_user_getDatasetId(datasetPath);
      return recv_user_getDatasetId();
    }

    public void send_user_getDatasetId(String datasetPath) throws org.apache.thrift.TException
    {
      user_getDatasetId_args args = new user_getDatasetId_args();
      args.setDatasetPath(datasetPath);
      sendBase("user_getDatasetId", args);
    }

    public int recv_user_getDatasetId() throws org.apache.thrift.TException
    {
      user_getDatasetId_result result = new user_getDatasetId_result();
      receiveBase(result, "user_getDatasetId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getDatasetId failed: unknown result");
    }

    public NetAddress user_getLocalWorker(String host) throws NoLocalWorkerException, org.apache.thrift.TException
    {
      send_user_getLocalWorker(host);
      return recv_user_getLocalWorker();
    }

    public void send_user_getLocalWorker(String host) throws org.apache.thrift.TException
    {
      user_getLocalWorker_args args = new user_getLocalWorker_args();
      args.setHost(host);
      sendBase("user_getLocalWorker", args);
    }

    public NetAddress recv_user_getLocalWorker() throws NoLocalWorkerException, org.apache.thrift.TException
    {
      user_getLocalWorker_result result = new user_getLocalWorker_result();
      receiveBase(result, "user_getLocalWorker");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getLocalWorker failed: unknown result");
    }

    public PartitionInfo user_getPartitionInfo(int datasetId, int partitionId) throws PartitionDoesNotExistException, org.apache.thrift.TException
    {
      send_user_getPartitionInfo(datasetId, partitionId);
      return recv_user_getPartitionInfo();
    }

    public void send_user_getPartitionInfo(int datasetId, int partitionId) throws org.apache.thrift.TException
    {
      user_getPartitionInfo_args args = new user_getPartitionInfo_args();
      args.setDatasetId(datasetId);
      args.setPartitionId(partitionId);
      sendBase("user_getPartitionInfo", args);
    }

    public PartitionInfo recv_user_getPartitionInfo() throws PartitionDoesNotExistException, org.apache.thrift.TException
    {
      user_getPartitionInfo_result result = new user_getPartitionInfo_result();
      receiveBase(result, "user_getPartitionInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getPartitionInfo failed: unknown result");
    }

    public DatasetInfo user_getDatasetById(int datasetId) throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      send_user_getDatasetById(datasetId);
      return recv_user_getDatasetById();
    }

    public void send_user_getDatasetById(int datasetId) throws org.apache.thrift.TException
    {
      user_getDatasetById_args args = new user_getDatasetById_args();
      args.setDatasetId(datasetId);
      sendBase("user_getDatasetById", args);
    }

    public DatasetInfo recv_user_getDatasetById() throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      user_getDatasetById_result result = new user_getDatasetById_result();
      receiveBase(result, "user_getDatasetById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getDatasetById failed: unknown result");
    }

    public DatasetInfo user_getDatasetByPath(String datasetPath) throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      send_user_getDatasetByPath(datasetPath);
      return recv_user_getDatasetByPath();
    }

    public void send_user_getDatasetByPath(String datasetPath) throws org.apache.thrift.TException
    {
      user_getDatasetByPath_args args = new user_getDatasetByPath_args();
      args.setDatasetPath(datasetPath);
      sendBase("user_getDatasetByPath", args);
    }

    public DatasetInfo recv_user_getDatasetByPath() throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      user_getDatasetByPath_result result = new user_getDatasetByPath_result();
      receiveBase(result, "user_getDatasetByPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getDatasetByPath failed: unknown result");
    }

    public RawColumnDatasetInfo user_getRawColumnDatasetById(int datasetId) throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      send_user_getRawColumnDatasetById(datasetId);
      return recv_user_getRawColumnDatasetById();
    }

    public void send_user_getRawColumnDatasetById(int datasetId) throws org.apache.thrift.TException
    {
      user_getRawColumnDatasetById_args args = new user_getRawColumnDatasetById_args();
      args.setDatasetId(datasetId);
      sendBase("user_getRawColumnDatasetById", args);
    }

    public RawColumnDatasetInfo recv_user_getRawColumnDatasetById() throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      user_getRawColumnDatasetById_result result = new user_getRawColumnDatasetById_result();
      receiveBase(result, "user_getRawColumnDatasetById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getRawColumnDatasetById failed: unknown result");
    }

    public RawColumnDatasetInfo user_getRawColumnDatasetByPath(String datasetPath) throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      send_user_getRawColumnDatasetByPath(datasetPath);
      return recv_user_getRawColumnDatasetByPath();
    }

    public void send_user_getRawColumnDatasetByPath(String datasetPath) throws org.apache.thrift.TException
    {
      user_getRawColumnDatasetByPath_args args = new user_getRawColumnDatasetByPath_args();
      args.setDatasetPath(datasetPath);
      sendBase("user_getRawColumnDatasetByPath", args);
    }

    public RawColumnDatasetInfo recv_user_getRawColumnDatasetByPath() throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      user_getRawColumnDatasetByPath_result result = new user_getRawColumnDatasetByPath_result();
      receiveBase(result, "user_getRawColumnDatasetByPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_getRawColumnDatasetByPath failed: unknown result");
    }

    public void user_deleteDataset(int datasetId) throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      send_user_deleteDataset(datasetId);
      recv_user_deleteDataset();
    }

    public void send_user_deleteDataset(int datasetId) throws org.apache.thrift.TException
    {
      user_deleteDataset_args args = new user_deleteDataset_args();
      args.setDatasetId(datasetId);
      sendBase("user_deleteDataset", args);
    }

    public void recv_user_deleteDataset() throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      user_deleteDataset_result result = new user_deleteDataset_result();
      receiveBase(result, "user_deleteDataset");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void user_unpinDataset(int datasetId) throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      send_user_unpinDataset(datasetId);
      recv_user_unpinDataset();
    }

    public void send_user_unpinDataset(int datasetId) throws org.apache.thrift.TException
    {
      user_unpinDataset_args args = new user_unpinDataset_args();
      args.setDatasetId(datasetId);
      sendBase("user_unpinDataset", args);
    }

    public void recv_user_unpinDataset() throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      user_unpinDataset_result result = new user_unpinDataset_result();
      receiveBase(result, "user_unpinDataset");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void user_renameDataset(String srcDataset, String dstDataset) throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      send_user_renameDataset(srcDataset, dstDataset);
      recv_user_renameDataset();
    }

    public void send_user_renameDataset(String srcDataset, String dstDataset) throws org.apache.thrift.TException
    {
      user_renameDataset_args args = new user_renameDataset_args();
      args.setSrcDataset(srcDataset);
      args.setDstDataset(dstDataset);
      sendBase("user_renameDataset", args);
    }

    public void recv_user_renameDataset() throws DatasetDoesNotExistException, org.apache.thrift.TException
    {
      user_renameDataset_result result = new user_renameDataset_result();
      receiveBase(result, "user_renameDataset");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void user_outOfMemoryForPinDataset(int datasetId) throws org.apache.thrift.TException
    {
      send_user_outOfMemoryForPinDataset(datasetId);
      recv_user_outOfMemoryForPinDataset();
    }

    public void send_user_outOfMemoryForPinDataset(int datasetId) throws org.apache.thrift.TException
    {
      user_outOfMemoryForPinDataset_args args = new user_outOfMemoryForPinDataset_args();
      args.setDatasetId(datasetId);
      sendBase("user_outOfMemoryForPinDataset", args);
    }

    public void recv_user_outOfMemoryForPinDataset() throws org.apache.thrift.TException
    {
      user_outOfMemoryForPinDataset_result result = new user_outOfMemoryForPinDataset_result();
      receiveBase(result, "user_outOfMemoryForPinDataset");
      return;
    }

    public List<DatasetInfo> cmd_ls(String folder) throws org.apache.thrift.TException
    {
      send_cmd_ls(folder);
      return recv_cmd_ls();
    }

    public void send_cmd_ls(String folder) throws org.apache.thrift.TException
    {
      cmd_ls_args args = new cmd_ls_args();
      args.setFolder(folder);
      sendBase("cmd_ls", args);
    }

    public List<DatasetInfo> recv_cmd_ls() throws org.apache.thrift.TException
    {
      cmd_ls_result result = new cmd_ls_result();
      receiveBase(result, "cmd_ls");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cmd_ls failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void worker_register(NetAddress workerNetAddress, long totalBytes, long usedBytes, List<Long> currentPartitionList, org.apache.thrift.async.AsyncMethodCallback<worker_register_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      worker_register_call method_call = new worker_register_call(workerNetAddress, totalBytes, usedBytes, currentPartitionList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class worker_register_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NetAddress workerNetAddress;
      private long totalBytes;
      private long usedBytes;
      private List<Long> currentPartitionList;
      public worker_register_call(NetAddress workerNetAddress, long totalBytes, long usedBytes, List<Long> currentPartitionList, org.apache.thrift.async.AsyncMethodCallback<worker_register_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerNetAddress = workerNetAddress;
        this.totalBytes = totalBytes;
        this.usedBytes = usedBytes;
        this.currentPartitionList = currentPartitionList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("worker_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        worker_register_args args = new worker_register_args();
        args.setWorkerNetAddress(workerNetAddress);
        args.setTotalBytes(totalBytes);
        args.setUsedBytes(usedBytes);
        args.setCurrentPartitionList(currentPartitionList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_worker_register();
      }
    }

    public void worker_heartbeat(long workerId, long usedBytes, List<Long> removedPartitionList, org.apache.thrift.async.AsyncMethodCallback<worker_heartbeat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      worker_heartbeat_call method_call = new worker_heartbeat_call(workerId, usedBytes, removedPartitionList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class worker_heartbeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long workerId;
      private long usedBytes;
      private List<Long> removedPartitionList;
      public worker_heartbeat_call(long workerId, long usedBytes, List<Long> removedPartitionList, org.apache.thrift.async.AsyncMethodCallback<worker_heartbeat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerId = workerId;
        this.usedBytes = usedBytes;
        this.removedPartitionList = removedPartitionList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("worker_heartbeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        worker_heartbeat_args args = new worker_heartbeat_args();
        args.setWorkerId(workerId);
        args.setUsedBytes(usedBytes);
        args.setRemovedPartitionList(removedPartitionList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Command getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_worker_heartbeat();
      }
    }

    public void worker_addPartition(long workerId, long workerUsedBytes, int datasetId, int partitionId, int partitionSizeBytes, org.apache.thrift.async.AsyncMethodCallback<worker_addPartition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      worker_addPartition_call method_call = new worker_addPartition_call(workerId, workerUsedBytes, datasetId, partitionId, partitionSizeBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class worker_addPartition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long workerId;
      private long workerUsedBytes;
      private int datasetId;
      private int partitionId;
      private int partitionSizeBytes;
      public worker_addPartition_call(long workerId, long workerUsedBytes, int datasetId, int partitionId, int partitionSizeBytes, org.apache.thrift.async.AsyncMethodCallback<worker_addPartition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerId = workerId;
        this.workerUsedBytes = workerUsedBytes;
        this.datasetId = datasetId;
        this.partitionId = partitionId;
        this.partitionSizeBytes = partitionSizeBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("worker_addPartition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        worker_addPartition_args args = new worker_addPartition_args();
        args.setWorkerId(workerId);
        args.setWorkerUsedBytes(workerUsedBytes);
        args.setDatasetId(datasetId);
        args.setPartitionId(partitionId);
        args.setPartitionSizeBytes(partitionSizeBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws PartitionDoesNotExistException, SuspectedPartitionSizeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_worker_addPartition();
      }
    }

    public void worker_addDoneRCDPartition(long workerId, int datasetId, int partitionId, int partitionSizeBytes, org.apache.thrift.async.AsyncMethodCallback<worker_addDoneRCDPartition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      worker_addDoneRCDPartition_call method_call = new worker_addDoneRCDPartition_call(workerId, datasetId, partitionId, partitionSizeBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class worker_addDoneRCDPartition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long workerId;
      private int datasetId;
      private int partitionId;
      private int partitionSizeBytes;
      public worker_addDoneRCDPartition_call(long workerId, int datasetId, int partitionId, int partitionSizeBytes, org.apache.thrift.async.AsyncMethodCallback<worker_addDoneRCDPartition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.workerId = workerId;
        this.datasetId = datasetId;
        this.partitionId = partitionId;
        this.partitionSizeBytes = partitionSizeBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("worker_addDoneRCDPartition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        worker_addDoneRCDPartition_args args = new worker_addDoneRCDPartition_args();
        args.setWorkerId(workerId);
        args.setDatasetId(datasetId);
        args.setPartitionId(partitionId);
        args.setPartitionSizeBytes(partitionSizeBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws PartitionDoesNotExistException, SuspectedPartitionSizeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_worker_addDoneRCDPartition();
      }
    }

    public void worker_getPinList(org.apache.thrift.async.AsyncMethodCallback<worker_getPinList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      worker_getPinList_call method_call = new worker_getPinList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class worker_getPinList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public worker_getPinList_call(org.apache.thrift.async.AsyncMethodCallback<worker_getPinList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("worker_getPinList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        worker_getPinList_args args = new worker_getPinList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_worker_getPinList();
      }
    }

    public void user_getUserId(org.apache.thrift.async.AsyncMethodCallback<user_getUserId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getUserId_call method_call = new user_getUserId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public user_getUserId_call(org.apache.thrift.async.AsyncMethodCallback<user_getUserId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getUserId_args args = new user_getUserId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getUserId();
      }
    }

    public void user_createRawColumnDataset(String datasetPath, int columns, int partitions, org.apache.thrift.async.AsyncMethodCallback<user_createRawColumnDataset_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_createRawColumnDataset_call method_call = new user_createRawColumnDataset_call(datasetPath, columns, partitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_createRawColumnDataset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasetPath;
      private int columns;
      private int partitions;
      public user_createRawColumnDataset_call(String datasetPath, int columns, int partitions, org.apache.thrift.async.AsyncMethodCallback<user_createRawColumnDataset_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetPath = datasetPath;
        this.columns = columns;
        this.partitions = partitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_createRawColumnDataset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_createRawColumnDataset_args args = new user_createRawColumnDataset_args();
        args.setDatasetPath(datasetPath);
        args.setColumns(columns);
        args.setPartitions(partitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws DatasetAlreadyExistException, InvalidPathException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_createRawColumnDataset();
      }
    }

    public void user_createDataset(String datasetPath, int partitions, org.apache.thrift.async.AsyncMethodCallback<user_createDataset_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_createDataset_call method_call = new user_createDataset_call(datasetPath, partitions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_createDataset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasetPath;
      private int partitions;
      public user_createDataset_call(String datasetPath, int partitions, org.apache.thrift.async.AsyncMethodCallback<user_createDataset_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetPath = datasetPath;
        this.partitions = partitions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_createDataset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_createDataset_args args = new user_createDataset_args();
        args.setDatasetPath(datasetPath);
        args.setPartitions(partitions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws DatasetAlreadyExistException, InvalidPathException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_createDataset();
      }
    }

    public void user_getDatasetId(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<user_getDatasetId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getDatasetId_call method_call = new user_getDatasetId_call(datasetPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getDatasetId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasetPath;
      public user_getDatasetId_call(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<user_getDatasetId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetPath = datasetPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getDatasetId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getDatasetId_args args = new user_getDatasetId_args();
        args.setDatasetPath(datasetPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getDatasetId();
      }
    }

    public void user_getLocalWorker(String host, org.apache.thrift.async.AsyncMethodCallback<user_getLocalWorker_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getLocalWorker_call method_call = new user_getLocalWorker_call(host, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getLocalWorker_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String host;
      public user_getLocalWorker_call(String host, org.apache.thrift.async.AsyncMethodCallback<user_getLocalWorker_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.host = host;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getLocalWorker", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getLocalWorker_args args = new user_getLocalWorker_args();
        args.setHost(host);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NetAddress getResult() throws NoLocalWorkerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getLocalWorker();
      }
    }

    public void user_getPartitionInfo(int datasetId, int partitionId, org.apache.thrift.async.AsyncMethodCallback<user_getPartitionInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getPartitionInfo_call method_call = new user_getPartitionInfo_call(datasetId, partitionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getPartitionInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int datasetId;
      private int partitionId;
      public user_getPartitionInfo_call(int datasetId, int partitionId, org.apache.thrift.async.AsyncMethodCallback<user_getPartitionInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetId = datasetId;
        this.partitionId = partitionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getPartitionInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getPartitionInfo_args args = new user_getPartitionInfo_args();
        args.setDatasetId(datasetId);
        args.setPartitionId(partitionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PartitionInfo getResult() throws PartitionDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getPartitionInfo();
      }
    }

    public void user_getDatasetById(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_getDatasetById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getDatasetById_call method_call = new user_getDatasetById_call(datasetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getDatasetById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int datasetId;
      public user_getDatasetById_call(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_getDatasetById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetId = datasetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getDatasetById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getDatasetById_args args = new user_getDatasetById_args();
        args.setDatasetId(datasetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DatasetInfo getResult() throws DatasetDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getDatasetById();
      }
    }

    public void user_getDatasetByPath(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<user_getDatasetByPath_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getDatasetByPath_call method_call = new user_getDatasetByPath_call(datasetPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getDatasetByPath_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasetPath;
      public user_getDatasetByPath_call(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<user_getDatasetByPath_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetPath = datasetPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getDatasetByPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getDatasetByPath_args args = new user_getDatasetByPath_args();
        args.setDatasetPath(datasetPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DatasetInfo getResult() throws DatasetDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getDatasetByPath();
      }
    }

    public void user_getRawColumnDatasetById(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_getRawColumnDatasetById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getRawColumnDatasetById_call method_call = new user_getRawColumnDatasetById_call(datasetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getRawColumnDatasetById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int datasetId;
      public user_getRawColumnDatasetById_call(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_getRawColumnDatasetById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetId = datasetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getRawColumnDatasetById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getRawColumnDatasetById_args args = new user_getRawColumnDatasetById_args();
        args.setDatasetId(datasetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RawColumnDatasetInfo getResult() throws DatasetDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getRawColumnDatasetById();
      }
    }

    public void user_getRawColumnDatasetByPath(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<user_getRawColumnDatasetByPath_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_getRawColumnDatasetByPath_call method_call = new user_getRawColumnDatasetByPath_call(datasetPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_getRawColumnDatasetByPath_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datasetPath;
      public user_getRawColumnDatasetByPath_call(String datasetPath, org.apache.thrift.async.AsyncMethodCallback<user_getRawColumnDatasetByPath_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetPath = datasetPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_getRawColumnDatasetByPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_getRawColumnDatasetByPath_args args = new user_getRawColumnDatasetByPath_args();
        args.setDatasetPath(datasetPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RawColumnDatasetInfo getResult() throws DatasetDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_getRawColumnDatasetByPath();
      }
    }

    public void user_deleteDataset(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_deleteDataset_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_deleteDataset_call method_call = new user_deleteDataset_call(datasetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_deleteDataset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int datasetId;
      public user_deleteDataset_call(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_deleteDataset_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetId = datasetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_deleteDataset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_deleteDataset_args args = new user_deleteDataset_args();
        args.setDatasetId(datasetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DatasetDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_user_deleteDataset();
      }
    }

    public void user_unpinDataset(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_unpinDataset_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_unpinDataset_call method_call = new user_unpinDataset_call(datasetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_unpinDataset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int datasetId;
      public user_unpinDataset_call(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_unpinDataset_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetId = datasetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_unpinDataset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_unpinDataset_args args = new user_unpinDataset_args();
        args.setDatasetId(datasetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DatasetDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_user_unpinDataset();
      }
    }

    public void user_renameDataset(String srcDataset, String dstDataset, org.apache.thrift.async.AsyncMethodCallback<user_renameDataset_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_renameDataset_call method_call = new user_renameDataset_call(srcDataset, dstDataset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_renameDataset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String srcDataset;
      private String dstDataset;
      public user_renameDataset_call(String srcDataset, String dstDataset, org.apache.thrift.async.AsyncMethodCallback<user_renameDataset_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.srcDataset = srcDataset;
        this.dstDataset = dstDataset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_renameDataset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_renameDataset_args args = new user_renameDataset_args();
        args.setSrcDataset(srcDataset);
        args.setDstDataset(dstDataset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DatasetDoesNotExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_user_renameDataset();
      }
    }

    public void user_outOfMemoryForPinDataset(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_outOfMemoryForPinDataset_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_outOfMemoryForPinDataset_call method_call = new user_outOfMemoryForPinDataset_call(datasetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_outOfMemoryForPinDataset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int datasetId;
      public user_outOfMemoryForPinDataset_call(int datasetId, org.apache.thrift.async.AsyncMethodCallback<user_outOfMemoryForPinDataset_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datasetId = datasetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_outOfMemoryForPinDataset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_outOfMemoryForPinDataset_args args = new user_outOfMemoryForPinDataset_args();
        args.setDatasetId(datasetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_user_outOfMemoryForPinDataset();
      }
    }

    public void cmd_ls(String folder, org.apache.thrift.async.AsyncMethodCallback<cmd_ls_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cmd_ls_call method_call = new cmd_ls_call(folder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cmd_ls_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String folder;
      public cmd_ls_call(String folder, org.apache.thrift.async.AsyncMethodCallback<cmd_ls_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.folder = folder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cmd_ls", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cmd_ls_args args = new cmd_ls_args();
        args.setFolder(folder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DatasetInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cmd_ls();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("worker_register", new worker_register());
      processMap.put("worker_heartbeat", new worker_heartbeat());
      processMap.put("worker_addPartition", new worker_addPartition());
      processMap.put("worker_addDoneRCDPartition", new worker_addDoneRCDPartition());
      processMap.put("worker_getPinList", new worker_getPinList());
      processMap.put("user_getUserId", new user_getUserId());
      processMap.put("user_createRawColumnDataset", new user_createRawColumnDataset());
      processMap.put("user_createDataset", new user_createDataset());
      processMap.put("user_getDatasetId", new user_getDatasetId());
      processMap.put("user_getLocalWorker", new user_getLocalWorker());
      processMap.put("user_getPartitionInfo", new user_getPartitionInfo());
      processMap.put("user_getDatasetById", new user_getDatasetById());
      processMap.put("user_getDatasetByPath", new user_getDatasetByPath());
      processMap.put("user_getRawColumnDatasetById", new user_getRawColumnDatasetById());
      processMap.put("user_getRawColumnDatasetByPath", new user_getRawColumnDatasetByPath());
      processMap.put("user_deleteDataset", new user_deleteDataset());
      processMap.put("user_unpinDataset", new user_unpinDataset());
      processMap.put("user_renameDataset", new user_renameDataset());
      processMap.put("user_outOfMemoryForPinDataset", new user_outOfMemoryForPinDataset());
      processMap.put("cmd_ls", new cmd_ls());
      return processMap;
    }

    public static class worker_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, worker_register_args> {
      public worker_register() {
        super("worker_register");
      }

      public worker_register_args getEmptyArgsInstance() {
        return new worker_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public worker_register_result getResult(I iface, worker_register_args args) throws org.apache.thrift.TException {
        worker_register_result result = new worker_register_result();
        result.success = iface.worker_register(args.workerNetAddress, args.totalBytes, args.usedBytes, args.currentPartitionList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class worker_heartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, worker_heartbeat_args> {
      public worker_heartbeat() {
        super("worker_heartbeat");
      }

      public worker_heartbeat_args getEmptyArgsInstance() {
        return new worker_heartbeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public worker_heartbeat_result getResult(I iface, worker_heartbeat_args args) throws org.apache.thrift.TException {
        worker_heartbeat_result result = new worker_heartbeat_result();
        result.success = iface.worker_heartbeat(args.workerId, args.usedBytes, args.removedPartitionList);
        return result;
      }
    }

    public static class worker_addPartition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, worker_addPartition_args> {
      public worker_addPartition() {
        super("worker_addPartition");
      }

      public worker_addPartition_args getEmptyArgsInstance() {
        return new worker_addPartition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public worker_addPartition_result getResult(I iface, worker_addPartition_args args) throws org.apache.thrift.TException {
        worker_addPartition_result result = new worker_addPartition_result();
        try {
          iface.worker_addPartition(args.workerId, args.workerUsedBytes, args.datasetId, args.partitionId, args.partitionSizeBytes);
        } catch (PartitionDoesNotExistException eP) {
          result.eP = eP;
        } catch (SuspectedPartitionSizeException eS) {
          result.eS = eS;
        }
        return result;
      }
    }

    public static class worker_addDoneRCDPartition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, worker_addDoneRCDPartition_args> {
      public worker_addDoneRCDPartition() {
        super("worker_addDoneRCDPartition");
      }

      public worker_addDoneRCDPartition_args getEmptyArgsInstance() {
        return new worker_addDoneRCDPartition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public worker_addDoneRCDPartition_result getResult(I iface, worker_addDoneRCDPartition_args args) throws org.apache.thrift.TException {
        worker_addDoneRCDPartition_result result = new worker_addDoneRCDPartition_result();
        try {
          iface.worker_addDoneRCDPartition(args.workerId, args.datasetId, args.partitionId, args.partitionSizeBytes);
        } catch (PartitionDoesNotExistException eP) {
          result.eP = eP;
        } catch (SuspectedPartitionSizeException eS) {
          result.eS = eS;
        }
        return result;
      }
    }

    public static class worker_getPinList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, worker_getPinList_args> {
      public worker_getPinList() {
        super("worker_getPinList");
      }

      public worker_getPinList_args getEmptyArgsInstance() {
        return new worker_getPinList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public worker_getPinList_result getResult(I iface, worker_getPinList_args args) throws org.apache.thrift.TException {
        worker_getPinList_result result = new worker_getPinList_result();
        result.success = iface.worker_getPinList();
        return result;
      }
    }

    public static class user_getUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getUserId_args> {
      public user_getUserId() {
        super("user_getUserId");
      }

      public user_getUserId_args getEmptyArgsInstance() {
        return new user_getUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getUserId_result getResult(I iface, user_getUserId_args args) throws org.apache.thrift.TException {
        user_getUserId_result result = new user_getUserId_result();
        result.success = iface.user_getUserId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class user_createRawColumnDataset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_createRawColumnDataset_args> {
      public user_createRawColumnDataset() {
        super("user_createRawColumnDataset");
      }

      public user_createRawColumnDataset_args getEmptyArgsInstance() {
        return new user_createRawColumnDataset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_createRawColumnDataset_result getResult(I iface, user_createRawColumnDataset_args args) throws org.apache.thrift.TException {
        user_createRawColumnDataset_result result = new user_createRawColumnDataset_result();
        try {
          result.success = iface.user_createRawColumnDataset(args.datasetPath, args.columns, args.partitions);
          result.setSuccessIsSet(true);
        } catch (DatasetAlreadyExistException eR) {
          result.eR = eR;
        } catch (InvalidPathException eI) {
          result.eI = eI;
        }
        return result;
      }
    }

    public static class user_createDataset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_createDataset_args> {
      public user_createDataset() {
        super("user_createDataset");
      }

      public user_createDataset_args getEmptyArgsInstance() {
        return new user_createDataset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_createDataset_result getResult(I iface, user_createDataset_args args) throws org.apache.thrift.TException {
        user_createDataset_result result = new user_createDataset_result();
        try {
          result.success = iface.user_createDataset(args.datasetPath, args.partitions);
          result.setSuccessIsSet(true);
        } catch (DatasetAlreadyExistException eR) {
          result.eR = eR;
        } catch (InvalidPathException eI) {
          result.eI = eI;
        }
        return result;
      }
    }

    public static class user_getDatasetId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getDatasetId_args> {
      public user_getDatasetId() {
        super("user_getDatasetId");
      }

      public user_getDatasetId_args getEmptyArgsInstance() {
        return new user_getDatasetId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getDatasetId_result getResult(I iface, user_getDatasetId_args args) throws org.apache.thrift.TException {
        user_getDatasetId_result result = new user_getDatasetId_result();
        result.success = iface.user_getDatasetId(args.datasetPath);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class user_getLocalWorker<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getLocalWorker_args> {
      public user_getLocalWorker() {
        super("user_getLocalWorker");
      }

      public user_getLocalWorker_args getEmptyArgsInstance() {
        return new user_getLocalWorker_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getLocalWorker_result getResult(I iface, user_getLocalWorker_args args) throws org.apache.thrift.TException {
        user_getLocalWorker_result result = new user_getLocalWorker_result();
        try {
          result.success = iface.user_getLocalWorker(args.host);
        } catch (NoLocalWorkerException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_getPartitionInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getPartitionInfo_args> {
      public user_getPartitionInfo() {
        super("user_getPartitionInfo");
      }

      public user_getPartitionInfo_args getEmptyArgsInstance() {
        return new user_getPartitionInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getPartitionInfo_result getResult(I iface, user_getPartitionInfo_args args) throws org.apache.thrift.TException {
        user_getPartitionInfo_result result = new user_getPartitionInfo_result();
        try {
          result.success = iface.user_getPartitionInfo(args.datasetId, args.partitionId);
        } catch (PartitionDoesNotExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_getDatasetById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getDatasetById_args> {
      public user_getDatasetById() {
        super("user_getDatasetById");
      }

      public user_getDatasetById_args getEmptyArgsInstance() {
        return new user_getDatasetById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getDatasetById_result getResult(I iface, user_getDatasetById_args args) throws org.apache.thrift.TException {
        user_getDatasetById_result result = new user_getDatasetById_result();
        try {
          result.success = iface.user_getDatasetById(args.datasetId);
        } catch (DatasetDoesNotExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_getDatasetByPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getDatasetByPath_args> {
      public user_getDatasetByPath() {
        super("user_getDatasetByPath");
      }

      public user_getDatasetByPath_args getEmptyArgsInstance() {
        return new user_getDatasetByPath_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getDatasetByPath_result getResult(I iface, user_getDatasetByPath_args args) throws org.apache.thrift.TException {
        user_getDatasetByPath_result result = new user_getDatasetByPath_result();
        try {
          result.success = iface.user_getDatasetByPath(args.datasetPath);
        } catch (DatasetDoesNotExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_getRawColumnDatasetById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getRawColumnDatasetById_args> {
      public user_getRawColumnDatasetById() {
        super("user_getRawColumnDatasetById");
      }

      public user_getRawColumnDatasetById_args getEmptyArgsInstance() {
        return new user_getRawColumnDatasetById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getRawColumnDatasetById_result getResult(I iface, user_getRawColumnDatasetById_args args) throws org.apache.thrift.TException {
        user_getRawColumnDatasetById_result result = new user_getRawColumnDatasetById_result();
        try {
          result.success = iface.user_getRawColumnDatasetById(args.datasetId);
        } catch (DatasetDoesNotExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_getRawColumnDatasetByPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_getRawColumnDatasetByPath_args> {
      public user_getRawColumnDatasetByPath() {
        super("user_getRawColumnDatasetByPath");
      }

      public user_getRawColumnDatasetByPath_args getEmptyArgsInstance() {
        return new user_getRawColumnDatasetByPath_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_getRawColumnDatasetByPath_result getResult(I iface, user_getRawColumnDatasetByPath_args args) throws org.apache.thrift.TException {
        user_getRawColumnDatasetByPath_result result = new user_getRawColumnDatasetByPath_result();
        try {
          result.success = iface.user_getRawColumnDatasetByPath(args.datasetPath);
        } catch (DatasetDoesNotExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_deleteDataset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_deleteDataset_args> {
      public user_deleteDataset() {
        super("user_deleteDataset");
      }

      public user_deleteDataset_args getEmptyArgsInstance() {
        return new user_deleteDataset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_deleteDataset_result getResult(I iface, user_deleteDataset_args args) throws org.apache.thrift.TException {
        user_deleteDataset_result result = new user_deleteDataset_result();
        try {
          iface.user_deleteDataset(args.datasetId);
        } catch (DatasetDoesNotExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_unpinDataset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_unpinDataset_args> {
      public user_unpinDataset() {
        super("user_unpinDataset");
      }

      public user_unpinDataset_args getEmptyArgsInstance() {
        return new user_unpinDataset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_unpinDataset_result getResult(I iface, user_unpinDataset_args args) throws org.apache.thrift.TException {
        user_unpinDataset_result result = new user_unpinDataset_result();
        try {
          iface.user_unpinDataset(args.datasetId);
        } catch (DatasetDoesNotExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_renameDataset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_renameDataset_args> {
      public user_renameDataset() {
        super("user_renameDataset");
      }

      public user_renameDataset_args getEmptyArgsInstance() {
        return new user_renameDataset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_renameDataset_result getResult(I iface, user_renameDataset_args args) throws org.apache.thrift.TException {
        user_renameDataset_result result = new user_renameDataset_result();
        try {
          iface.user_renameDataset(args.srcDataset, args.dstDataset);
        } catch (DatasetDoesNotExistException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class user_outOfMemoryForPinDataset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_outOfMemoryForPinDataset_args> {
      public user_outOfMemoryForPinDataset() {
        super("user_outOfMemoryForPinDataset");
      }

      public user_outOfMemoryForPinDataset_args getEmptyArgsInstance() {
        return new user_outOfMemoryForPinDataset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public user_outOfMemoryForPinDataset_result getResult(I iface, user_outOfMemoryForPinDataset_args args) throws org.apache.thrift.TException {
        user_outOfMemoryForPinDataset_result result = new user_outOfMemoryForPinDataset_result();
        iface.user_outOfMemoryForPinDataset(args.datasetId);
        return result;
      }
    }

    public static class cmd_ls<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cmd_ls_args> {
      public cmd_ls() {
        super("cmd_ls");
      }

      public cmd_ls_args getEmptyArgsInstance() {
        return new cmd_ls_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cmd_ls_result getResult(I iface, cmd_ls_args args) throws org.apache.thrift.TException {
        cmd_ls_result result = new cmd_ls_result();
        result.success = iface.cmd_ls(args.folder);
        return result;
      }
    }

  }

  public static class worker_register_args implements org.apache.thrift.TBase<worker_register_args, worker_register_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_register_args");

    private static final org.apache.thrift.protocol.TField WORKER_NET_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("workerNetAddress", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOTAL_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalBytes", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField USED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("usedBytes", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField CURRENT_PARTITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPartitionList", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_register_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_register_argsTupleSchemeFactory());
    }

    public NetAddress workerNetAddress; // required
    public long totalBytes; // required
    public long usedBytes; // required
    public List<Long> currentPartitionList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_NET_ADDRESS((short)1, "workerNetAddress"),
      TOTAL_BYTES((short)2, "totalBytes"),
      USED_BYTES((short)3, "usedBytes"),
      CURRENT_PARTITION_LIST((short)4, "currentPartitionList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_NET_ADDRESS
            return WORKER_NET_ADDRESS;
          case 2: // TOTAL_BYTES
            return TOTAL_BYTES;
          case 3: // USED_BYTES
            return USED_BYTES;
          case 4: // CURRENT_PARTITION_LIST
            return CURRENT_PARTITION_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTALBYTES_ISSET_ID = 0;
    private static final int __USEDBYTES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_NET_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("workerNetAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      tmpMap.put(_Fields.TOTAL_BYTES, new org.apache.thrift.meta_data.FieldMetaData("totalBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("usedBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CURRENT_PARTITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("currentPartitionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_register_args.class, metaDataMap);
    }

    public worker_register_args() {
    }

    public worker_register_args(
      NetAddress workerNetAddress,
      long totalBytes,
      long usedBytes,
      List<Long> currentPartitionList)
    {
      this();
      this.workerNetAddress = workerNetAddress;
      this.totalBytes = totalBytes;
      setTotalBytesIsSet(true);
      this.usedBytes = usedBytes;
      setUsedBytesIsSet(true);
      this.currentPartitionList = currentPartitionList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_register_args(worker_register_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetWorkerNetAddress()) {
        this.workerNetAddress = new NetAddress(other.workerNetAddress);
      }
      this.totalBytes = other.totalBytes;
      this.usedBytes = other.usedBytes;
      if (other.isSetCurrentPartitionList()) {
        List<Long> __this__currentPartitionList = new ArrayList<Long>();
        for (Long other_element : other.currentPartitionList) {
          __this__currentPartitionList.add(other_element);
        }
        this.currentPartitionList = __this__currentPartitionList;
      }
    }

    public worker_register_args deepCopy() {
      return new worker_register_args(this);
    }

    @Override
    public void clear() {
      this.workerNetAddress = null;
      setTotalBytesIsSet(false);
      this.totalBytes = 0;
      setUsedBytesIsSet(false);
      this.usedBytes = 0;
      this.currentPartitionList = null;
    }

    public NetAddress getWorkerNetAddress() {
      return this.workerNetAddress;
    }

    public worker_register_args setWorkerNetAddress(NetAddress workerNetAddress) {
      this.workerNetAddress = workerNetAddress;
      return this;
    }

    public void unsetWorkerNetAddress() {
      this.workerNetAddress = null;
    }

    /** Returns true if field workerNetAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerNetAddress() {
      return this.workerNetAddress != null;
    }

    public void setWorkerNetAddressIsSet(boolean value) {
      if (!value) {
        this.workerNetAddress = null;
      }
    }

    public long getTotalBytes() {
      return this.totalBytes;
    }

    public worker_register_args setTotalBytes(long totalBytes) {
      this.totalBytes = totalBytes;
      setTotalBytesIsSet(true);
      return this;
    }

    public void unsetTotalBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALBYTES_ISSET_ID);
    }

    /** Returns true if field totalBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTALBYTES_ISSET_ID);
    }

    public void setTotalBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALBYTES_ISSET_ID, value);
    }

    public long getUsedBytes() {
      return this.usedBytes;
    }

    public worker_register_args setUsedBytes(long usedBytes) {
      this.usedBytes = usedBytes;
      setUsedBytesIsSet(true);
      return this;
    }

    public void unsetUsedBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDBYTES_ISSET_ID);
    }

    /** Returns true if field usedBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetUsedBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __USEDBYTES_ISSET_ID);
    }

    public void setUsedBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDBYTES_ISSET_ID, value);
    }

    public int getCurrentPartitionListSize() {
      return (this.currentPartitionList == null) ? 0 : this.currentPartitionList.size();
    }

    public java.util.Iterator<Long> getCurrentPartitionListIterator() {
      return (this.currentPartitionList == null) ? null : this.currentPartitionList.iterator();
    }

    public void addToCurrentPartitionList(long elem) {
      if (this.currentPartitionList == null) {
        this.currentPartitionList = new ArrayList<Long>();
      }
      this.currentPartitionList.add(elem);
    }

    public List<Long> getCurrentPartitionList() {
      return this.currentPartitionList;
    }

    public worker_register_args setCurrentPartitionList(List<Long> currentPartitionList) {
      this.currentPartitionList = currentPartitionList;
      return this;
    }

    public void unsetCurrentPartitionList() {
      this.currentPartitionList = null;
    }

    /** Returns true if field currentPartitionList is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPartitionList() {
      return this.currentPartitionList != null;
    }

    public void setCurrentPartitionListIsSet(boolean value) {
      if (!value) {
        this.currentPartitionList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_NET_ADDRESS:
        if (value == null) {
          unsetWorkerNetAddress();
        } else {
          setWorkerNetAddress((NetAddress)value);
        }
        break;

      case TOTAL_BYTES:
        if (value == null) {
          unsetTotalBytes();
        } else {
          setTotalBytes((Long)value);
        }
        break;

      case USED_BYTES:
        if (value == null) {
          unsetUsedBytes();
        } else {
          setUsedBytes((Long)value);
        }
        break;

      case CURRENT_PARTITION_LIST:
        if (value == null) {
          unsetCurrentPartitionList();
        } else {
          setCurrentPartitionList((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_NET_ADDRESS:
        return getWorkerNetAddress();

      case TOTAL_BYTES:
        return Long.valueOf(getTotalBytes());

      case USED_BYTES:
        return Long.valueOf(getUsedBytes());

      case CURRENT_PARTITION_LIST:
        return getCurrentPartitionList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_NET_ADDRESS:
        return isSetWorkerNetAddress();
      case TOTAL_BYTES:
        return isSetTotalBytes();
      case USED_BYTES:
        return isSetUsedBytes();
      case CURRENT_PARTITION_LIST:
        return isSetCurrentPartitionList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_register_args)
        return this.equals((worker_register_args)that);
      return false;
    }

    public boolean equals(worker_register_args that) {
      if (that == null)
        return false;

      boolean this_present_workerNetAddress = true && this.isSetWorkerNetAddress();
      boolean that_present_workerNetAddress = true && that.isSetWorkerNetAddress();
      if (this_present_workerNetAddress || that_present_workerNetAddress) {
        if (!(this_present_workerNetAddress && that_present_workerNetAddress))
          return false;
        if (!this.workerNetAddress.equals(that.workerNetAddress))
          return false;
      }

      boolean this_present_totalBytes = true;
      boolean that_present_totalBytes = true;
      if (this_present_totalBytes || that_present_totalBytes) {
        if (!(this_present_totalBytes && that_present_totalBytes))
          return false;
        if (this.totalBytes != that.totalBytes)
          return false;
      }

      boolean this_present_usedBytes = true;
      boolean that_present_usedBytes = true;
      if (this_present_usedBytes || that_present_usedBytes) {
        if (!(this_present_usedBytes && that_present_usedBytes))
          return false;
        if (this.usedBytes != that.usedBytes)
          return false;
      }

      boolean this_present_currentPartitionList = true && this.isSetCurrentPartitionList();
      boolean that_present_currentPartitionList = true && that.isSetCurrentPartitionList();
      if (this_present_currentPartitionList || that_present_currentPartitionList) {
        if (!(this_present_currentPartitionList && that_present_currentPartitionList))
          return false;
        if (!this.currentPartitionList.equals(that.currentPartitionList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_register_args typedOther = (worker_register_args)other;

      lastComparison = Boolean.valueOf(isSetWorkerNetAddress()).compareTo(typedOther.isSetWorkerNetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerNetAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerNetAddress, typedOther.workerNetAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTotalBytes()).compareTo(typedOther.isSetTotalBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalBytes, typedOther.totalBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsedBytes()).compareTo(typedOther.isSetUsedBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsedBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedBytes, typedOther.usedBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPartitionList()).compareTo(typedOther.isSetCurrentPartitionList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPartitionList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPartitionList, typedOther.currentPartitionList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_register_args(");
      boolean first = true;

      sb.append("workerNetAddress:");
      if (this.workerNetAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.workerNetAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("totalBytes:");
      sb.append(this.totalBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("usedBytes:");
      sb.append(this.usedBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPartitionList:");
      if (this.currentPartitionList == null) {
        sb.append("null");
      } else {
        sb.append(this.currentPartitionList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (workerNetAddress != null) {
        workerNetAddress.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_register_argsStandardSchemeFactory implements SchemeFactory {
      public worker_register_argsStandardScheme getScheme() {
        return new worker_register_argsStandardScheme();
      }
    }

    private static class worker_register_argsStandardScheme extends StandardScheme<worker_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_NET_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workerNetAddress = new NetAddress();
                struct.workerNetAddress.read(iprot);
                struct.setWorkerNetAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOTAL_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.totalBytes = iprot.readI64();
                struct.setTotalBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USED_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.usedBytes = iprot.readI64();
                struct.setUsedBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CURRENT_PARTITION_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.currentPartitionList = new ArrayList<Long>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    long _elem36; // required
                    _elem36 = iprot.readI64();
                    struct.currentPartitionList.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setCurrentPartitionListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.workerNetAddress != null) {
          oprot.writeFieldBegin(WORKER_NET_ADDRESS_FIELD_DESC);
          struct.workerNetAddress.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOTAL_BYTES_FIELD_DESC);
        oprot.writeI64(struct.totalBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.usedBytes);
        oprot.writeFieldEnd();
        if (struct.currentPartitionList != null) {
          oprot.writeFieldBegin(CURRENT_PARTITION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.currentPartitionList.size()));
            for (long _iter37 : struct.currentPartitionList)
            {
              oprot.writeI64(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_register_argsTupleSchemeFactory implements SchemeFactory {
      public worker_register_argsTupleScheme getScheme() {
        return new worker_register_argsTupleScheme();
      }
    }

    private static class worker_register_argsTupleScheme extends TupleScheme<worker_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerNetAddress()) {
          optionals.set(0);
        }
        if (struct.isSetTotalBytes()) {
          optionals.set(1);
        }
        if (struct.isSetUsedBytes()) {
          optionals.set(2);
        }
        if (struct.isSetCurrentPartitionList()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWorkerNetAddress()) {
          struct.workerNetAddress.write(oprot);
        }
        if (struct.isSetTotalBytes()) {
          oprot.writeI64(struct.totalBytes);
        }
        if (struct.isSetUsedBytes()) {
          oprot.writeI64(struct.usedBytes);
        }
        if (struct.isSetCurrentPartitionList()) {
          {
            oprot.writeI32(struct.currentPartitionList.size());
            for (long _iter38 : struct.currentPartitionList)
            {
              oprot.writeI64(_iter38);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.workerNetAddress = new NetAddress();
          struct.workerNetAddress.read(iprot);
          struct.setWorkerNetAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.totalBytes = iprot.readI64();
          struct.setTotalBytesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.usedBytes = iprot.readI64();
          struct.setUsedBytesIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.currentPartitionList = new ArrayList<Long>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              long _elem41; // required
              _elem41 = iprot.readI64();
              struct.currentPartitionList.add(_elem41);
            }
          }
          struct.setCurrentPartitionListIsSet(true);
        }
      }
    }

  }

  public static class worker_register_result implements org.apache.thrift.TBase<worker_register_result, worker_register_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_register_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_register_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_register_result.class, metaDataMap);
    }

    public worker_register_result() {
    }

    public worker_register_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_register_result(worker_register_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public worker_register_result deepCopy() {
      return new worker_register_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public worker_register_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_register_result)
        return this.equals((worker_register_result)that);
      return false;
    }

    public boolean equals(worker_register_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_register_result typedOther = (worker_register_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_register_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_register_resultStandardSchemeFactory implements SchemeFactory {
      public worker_register_resultStandardScheme getScheme() {
        return new worker_register_resultStandardScheme();
      }
    }

    private static class worker_register_resultStandardScheme extends StandardScheme<worker_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_register_resultTupleSchemeFactory implements SchemeFactory {
      public worker_register_resultTupleScheme getScheme() {
        return new worker_register_resultTupleScheme();
      }
    }

    private static class worker_register_resultTupleScheme extends TupleScheme<worker_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class worker_heartbeat_args implements org.apache.thrift.TBase<worker_heartbeat_args, worker_heartbeat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_heartbeat_args");

    private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("usedBytes", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField REMOVED_PARTITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("removedPartitionList", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_heartbeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_heartbeat_argsTupleSchemeFactory());
    }

    public long workerId; // required
    public long usedBytes; // required
    public List<Long> removedPartitionList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_ID((short)1, "workerId"),
      USED_BYTES((short)2, "usedBytes"),
      REMOVED_PARTITION_LIST((short)3, "removedPartitionList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_ID
            return WORKER_ID;
          case 2: // USED_BYTES
            return USED_BYTES;
          case 3: // REMOVED_PARTITION_LIST
            return REMOVED_PARTITION_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WORKERID_ISSET_ID = 0;
    private static final int __USEDBYTES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("usedBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REMOVED_PARTITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("removedPartitionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_heartbeat_args.class, metaDataMap);
    }

    public worker_heartbeat_args() {
    }

    public worker_heartbeat_args(
      long workerId,
      long usedBytes,
      List<Long> removedPartitionList)
    {
      this();
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      this.usedBytes = usedBytes;
      setUsedBytesIsSet(true);
      this.removedPartitionList = removedPartitionList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_heartbeat_args(worker_heartbeat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.workerId = other.workerId;
      this.usedBytes = other.usedBytes;
      if (other.isSetRemovedPartitionList()) {
        List<Long> __this__removedPartitionList = new ArrayList<Long>();
        for (Long other_element : other.removedPartitionList) {
          __this__removedPartitionList.add(other_element);
        }
        this.removedPartitionList = __this__removedPartitionList;
      }
    }

    public worker_heartbeat_args deepCopy() {
      return new worker_heartbeat_args(this);
    }

    @Override
    public void clear() {
      setWorkerIdIsSet(false);
      this.workerId = 0;
      setUsedBytesIsSet(false);
      this.usedBytes = 0;
      this.removedPartitionList = null;
    }

    public long getWorkerId() {
      return this.workerId;
    }

    public worker_heartbeat_args setWorkerId(long workerId) {
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      return this;
    }

    public void unsetWorkerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerId() {
      return EncodingUtils.testBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    public void setWorkerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERID_ISSET_ID, value);
    }

    public long getUsedBytes() {
      return this.usedBytes;
    }

    public worker_heartbeat_args setUsedBytes(long usedBytes) {
      this.usedBytes = usedBytes;
      setUsedBytesIsSet(true);
      return this;
    }

    public void unsetUsedBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDBYTES_ISSET_ID);
    }

    /** Returns true if field usedBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetUsedBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __USEDBYTES_ISSET_ID);
    }

    public void setUsedBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDBYTES_ISSET_ID, value);
    }

    public int getRemovedPartitionListSize() {
      return (this.removedPartitionList == null) ? 0 : this.removedPartitionList.size();
    }

    public java.util.Iterator<Long> getRemovedPartitionListIterator() {
      return (this.removedPartitionList == null) ? null : this.removedPartitionList.iterator();
    }

    public void addToRemovedPartitionList(long elem) {
      if (this.removedPartitionList == null) {
        this.removedPartitionList = new ArrayList<Long>();
      }
      this.removedPartitionList.add(elem);
    }

    public List<Long> getRemovedPartitionList() {
      return this.removedPartitionList;
    }

    public worker_heartbeat_args setRemovedPartitionList(List<Long> removedPartitionList) {
      this.removedPartitionList = removedPartitionList;
      return this;
    }

    public void unsetRemovedPartitionList() {
      this.removedPartitionList = null;
    }

    /** Returns true if field removedPartitionList is set (has been assigned a value) and false otherwise */
    public boolean isSetRemovedPartitionList() {
      return this.removedPartitionList != null;
    }

    public void setRemovedPartitionListIsSet(boolean value) {
      if (!value) {
        this.removedPartitionList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_ID:
        if (value == null) {
          unsetWorkerId();
        } else {
          setWorkerId((Long)value);
        }
        break;

      case USED_BYTES:
        if (value == null) {
          unsetUsedBytes();
        } else {
          setUsedBytes((Long)value);
        }
        break;

      case REMOVED_PARTITION_LIST:
        if (value == null) {
          unsetRemovedPartitionList();
        } else {
          setRemovedPartitionList((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_ID:
        return Long.valueOf(getWorkerId());

      case USED_BYTES:
        return Long.valueOf(getUsedBytes());

      case REMOVED_PARTITION_LIST:
        return getRemovedPartitionList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_ID:
        return isSetWorkerId();
      case USED_BYTES:
        return isSetUsedBytes();
      case REMOVED_PARTITION_LIST:
        return isSetRemovedPartitionList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_heartbeat_args)
        return this.equals((worker_heartbeat_args)that);
      return false;
    }

    public boolean equals(worker_heartbeat_args that) {
      if (that == null)
        return false;

      boolean this_present_workerId = true;
      boolean that_present_workerId = true;
      if (this_present_workerId || that_present_workerId) {
        if (!(this_present_workerId && that_present_workerId))
          return false;
        if (this.workerId != that.workerId)
          return false;
      }

      boolean this_present_usedBytes = true;
      boolean that_present_usedBytes = true;
      if (this_present_usedBytes || that_present_usedBytes) {
        if (!(this_present_usedBytes && that_present_usedBytes))
          return false;
        if (this.usedBytes != that.usedBytes)
          return false;
      }

      boolean this_present_removedPartitionList = true && this.isSetRemovedPartitionList();
      boolean that_present_removedPartitionList = true && that.isSetRemovedPartitionList();
      if (this_present_removedPartitionList || that_present_removedPartitionList) {
        if (!(this_present_removedPartitionList && that_present_removedPartitionList))
          return false;
        if (!this.removedPartitionList.equals(that.removedPartitionList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_heartbeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_heartbeat_args typedOther = (worker_heartbeat_args)other;

      lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(typedOther.isSetWorkerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, typedOther.workerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsedBytes()).compareTo(typedOther.isSetUsedBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsedBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedBytes, typedOther.usedBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemovedPartitionList()).compareTo(typedOther.isSetRemovedPartitionList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemovedPartitionList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removedPartitionList, typedOther.removedPartitionList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_heartbeat_args(");
      boolean first = true;

      sb.append("workerId:");
      sb.append(this.workerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("usedBytes:");
      sb.append(this.usedBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("removedPartitionList:");
      if (this.removedPartitionList == null) {
        sb.append("null");
      } else {
        sb.append(this.removedPartitionList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_heartbeat_argsStandardSchemeFactory implements SchemeFactory {
      public worker_heartbeat_argsStandardScheme getScheme() {
        return new worker_heartbeat_argsStandardScheme();
      }
    }

    private static class worker_heartbeat_argsStandardScheme extends StandardScheme<worker_heartbeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_heartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.workerId = iprot.readI64();
                struct.setWorkerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USED_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.usedBytes = iprot.readI64();
                struct.setUsedBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REMOVED_PARTITION_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.removedPartitionList = new ArrayList<Long>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    long _elem44; // required
                    _elem44 = iprot.readI64();
                    struct.removedPartitionList.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setRemovedPartitionListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_heartbeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
        oprot.writeI64(struct.workerId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.usedBytes);
        oprot.writeFieldEnd();
        if (struct.removedPartitionList != null) {
          oprot.writeFieldBegin(REMOVED_PARTITION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.removedPartitionList.size()));
            for (long _iter45 : struct.removedPartitionList)
            {
              oprot.writeI64(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_heartbeat_argsTupleSchemeFactory implements SchemeFactory {
      public worker_heartbeat_argsTupleScheme getScheme() {
        return new worker_heartbeat_argsTupleScheme();
      }
    }

    private static class worker_heartbeat_argsTupleScheme extends TupleScheme<worker_heartbeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_heartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerId()) {
          optionals.set(0);
        }
        if (struct.isSetUsedBytes()) {
          optionals.set(1);
        }
        if (struct.isSetRemovedPartitionList()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWorkerId()) {
          oprot.writeI64(struct.workerId);
        }
        if (struct.isSetUsedBytes()) {
          oprot.writeI64(struct.usedBytes);
        }
        if (struct.isSetRemovedPartitionList()) {
          {
            oprot.writeI32(struct.removedPartitionList.size());
            for (long _iter46 : struct.removedPartitionList)
            {
              oprot.writeI64(_iter46);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_heartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.workerId = iprot.readI64();
          struct.setWorkerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.usedBytes = iprot.readI64();
          struct.setUsedBytesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.removedPartitionList = new ArrayList<Long>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              long _elem49; // required
              _elem49 = iprot.readI64();
              struct.removedPartitionList.add(_elem49);
            }
          }
          struct.setRemovedPartitionListIsSet(true);
        }
      }
    }

  }

  public static class worker_heartbeat_result implements org.apache.thrift.TBase<worker_heartbeat_result, worker_heartbeat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_heartbeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_heartbeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_heartbeat_resultTupleSchemeFactory());
    }

    public Command success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Command.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_heartbeat_result.class, metaDataMap);
    }

    public worker_heartbeat_result() {
    }

    public worker_heartbeat_result(
      Command success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_heartbeat_result(worker_heartbeat_result other) {
      if (other.isSetSuccess()) {
        this.success = new Command(other.success);
      }
    }

    public worker_heartbeat_result deepCopy() {
      return new worker_heartbeat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Command getSuccess() {
      return this.success;
    }

    public worker_heartbeat_result setSuccess(Command success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Command)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_heartbeat_result)
        return this.equals((worker_heartbeat_result)that);
      return false;
    }

    public boolean equals(worker_heartbeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_heartbeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_heartbeat_result typedOther = (worker_heartbeat_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_heartbeat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_heartbeat_resultStandardSchemeFactory implements SchemeFactory {
      public worker_heartbeat_resultStandardScheme getScheme() {
        return new worker_heartbeat_resultStandardScheme();
      }
    }

    private static class worker_heartbeat_resultStandardScheme extends StandardScheme<worker_heartbeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_heartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Command();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_heartbeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_heartbeat_resultTupleSchemeFactory implements SchemeFactory {
      public worker_heartbeat_resultTupleScheme getScheme() {
        return new worker_heartbeat_resultTupleScheme();
      }
    }

    private static class worker_heartbeat_resultTupleScheme extends TupleScheme<worker_heartbeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_heartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_heartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Command();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class worker_addPartition_args implements org.apache.thrift.TBase<worker_addPartition_args, worker_addPartition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_addPartition_args");

    private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField WORKER_USED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("workerUsedBytes", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionId", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PARTITION_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionSizeBytes", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_addPartition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_addPartition_argsTupleSchemeFactory());
    }

    public long workerId; // required
    public long workerUsedBytes; // required
    public int datasetId; // required
    public int partitionId; // required
    public int partitionSizeBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_ID((short)1, "workerId"),
      WORKER_USED_BYTES((short)2, "workerUsedBytes"),
      DATASET_ID((short)3, "datasetId"),
      PARTITION_ID((short)4, "partitionId"),
      PARTITION_SIZE_BYTES((short)5, "partitionSizeBytes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_ID
            return WORKER_ID;
          case 2: // WORKER_USED_BYTES
            return WORKER_USED_BYTES;
          case 3: // DATASET_ID
            return DATASET_ID;
          case 4: // PARTITION_ID
            return PARTITION_ID;
          case 5: // PARTITION_SIZE_BYTES
            return PARTITION_SIZE_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WORKERID_ISSET_ID = 0;
    private static final int __WORKERUSEDBYTES_ISSET_ID = 1;
    private static final int __DATASETID_ISSET_ID = 2;
    private static final int __PARTITIONID_ISSET_ID = 3;
    private static final int __PARTITIONSIZEBYTES_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.WORKER_USED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("workerUsedBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partitionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTITION_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("partitionSizeBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_addPartition_args.class, metaDataMap);
    }

    public worker_addPartition_args() {
    }

    public worker_addPartition_args(
      long workerId,
      long workerUsedBytes,
      int datasetId,
      int partitionId,
      int partitionSizeBytes)
    {
      this();
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      this.workerUsedBytes = workerUsedBytes;
      setWorkerUsedBytesIsSet(true);
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      this.partitionId = partitionId;
      setPartitionIdIsSet(true);
      this.partitionSizeBytes = partitionSizeBytes;
      setPartitionSizeBytesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_addPartition_args(worker_addPartition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.workerId = other.workerId;
      this.workerUsedBytes = other.workerUsedBytes;
      this.datasetId = other.datasetId;
      this.partitionId = other.partitionId;
      this.partitionSizeBytes = other.partitionSizeBytes;
    }

    public worker_addPartition_args deepCopy() {
      return new worker_addPartition_args(this);
    }

    @Override
    public void clear() {
      setWorkerIdIsSet(false);
      this.workerId = 0;
      setWorkerUsedBytesIsSet(false);
      this.workerUsedBytes = 0;
      setDatasetIdIsSet(false);
      this.datasetId = 0;
      setPartitionIdIsSet(false);
      this.partitionId = 0;
      setPartitionSizeBytesIsSet(false);
      this.partitionSizeBytes = 0;
    }

    public long getWorkerId() {
      return this.workerId;
    }

    public worker_addPartition_args setWorkerId(long workerId) {
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      return this;
    }

    public void unsetWorkerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerId() {
      return EncodingUtils.testBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    public void setWorkerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERID_ISSET_ID, value);
    }

    public long getWorkerUsedBytes() {
      return this.workerUsedBytes;
    }

    public worker_addPartition_args setWorkerUsedBytes(long workerUsedBytes) {
      this.workerUsedBytes = workerUsedBytes;
      setWorkerUsedBytesIsSet(true);
      return this;
    }

    public void unsetWorkerUsedBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERUSEDBYTES_ISSET_ID);
    }

    /** Returns true if field workerUsedBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerUsedBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __WORKERUSEDBYTES_ISSET_ID);
    }

    public void setWorkerUsedBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERUSEDBYTES_ISSET_ID, value);
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public worker_addPartition_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASETID_ISSET_ID, value);
    }

    public int getPartitionId() {
      return this.partitionId;
    }

    public worker_addPartition_args setPartitionId(int partitionId) {
      this.partitionId = partitionId;
      setPartitionIdIsSet(true);
      return this;
    }

    public void unsetPartitionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
    }

    /** Returns true if field partitionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitionId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
    }

    public void setPartitionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONID_ISSET_ID, value);
    }

    public int getPartitionSizeBytes() {
      return this.partitionSizeBytes;
    }

    public worker_addPartition_args setPartitionSizeBytes(int partitionSizeBytes) {
      this.partitionSizeBytes = partitionSizeBytes;
      setPartitionSizeBytesIsSet(true);
      return this;
    }

    public void unsetPartitionSizeBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONSIZEBYTES_ISSET_ID);
    }

    /** Returns true if field partitionSizeBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitionSizeBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTITIONSIZEBYTES_ISSET_ID);
    }

    public void setPartitionSizeBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONSIZEBYTES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_ID:
        if (value == null) {
          unsetWorkerId();
        } else {
          setWorkerId((Long)value);
        }
        break;

      case WORKER_USED_BYTES:
        if (value == null) {
          unsetWorkerUsedBytes();
        } else {
          setWorkerUsedBytes((Long)value);
        }
        break;

      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      case PARTITION_ID:
        if (value == null) {
          unsetPartitionId();
        } else {
          setPartitionId((Integer)value);
        }
        break;

      case PARTITION_SIZE_BYTES:
        if (value == null) {
          unsetPartitionSizeBytes();
        } else {
          setPartitionSizeBytes((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_ID:
        return Long.valueOf(getWorkerId());

      case WORKER_USED_BYTES:
        return Long.valueOf(getWorkerUsedBytes());

      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      case PARTITION_ID:
        return Integer.valueOf(getPartitionId());

      case PARTITION_SIZE_BYTES:
        return Integer.valueOf(getPartitionSizeBytes());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_ID:
        return isSetWorkerId();
      case WORKER_USED_BYTES:
        return isSetWorkerUsedBytes();
      case DATASET_ID:
        return isSetDatasetId();
      case PARTITION_ID:
        return isSetPartitionId();
      case PARTITION_SIZE_BYTES:
        return isSetPartitionSizeBytes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_addPartition_args)
        return this.equals((worker_addPartition_args)that);
      return false;
    }

    public boolean equals(worker_addPartition_args that) {
      if (that == null)
        return false;

      boolean this_present_workerId = true;
      boolean that_present_workerId = true;
      if (this_present_workerId || that_present_workerId) {
        if (!(this_present_workerId && that_present_workerId))
          return false;
        if (this.workerId != that.workerId)
          return false;
      }

      boolean this_present_workerUsedBytes = true;
      boolean that_present_workerUsedBytes = true;
      if (this_present_workerUsedBytes || that_present_workerUsedBytes) {
        if (!(this_present_workerUsedBytes && that_present_workerUsedBytes))
          return false;
        if (this.workerUsedBytes != that.workerUsedBytes)
          return false;
      }

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      boolean this_present_partitionId = true;
      boolean that_present_partitionId = true;
      if (this_present_partitionId || that_present_partitionId) {
        if (!(this_present_partitionId && that_present_partitionId))
          return false;
        if (this.partitionId != that.partitionId)
          return false;
      }

      boolean this_present_partitionSizeBytes = true;
      boolean that_present_partitionSizeBytes = true;
      if (this_present_partitionSizeBytes || that_present_partitionSizeBytes) {
        if (!(this_present_partitionSizeBytes && that_present_partitionSizeBytes))
          return false;
        if (this.partitionSizeBytes != that.partitionSizeBytes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_addPartition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_addPartition_args typedOther = (worker_addPartition_args)other;

      lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(typedOther.isSetWorkerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, typedOther.workerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorkerUsedBytes()).compareTo(typedOther.isSetWorkerUsedBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerUsedBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerUsedBytes, typedOther.workerUsedBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartitionId()).compareTo(typedOther.isSetPartitionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionId, typedOther.partitionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartitionSizeBytes()).compareTo(typedOther.isSetPartitionSizeBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitionSizeBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionSizeBytes, typedOther.partitionSizeBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_addPartition_args(");
      boolean first = true;

      sb.append("workerId:");
      sb.append(this.workerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("workerUsedBytes:");
      sb.append(this.workerUsedBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitionId:");
      sb.append(this.partitionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitionSizeBytes:");
      sb.append(this.partitionSizeBytes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_addPartition_argsStandardSchemeFactory implements SchemeFactory {
      public worker_addPartition_argsStandardScheme getScheme() {
        return new worker_addPartition_argsStandardScheme();
      }
    }

    private static class worker_addPartition_argsStandardScheme extends StandardScheme<worker_addPartition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_addPartition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.workerId = iprot.readI64();
                struct.setWorkerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORKER_USED_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.workerUsedBytes = iprot.readI64();
                struct.setWorkerUsedBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARTITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partitionId = iprot.readI32();
                struct.setPartitionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARTITION_SIZE_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partitionSizeBytes = iprot.readI32();
                struct.setPartitionSizeBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_addPartition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
        oprot.writeI64(struct.workerId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WORKER_USED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.workerUsedBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI32(struct.partitionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTITION_SIZE_BYTES_FIELD_DESC);
        oprot.writeI32(struct.partitionSizeBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_addPartition_argsTupleSchemeFactory implements SchemeFactory {
      public worker_addPartition_argsTupleScheme getScheme() {
        return new worker_addPartition_argsTupleScheme();
      }
    }

    private static class worker_addPartition_argsTupleScheme extends TupleScheme<worker_addPartition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_addPartition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerId()) {
          optionals.set(0);
        }
        if (struct.isSetWorkerUsedBytes()) {
          optionals.set(1);
        }
        if (struct.isSetDatasetId()) {
          optionals.set(2);
        }
        if (struct.isSetPartitionId()) {
          optionals.set(3);
        }
        if (struct.isSetPartitionSizeBytes()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetWorkerId()) {
          oprot.writeI64(struct.workerId);
        }
        if (struct.isSetWorkerUsedBytes()) {
          oprot.writeI64(struct.workerUsedBytes);
        }
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
        if (struct.isSetPartitionId()) {
          oprot.writeI32(struct.partitionId);
        }
        if (struct.isSetPartitionSizeBytes()) {
          oprot.writeI32(struct.partitionSizeBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_addPartition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.workerId = iprot.readI64();
          struct.setWorkerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.workerUsedBytes = iprot.readI64();
          struct.setWorkerUsedBytesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.partitionId = iprot.readI32();
          struct.setPartitionIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.partitionSizeBytes = iprot.readI32();
          struct.setPartitionSizeBytesIsSet(true);
        }
      }
    }

  }

  public static class worker_addPartition_result implements org.apache.thrift.TBase<worker_addPartition_result, worker_addPartition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_addPartition_result");

    private static final org.apache.thrift.protocol.TField E_P_FIELD_DESC = new org.apache.thrift.protocol.TField("eP", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_S_FIELD_DESC = new org.apache.thrift.protocol.TField("eS", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_addPartition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_addPartition_resultTupleSchemeFactory());
    }

    public PartitionDoesNotExistException eP; // required
    public SuspectedPartitionSizeException eS; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E_P((short)1, "eP"),
      E_S((short)2, "eS");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E_P
            return E_P;
          case 2: // E_S
            return E_S;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E_P, new org.apache.thrift.meta_data.FieldMetaData("eP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_S, new org.apache.thrift.meta_data.FieldMetaData("eS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_addPartition_result.class, metaDataMap);
    }

    public worker_addPartition_result() {
    }

    public worker_addPartition_result(
      PartitionDoesNotExistException eP,
      SuspectedPartitionSizeException eS)
    {
      this();
      this.eP = eP;
      this.eS = eS;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_addPartition_result(worker_addPartition_result other) {
      if (other.isSetEP()) {
        this.eP = new PartitionDoesNotExistException(other.eP);
      }
      if (other.isSetES()) {
        this.eS = new SuspectedPartitionSizeException(other.eS);
      }
    }

    public worker_addPartition_result deepCopy() {
      return new worker_addPartition_result(this);
    }

    @Override
    public void clear() {
      this.eP = null;
      this.eS = null;
    }

    public PartitionDoesNotExistException getEP() {
      return this.eP;
    }

    public worker_addPartition_result setEP(PartitionDoesNotExistException eP) {
      this.eP = eP;
      return this;
    }

    public void unsetEP() {
      this.eP = null;
    }

    /** Returns true if field eP is set (has been assigned a value) and false otherwise */
    public boolean isSetEP() {
      return this.eP != null;
    }

    public void setEPIsSet(boolean value) {
      if (!value) {
        this.eP = null;
      }
    }

    public SuspectedPartitionSizeException getES() {
      return this.eS;
    }

    public worker_addPartition_result setES(SuspectedPartitionSizeException eS) {
      this.eS = eS;
      return this;
    }

    public void unsetES() {
      this.eS = null;
    }

    /** Returns true if field eS is set (has been assigned a value) and false otherwise */
    public boolean isSetES() {
      return this.eS != null;
    }

    public void setESIsSet(boolean value) {
      if (!value) {
        this.eS = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E_P:
        if (value == null) {
          unsetEP();
        } else {
          setEP((PartitionDoesNotExistException)value);
        }
        break;

      case E_S:
        if (value == null) {
          unsetES();
        } else {
          setES((SuspectedPartitionSizeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E_P:
        return getEP();

      case E_S:
        return getES();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E_P:
        return isSetEP();
      case E_S:
        return isSetES();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_addPartition_result)
        return this.equals((worker_addPartition_result)that);
      return false;
    }

    public boolean equals(worker_addPartition_result that) {
      if (that == null)
        return false;

      boolean this_present_eP = true && this.isSetEP();
      boolean that_present_eP = true && that.isSetEP();
      if (this_present_eP || that_present_eP) {
        if (!(this_present_eP && that_present_eP))
          return false;
        if (!this.eP.equals(that.eP))
          return false;
      }

      boolean this_present_eS = true && this.isSetES();
      boolean that_present_eS = true && that.isSetES();
      if (this_present_eS || that_present_eS) {
        if (!(this_present_eS && that_present_eS))
          return false;
        if (!this.eS.equals(that.eS))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_addPartition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_addPartition_result typedOther = (worker_addPartition_result)other;

      lastComparison = Boolean.valueOf(isSetEP()).compareTo(typedOther.isSetEP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eP, typedOther.eP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetES()).compareTo(typedOther.isSetES());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetES()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eS, typedOther.eS);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_addPartition_result(");
      boolean first = true;

      sb.append("eP:");
      if (this.eP == null) {
        sb.append("null");
      } else {
        sb.append(this.eP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eS:");
      if (this.eS == null) {
        sb.append("null");
      } else {
        sb.append(this.eS);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_addPartition_resultStandardSchemeFactory implements SchemeFactory {
      public worker_addPartition_resultStandardScheme getScheme() {
        return new worker_addPartition_resultStandardScheme();
      }
    }

    private static class worker_addPartition_resultStandardScheme extends StandardScheme<worker_addPartition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_addPartition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E_P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eP = new PartitionDoesNotExistException();
                struct.eP.read(iprot);
                struct.setEPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_S
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eS = new SuspectedPartitionSizeException();
                struct.eS.read(iprot);
                struct.setESIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_addPartition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eP != null) {
          oprot.writeFieldBegin(E_P_FIELD_DESC);
          struct.eP.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eS != null) {
          oprot.writeFieldBegin(E_S_FIELD_DESC);
          struct.eS.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_addPartition_resultTupleSchemeFactory implements SchemeFactory {
      public worker_addPartition_resultTupleScheme getScheme() {
        return new worker_addPartition_resultTupleScheme();
      }
    }

    private static class worker_addPartition_resultTupleScheme extends TupleScheme<worker_addPartition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_addPartition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEP()) {
          optionals.set(0);
        }
        if (struct.isSetES()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEP()) {
          struct.eP.write(oprot);
        }
        if (struct.isSetES()) {
          struct.eS.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_addPartition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.eP = new PartitionDoesNotExistException();
          struct.eP.read(iprot);
          struct.setEPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eS = new SuspectedPartitionSizeException();
          struct.eS.read(iprot);
          struct.setESIsSet(true);
        }
      }
    }

  }

  public static class worker_addDoneRCDPartition_args implements org.apache.thrift.TBase<worker_addDoneRCDPartition_args, worker_addDoneRCDPartition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_addDoneRCDPartition_args");

    private static final org.apache.thrift.protocol.TField WORKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PARTITION_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionSizeBytes", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_addDoneRCDPartition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_addDoneRCDPartition_argsTupleSchemeFactory());
    }

    public long workerId; // required
    public int datasetId; // required
    public int partitionId; // required
    public int partitionSizeBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORKER_ID((short)1, "workerId"),
      DATASET_ID((short)2, "datasetId"),
      PARTITION_ID((short)3, "partitionId"),
      PARTITION_SIZE_BYTES((short)4, "partitionSizeBytes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORKER_ID
            return WORKER_ID;
          case 2: // DATASET_ID
            return DATASET_ID;
          case 3: // PARTITION_ID
            return PARTITION_ID;
          case 4: // PARTITION_SIZE_BYTES
            return PARTITION_SIZE_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WORKERID_ISSET_ID = 0;
    private static final int __DATASETID_ISSET_ID = 1;
    private static final int __PARTITIONID_ISSET_ID = 2;
    private static final int __PARTITIONSIZEBYTES_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORKER_ID, new org.apache.thrift.meta_data.FieldMetaData("workerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partitionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTITION_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("partitionSizeBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_addDoneRCDPartition_args.class, metaDataMap);
    }

    public worker_addDoneRCDPartition_args() {
    }

    public worker_addDoneRCDPartition_args(
      long workerId,
      int datasetId,
      int partitionId,
      int partitionSizeBytes)
    {
      this();
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      this.partitionId = partitionId;
      setPartitionIdIsSet(true);
      this.partitionSizeBytes = partitionSizeBytes;
      setPartitionSizeBytesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_addDoneRCDPartition_args(worker_addDoneRCDPartition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.workerId = other.workerId;
      this.datasetId = other.datasetId;
      this.partitionId = other.partitionId;
      this.partitionSizeBytes = other.partitionSizeBytes;
    }

    public worker_addDoneRCDPartition_args deepCopy() {
      return new worker_addDoneRCDPartition_args(this);
    }

    @Override
    public void clear() {
      setWorkerIdIsSet(false);
      this.workerId = 0;
      setDatasetIdIsSet(false);
      this.datasetId = 0;
      setPartitionIdIsSet(false);
      this.partitionId = 0;
      setPartitionSizeBytesIsSet(false);
      this.partitionSizeBytes = 0;
    }

    public long getWorkerId() {
      return this.workerId;
    }

    public worker_addDoneRCDPartition_args setWorkerId(long workerId) {
      this.workerId = workerId;
      setWorkerIdIsSet(true);
      return this;
    }

    public void unsetWorkerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    /** Returns true if field workerId is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkerId() {
      return EncodingUtils.testBit(__isset_bitfield, __WORKERID_ISSET_ID);
    }

    public void setWorkerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKERID_ISSET_ID, value);
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public worker_addDoneRCDPartition_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASETID_ISSET_ID, value);
    }

    public int getPartitionId() {
      return this.partitionId;
    }

    public worker_addDoneRCDPartition_args setPartitionId(int partitionId) {
      this.partitionId = partitionId;
      setPartitionIdIsSet(true);
      return this;
    }

    public void unsetPartitionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
    }

    /** Returns true if field partitionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitionId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
    }

    public void setPartitionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONID_ISSET_ID, value);
    }

    public int getPartitionSizeBytes() {
      return this.partitionSizeBytes;
    }

    public worker_addDoneRCDPartition_args setPartitionSizeBytes(int partitionSizeBytes) {
      this.partitionSizeBytes = partitionSizeBytes;
      setPartitionSizeBytesIsSet(true);
      return this;
    }

    public void unsetPartitionSizeBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONSIZEBYTES_ISSET_ID);
    }

    /** Returns true if field partitionSizeBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitionSizeBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTITIONSIZEBYTES_ISSET_ID);
    }

    public void setPartitionSizeBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONSIZEBYTES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORKER_ID:
        if (value == null) {
          unsetWorkerId();
        } else {
          setWorkerId((Long)value);
        }
        break;

      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      case PARTITION_ID:
        if (value == null) {
          unsetPartitionId();
        } else {
          setPartitionId((Integer)value);
        }
        break;

      case PARTITION_SIZE_BYTES:
        if (value == null) {
          unsetPartitionSizeBytes();
        } else {
          setPartitionSizeBytes((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORKER_ID:
        return Long.valueOf(getWorkerId());

      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      case PARTITION_ID:
        return Integer.valueOf(getPartitionId());

      case PARTITION_SIZE_BYTES:
        return Integer.valueOf(getPartitionSizeBytes());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORKER_ID:
        return isSetWorkerId();
      case DATASET_ID:
        return isSetDatasetId();
      case PARTITION_ID:
        return isSetPartitionId();
      case PARTITION_SIZE_BYTES:
        return isSetPartitionSizeBytes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_addDoneRCDPartition_args)
        return this.equals((worker_addDoneRCDPartition_args)that);
      return false;
    }

    public boolean equals(worker_addDoneRCDPartition_args that) {
      if (that == null)
        return false;

      boolean this_present_workerId = true;
      boolean that_present_workerId = true;
      if (this_present_workerId || that_present_workerId) {
        if (!(this_present_workerId && that_present_workerId))
          return false;
        if (this.workerId != that.workerId)
          return false;
      }

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      boolean this_present_partitionId = true;
      boolean that_present_partitionId = true;
      if (this_present_partitionId || that_present_partitionId) {
        if (!(this_present_partitionId && that_present_partitionId))
          return false;
        if (this.partitionId != that.partitionId)
          return false;
      }

      boolean this_present_partitionSizeBytes = true;
      boolean that_present_partitionSizeBytes = true;
      if (this_present_partitionSizeBytes || that_present_partitionSizeBytes) {
        if (!(this_present_partitionSizeBytes && that_present_partitionSizeBytes))
          return false;
        if (this.partitionSizeBytes != that.partitionSizeBytes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_addDoneRCDPartition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_addDoneRCDPartition_args typedOther = (worker_addDoneRCDPartition_args)other;

      lastComparison = Boolean.valueOf(isSetWorkerId()).compareTo(typedOther.isSetWorkerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerId, typedOther.workerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartitionId()).compareTo(typedOther.isSetPartitionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionId, typedOther.partitionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartitionSizeBytes()).compareTo(typedOther.isSetPartitionSizeBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitionSizeBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionSizeBytes, typedOther.partitionSizeBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_addDoneRCDPartition_args(");
      boolean first = true;

      sb.append("workerId:");
      sb.append(this.workerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitionId:");
      sb.append(this.partitionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitionSizeBytes:");
      sb.append(this.partitionSizeBytes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_addDoneRCDPartition_argsStandardSchemeFactory implements SchemeFactory {
      public worker_addDoneRCDPartition_argsStandardScheme getScheme() {
        return new worker_addDoneRCDPartition_argsStandardScheme();
      }
    }

    private static class worker_addDoneRCDPartition_argsStandardScheme extends StandardScheme<worker_addDoneRCDPartition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_addDoneRCDPartition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WORKER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.workerId = iprot.readI64();
                struct.setWorkerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partitionId = iprot.readI32();
                struct.setPartitionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARTITION_SIZE_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partitionSizeBytes = iprot.readI32();
                struct.setPartitionSizeBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_addDoneRCDPartition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WORKER_ID_FIELD_DESC);
        oprot.writeI64(struct.workerId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI32(struct.partitionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTITION_SIZE_BYTES_FIELD_DESC);
        oprot.writeI32(struct.partitionSizeBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_addDoneRCDPartition_argsTupleSchemeFactory implements SchemeFactory {
      public worker_addDoneRCDPartition_argsTupleScheme getScheme() {
        return new worker_addDoneRCDPartition_argsTupleScheme();
      }
    }

    private static class worker_addDoneRCDPartition_argsTupleScheme extends TupleScheme<worker_addDoneRCDPartition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_addDoneRCDPartition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWorkerId()) {
          optionals.set(0);
        }
        if (struct.isSetDatasetId()) {
          optionals.set(1);
        }
        if (struct.isSetPartitionId()) {
          optionals.set(2);
        }
        if (struct.isSetPartitionSizeBytes()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWorkerId()) {
          oprot.writeI64(struct.workerId);
        }
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
        if (struct.isSetPartitionId()) {
          oprot.writeI32(struct.partitionId);
        }
        if (struct.isSetPartitionSizeBytes()) {
          oprot.writeI32(struct.partitionSizeBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_addDoneRCDPartition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.workerId = iprot.readI64();
          struct.setWorkerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partitionId = iprot.readI32();
          struct.setPartitionIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.partitionSizeBytes = iprot.readI32();
          struct.setPartitionSizeBytesIsSet(true);
        }
      }
    }

  }

  public static class worker_addDoneRCDPartition_result implements org.apache.thrift.TBase<worker_addDoneRCDPartition_result, worker_addDoneRCDPartition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_addDoneRCDPartition_result");

    private static final org.apache.thrift.protocol.TField E_P_FIELD_DESC = new org.apache.thrift.protocol.TField("eP", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_S_FIELD_DESC = new org.apache.thrift.protocol.TField("eS", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_addDoneRCDPartition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_addDoneRCDPartition_resultTupleSchemeFactory());
    }

    public PartitionDoesNotExistException eP; // required
    public SuspectedPartitionSizeException eS; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E_P((short)1, "eP"),
      E_S((short)2, "eS");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E_P
            return E_P;
          case 2: // E_S
            return E_S;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E_P, new org.apache.thrift.meta_data.FieldMetaData("eP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_S, new org.apache.thrift.meta_data.FieldMetaData("eS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_addDoneRCDPartition_result.class, metaDataMap);
    }

    public worker_addDoneRCDPartition_result() {
    }

    public worker_addDoneRCDPartition_result(
      PartitionDoesNotExistException eP,
      SuspectedPartitionSizeException eS)
    {
      this();
      this.eP = eP;
      this.eS = eS;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_addDoneRCDPartition_result(worker_addDoneRCDPartition_result other) {
      if (other.isSetEP()) {
        this.eP = new PartitionDoesNotExistException(other.eP);
      }
      if (other.isSetES()) {
        this.eS = new SuspectedPartitionSizeException(other.eS);
      }
    }

    public worker_addDoneRCDPartition_result deepCopy() {
      return new worker_addDoneRCDPartition_result(this);
    }

    @Override
    public void clear() {
      this.eP = null;
      this.eS = null;
    }

    public PartitionDoesNotExistException getEP() {
      return this.eP;
    }

    public worker_addDoneRCDPartition_result setEP(PartitionDoesNotExistException eP) {
      this.eP = eP;
      return this;
    }

    public void unsetEP() {
      this.eP = null;
    }

    /** Returns true if field eP is set (has been assigned a value) and false otherwise */
    public boolean isSetEP() {
      return this.eP != null;
    }

    public void setEPIsSet(boolean value) {
      if (!value) {
        this.eP = null;
      }
    }

    public SuspectedPartitionSizeException getES() {
      return this.eS;
    }

    public worker_addDoneRCDPartition_result setES(SuspectedPartitionSizeException eS) {
      this.eS = eS;
      return this;
    }

    public void unsetES() {
      this.eS = null;
    }

    /** Returns true if field eS is set (has been assigned a value) and false otherwise */
    public boolean isSetES() {
      return this.eS != null;
    }

    public void setESIsSet(boolean value) {
      if (!value) {
        this.eS = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E_P:
        if (value == null) {
          unsetEP();
        } else {
          setEP((PartitionDoesNotExistException)value);
        }
        break;

      case E_S:
        if (value == null) {
          unsetES();
        } else {
          setES((SuspectedPartitionSizeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E_P:
        return getEP();

      case E_S:
        return getES();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E_P:
        return isSetEP();
      case E_S:
        return isSetES();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_addDoneRCDPartition_result)
        return this.equals((worker_addDoneRCDPartition_result)that);
      return false;
    }

    public boolean equals(worker_addDoneRCDPartition_result that) {
      if (that == null)
        return false;

      boolean this_present_eP = true && this.isSetEP();
      boolean that_present_eP = true && that.isSetEP();
      if (this_present_eP || that_present_eP) {
        if (!(this_present_eP && that_present_eP))
          return false;
        if (!this.eP.equals(that.eP))
          return false;
      }

      boolean this_present_eS = true && this.isSetES();
      boolean that_present_eS = true && that.isSetES();
      if (this_present_eS || that_present_eS) {
        if (!(this_present_eS && that_present_eS))
          return false;
        if (!this.eS.equals(that.eS))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_addDoneRCDPartition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_addDoneRCDPartition_result typedOther = (worker_addDoneRCDPartition_result)other;

      lastComparison = Boolean.valueOf(isSetEP()).compareTo(typedOther.isSetEP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eP, typedOther.eP);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetES()).compareTo(typedOther.isSetES());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetES()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eS, typedOther.eS);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_addDoneRCDPartition_result(");
      boolean first = true;

      sb.append("eP:");
      if (this.eP == null) {
        sb.append("null");
      } else {
        sb.append(this.eP);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eS:");
      if (this.eS == null) {
        sb.append("null");
      } else {
        sb.append(this.eS);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_addDoneRCDPartition_resultStandardSchemeFactory implements SchemeFactory {
      public worker_addDoneRCDPartition_resultStandardScheme getScheme() {
        return new worker_addDoneRCDPartition_resultStandardScheme();
      }
    }

    private static class worker_addDoneRCDPartition_resultStandardScheme extends StandardScheme<worker_addDoneRCDPartition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_addDoneRCDPartition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E_P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eP = new PartitionDoesNotExistException();
                struct.eP.read(iprot);
                struct.setEPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_S
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eS = new SuspectedPartitionSizeException();
                struct.eS.read(iprot);
                struct.setESIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_addDoneRCDPartition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eP != null) {
          oprot.writeFieldBegin(E_P_FIELD_DESC);
          struct.eP.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eS != null) {
          oprot.writeFieldBegin(E_S_FIELD_DESC);
          struct.eS.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_addDoneRCDPartition_resultTupleSchemeFactory implements SchemeFactory {
      public worker_addDoneRCDPartition_resultTupleScheme getScheme() {
        return new worker_addDoneRCDPartition_resultTupleScheme();
      }
    }

    private static class worker_addDoneRCDPartition_resultTupleScheme extends TupleScheme<worker_addDoneRCDPartition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_addDoneRCDPartition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEP()) {
          optionals.set(0);
        }
        if (struct.isSetES()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEP()) {
          struct.eP.write(oprot);
        }
        if (struct.isSetES()) {
          struct.eS.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_addDoneRCDPartition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.eP = new PartitionDoesNotExistException();
          struct.eP.read(iprot);
          struct.setEPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eS = new SuspectedPartitionSizeException();
          struct.eS.read(iprot);
          struct.setESIsSet(true);
        }
      }
    }

  }

  public static class worker_getPinList_args implements org.apache.thrift.TBase<worker_getPinList_args, worker_getPinList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_getPinList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_getPinList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_getPinList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_getPinList_args.class, metaDataMap);
    }

    public worker_getPinList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_getPinList_args(worker_getPinList_args other) {
    }

    public worker_getPinList_args deepCopy() {
      return new worker_getPinList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_getPinList_args)
        return this.equals((worker_getPinList_args)that);
      return false;
    }

    public boolean equals(worker_getPinList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_getPinList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_getPinList_args typedOther = (worker_getPinList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_getPinList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_getPinList_argsStandardSchemeFactory implements SchemeFactory {
      public worker_getPinList_argsStandardScheme getScheme() {
        return new worker_getPinList_argsStandardScheme();
      }
    }

    private static class worker_getPinList_argsStandardScheme extends StandardScheme<worker_getPinList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_getPinList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_getPinList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_getPinList_argsTupleSchemeFactory implements SchemeFactory {
      public worker_getPinList_argsTupleScheme getScheme() {
        return new worker_getPinList_argsTupleScheme();
      }
    }

    private static class worker_getPinList_argsTupleScheme extends TupleScheme<worker_getPinList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_getPinList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_getPinList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class worker_getPinList_result implements org.apache.thrift.TBase<worker_getPinList_result, worker_getPinList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worker_getPinList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worker_getPinList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worker_getPinList_resultTupleSchemeFactory());
    }

    public Set<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worker_getPinList_result.class, metaDataMap);
    }

    public worker_getPinList_result() {
    }

    public worker_getPinList_result(
      Set<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worker_getPinList_result(worker_getPinList_result other) {
      if (other.isSetSuccess()) {
        Set<Integer> __this__success = new HashSet<Integer>();
        for (Integer other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public worker_getPinList_result deepCopy() {
      return new worker_getPinList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new HashSet<Integer>();
      }
      this.success.add(elem);
    }

    public Set<Integer> getSuccess() {
      return this.success;
    }

    public worker_getPinList_result setSuccess(Set<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worker_getPinList_result)
        return this.equals((worker_getPinList_result)that);
      return false;
    }

    public boolean equals(worker_getPinList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(worker_getPinList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      worker_getPinList_result typedOther = (worker_getPinList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worker_getPinList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worker_getPinList_resultStandardSchemeFactory implements SchemeFactory {
      public worker_getPinList_resultStandardScheme getScheme() {
        return new worker_getPinList_resultStandardScheme();
      }
    }

    private static class worker_getPinList_resultStandardScheme extends StandardScheme<worker_getPinList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worker_getPinList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set50 = iprot.readSetBegin();
                  struct.success = new HashSet<Integer>(2*_set50.size);
                  for (int _i51 = 0; _i51 < _set50.size; ++_i51)
                  {
                    int _elem52; // required
                    _elem52 = iprot.readI32();
                    struct.success.add(_elem52);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worker_getPinList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter53 : struct.success)
            {
              oprot.writeI32(_iter53);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worker_getPinList_resultTupleSchemeFactory implements SchemeFactory {
      public worker_getPinList_resultTupleScheme getScheme() {
        return new worker_getPinList_resultTupleScheme();
      }
    }

    private static class worker_getPinList_resultTupleScheme extends TupleScheme<worker_getPinList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worker_getPinList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter54 : struct.success)
            {
              oprot.writeI32(_iter54);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worker_getPinList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set55 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new HashSet<Integer>(2*_set55.size);
            for (int _i56 = 0; _i56 < _set55.size; ++_i56)
            {
              int _elem57; // required
              _elem57 = iprot.readI32();
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_getUserId_args implements org.apache.thrift.TBase<user_getUserId_args, user_getUserId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getUserId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getUserId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getUserId_args.class, metaDataMap);
    }

    public user_getUserId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getUserId_args(user_getUserId_args other) {
    }

    public user_getUserId_args deepCopy() {
      return new user_getUserId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getUserId_args)
        return this.equals((user_getUserId_args)that);
      return false;
    }

    public boolean equals(user_getUserId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getUserId_args typedOther = (user_getUserId_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getUserId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getUserId_argsStandardSchemeFactory implements SchemeFactory {
      public user_getUserId_argsStandardScheme getScheme() {
        return new user_getUserId_argsStandardScheme();
      }
    }

    private static class user_getUserId_argsStandardScheme extends StandardScheme<user_getUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getUserId_argsTupleSchemeFactory implements SchemeFactory {
      public user_getUserId_argsTupleScheme getScheme() {
        return new user_getUserId_argsTupleScheme();
      }
    }

    private static class user_getUserId_argsTupleScheme extends TupleScheme<user_getUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class user_getUserId_result implements org.apache.thrift.TBase<user_getUserId_result, user_getUserId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getUserId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getUserId_result.class, metaDataMap);
    }

    public user_getUserId_result() {
    }

    public user_getUserId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getUserId_result(user_getUserId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public user_getUserId_result deepCopy() {
      return new user_getUserId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public user_getUserId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getUserId_result)
        return this.equals((user_getUserId_result)that);
      return false;
    }

    public boolean equals(user_getUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getUserId_result typedOther = (user_getUserId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getUserId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getUserId_resultStandardSchemeFactory implements SchemeFactory {
      public user_getUserId_resultStandardScheme getScheme() {
        return new user_getUserId_resultStandardScheme();
      }
    }

    private static class user_getUserId_resultStandardScheme extends StandardScheme<user_getUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getUserId_resultTupleSchemeFactory implements SchemeFactory {
      public user_getUserId_resultTupleScheme getScheme() {
        return new user_getUserId_resultTupleScheme();
      }
    }

    private static class user_getUserId_resultTupleScheme extends TupleScheme<user_getUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_createRawColumnDataset_args implements org.apache.thrift.TBase<user_createRawColumnDataset_args, user_createRawColumnDataset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_createRawColumnDataset_args");

    private static final org.apache.thrift.protocol.TField DATASET_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_createRawColumnDataset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_createRawColumnDataset_argsTupleSchemeFactory());
    }

    public String datasetPath; // required
    public int columns; // required
    public int partitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_PATH((short)1, "datasetPath"),
      COLUMNS((short)2, "columns"),
      PARTITIONS((short)3, "partitions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_PATH
            return DATASET_PATH;
          case 2: // COLUMNS
            return COLUMNS;
          case 3: // PARTITIONS
            return PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COLUMNS_ISSET_ID = 0;
    private static final int __PARTITIONS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_PATH, new org.apache.thrift.meta_data.FieldMetaData("datasetPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_createRawColumnDataset_args.class, metaDataMap);
    }

    public user_createRawColumnDataset_args() {
    }

    public user_createRawColumnDataset_args(
      String datasetPath,
      int columns,
      int partitions)
    {
      this();
      this.datasetPath = datasetPath;
      this.columns = columns;
      setColumnsIsSet(true);
      this.partitions = partitions;
      setPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_createRawColumnDataset_args(user_createRawColumnDataset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDatasetPath()) {
        this.datasetPath = other.datasetPath;
      }
      this.columns = other.columns;
      this.partitions = other.partitions;
    }

    public user_createRawColumnDataset_args deepCopy() {
      return new user_createRawColumnDataset_args(this);
    }

    @Override
    public void clear() {
      this.datasetPath = null;
      setColumnsIsSet(false);
      this.columns = 0;
      setPartitionsIsSet(false);
      this.partitions = 0;
    }

    public String getDatasetPath() {
      return this.datasetPath;
    }

    public user_createRawColumnDataset_args setDatasetPath(String datasetPath) {
      this.datasetPath = datasetPath;
      return this;
    }

    public void unsetDatasetPath() {
      this.datasetPath = null;
    }

    /** Returns true if field datasetPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetPath() {
      return this.datasetPath != null;
    }

    public void setDatasetPathIsSet(boolean value) {
      if (!value) {
        this.datasetPath = null;
      }
    }

    public int getColumns() {
      return this.columns;
    }

    public user_createRawColumnDataset_args setColumns(int columns) {
      this.columns = columns;
      setColumnsIsSet(true);
      return this;
    }

    public void unsetColumns() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNS_ISSET_ID);
    }

    /** Returns true if field columns is set (has been assigned a value) and false otherwise */
    public boolean isSetColumns() {
      return EncodingUtils.testBit(__isset_bitfield, __COLUMNS_ISSET_ID);
    }

    public void setColumnsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNS_ISSET_ID, value);
    }

    public int getPartitions() {
      return this.partitions;
    }

    public user_createRawColumnDataset_args setPartitions(int partitions) {
      this.partitions = partitions;
      setPartitionsIsSet(true);
      return this;
    }

    public void unsetPartitions() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
    }

    /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitions() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
    }

    public void setPartitionsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_PATH:
        if (value == null) {
          unsetDatasetPath();
        } else {
          setDatasetPath((String)value);
        }
        break;

      case COLUMNS:
        if (value == null) {
          unsetColumns();
        } else {
          setColumns((Integer)value);
        }
        break;

      case PARTITIONS:
        if (value == null) {
          unsetPartitions();
        } else {
          setPartitions((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_PATH:
        return getDatasetPath();

      case COLUMNS:
        return Integer.valueOf(getColumns());

      case PARTITIONS:
        return Integer.valueOf(getPartitions());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_PATH:
        return isSetDatasetPath();
      case COLUMNS:
        return isSetColumns();
      case PARTITIONS:
        return isSetPartitions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_createRawColumnDataset_args)
        return this.equals((user_createRawColumnDataset_args)that);
      return false;
    }

    public boolean equals(user_createRawColumnDataset_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetPath = true && this.isSetDatasetPath();
      boolean that_present_datasetPath = true && that.isSetDatasetPath();
      if (this_present_datasetPath || that_present_datasetPath) {
        if (!(this_present_datasetPath && that_present_datasetPath))
          return false;
        if (!this.datasetPath.equals(that.datasetPath))
          return false;
      }

      boolean this_present_columns = true;
      boolean that_present_columns = true;
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (this.columns != that.columns)
          return false;
      }

      boolean this_present_partitions = true;
      boolean that_present_partitions = true;
      if (this_present_partitions || that_present_partitions) {
        if (!(this_present_partitions && that_present_partitions))
          return false;
        if (this.partitions != that.partitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_createRawColumnDataset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_createRawColumnDataset_args typedOther = (user_createRawColumnDataset_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetPath()).compareTo(typedOther.isSetDatasetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetPath, typedOther.datasetPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartitions()).compareTo(typedOther.isSetPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, typedOther.partitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_createRawColumnDataset_args(");
      boolean first = true;

      sb.append("datasetPath:");
      if (this.datasetPath == null) {
        sb.append("null");
      } else {
        sb.append(this.datasetPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columns:");
      sb.append(this.columns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitions:");
      sb.append(this.partitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_createRawColumnDataset_argsStandardSchemeFactory implements SchemeFactory {
      public user_createRawColumnDataset_argsStandardScheme getScheme() {
        return new user_createRawColumnDataset_argsStandardScheme();
      }
    }

    private static class user_createRawColumnDataset_argsStandardScheme extends StandardScheme<user_createRawColumnDataset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_createRawColumnDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasetPath = iprot.readString();
                struct.setDatasetPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.columns = iprot.readI32();
                struct.setColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partitions = iprot.readI32();
                struct.setPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_createRawColumnDataset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasetPath != null) {
          oprot.writeFieldBegin(DATASET_PATH_FIELD_DESC);
          oprot.writeString(struct.datasetPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        oprot.writeI32(struct.columns);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
        oprot.writeI32(struct.partitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_createRawColumnDataset_argsTupleSchemeFactory implements SchemeFactory {
      public user_createRawColumnDataset_argsTupleScheme getScheme() {
        return new user_createRawColumnDataset_argsTupleScheme();
      }
    }

    private static class user_createRawColumnDataset_argsTupleScheme extends TupleScheme<user_createRawColumnDataset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_createRawColumnDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetPath()) {
          optionals.set(0);
        }
        if (struct.isSetColumns()) {
          optionals.set(1);
        }
        if (struct.isSetPartitions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDatasetPath()) {
          oprot.writeString(struct.datasetPath);
        }
        if (struct.isSetColumns()) {
          oprot.writeI32(struct.columns);
        }
        if (struct.isSetPartitions()) {
          oprot.writeI32(struct.partitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_createRawColumnDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.datasetPath = iprot.readString();
          struct.setDatasetPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.columns = iprot.readI32();
          struct.setColumnsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partitions = iprot.readI32();
          struct.setPartitionsIsSet(true);
        }
      }
    }

  }

  public static class user_createRawColumnDataset_result implements org.apache.thrift.TBase<user_createRawColumnDataset_result, user_createRawColumnDataset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_createRawColumnDataset_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_R_FIELD_DESC = new org.apache.thrift.protocol.TField("eR", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_I_FIELD_DESC = new org.apache.thrift.protocol.TField("eI", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_createRawColumnDataset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_createRawColumnDataset_resultTupleSchemeFactory());
    }

    public int success; // required
    public DatasetAlreadyExistException eR; // required
    public InvalidPathException eI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_R((short)1, "eR"),
      E_I((short)2, "eI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_R
            return E_R;
          case 2: // E_I
            return E_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E_R, new org.apache.thrift.meta_data.FieldMetaData("eR", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_I, new org.apache.thrift.meta_data.FieldMetaData("eI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_createRawColumnDataset_result.class, metaDataMap);
    }

    public user_createRawColumnDataset_result() {
    }

    public user_createRawColumnDataset_result(
      int success,
      DatasetAlreadyExistException eR,
      InvalidPathException eI)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.eR = eR;
      this.eI = eI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_createRawColumnDataset_result(user_createRawColumnDataset_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetER()) {
        this.eR = new DatasetAlreadyExistException(other.eR);
      }
      if (other.isSetEI()) {
        this.eI = new InvalidPathException(other.eI);
      }
    }

    public user_createRawColumnDataset_result deepCopy() {
      return new user_createRawColumnDataset_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.eR = null;
      this.eI = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public user_createRawColumnDataset_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public DatasetAlreadyExistException getER() {
      return this.eR;
    }

    public user_createRawColumnDataset_result setER(DatasetAlreadyExistException eR) {
      this.eR = eR;
      return this;
    }

    public void unsetER() {
      this.eR = null;
    }

    /** Returns true if field eR is set (has been assigned a value) and false otherwise */
    public boolean isSetER() {
      return this.eR != null;
    }

    public void setERIsSet(boolean value) {
      if (!value) {
        this.eR = null;
      }
    }

    public InvalidPathException getEI() {
      return this.eI;
    }

    public user_createRawColumnDataset_result setEI(InvalidPathException eI) {
      this.eI = eI;
      return this;
    }

    public void unsetEI() {
      this.eI = null;
    }

    /** Returns true if field eI is set (has been assigned a value) and false otherwise */
    public boolean isSetEI() {
      return this.eI != null;
    }

    public void setEIIsSet(boolean value) {
      if (!value) {
        this.eI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E_R:
        if (value == null) {
          unsetER();
        } else {
          setER((DatasetAlreadyExistException)value);
        }
        break;

      case E_I:
        if (value == null) {
          unsetEI();
        } else {
          setEI((InvalidPathException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E_R:
        return getER();

      case E_I:
        return getEI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_R:
        return isSetER();
      case E_I:
        return isSetEI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_createRawColumnDataset_result)
        return this.equals((user_createRawColumnDataset_result)that);
      return false;
    }

    public boolean equals(user_createRawColumnDataset_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_eR = true && this.isSetER();
      boolean that_present_eR = true && that.isSetER();
      if (this_present_eR || that_present_eR) {
        if (!(this_present_eR && that_present_eR))
          return false;
        if (!this.eR.equals(that.eR))
          return false;
      }

      boolean this_present_eI = true && this.isSetEI();
      boolean that_present_eI = true && that.isSetEI();
      if (this_present_eI || that_present_eI) {
        if (!(this_present_eI && that_present_eI))
          return false;
        if (!this.eI.equals(that.eI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_createRawColumnDataset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_createRawColumnDataset_result typedOther = (user_createRawColumnDataset_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetER()).compareTo(typedOther.isSetER());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetER()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eR, typedOther.eR);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEI()).compareTo(typedOther.isSetEI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eI, typedOther.eI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_createRawColumnDataset_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("eR:");
      if (this.eR == null) {
        sb.append("null");
      } else {
        sb.append(this.eR);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eI:");
      if (this.eI == null) {
        sb.append("null");
      } else {
        sb.append(this.eI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_createRawColumnDataset_resultStandardSchemeFactory implements SchemeFactory {
      public user_createRawColumnDataset_resultStandardScheme getScheme() {
        return new user_createRawColumnDataset_resultStandardScheme();
      }
    }

    private static class user_createRawColumnDataset_resultStandardScheme extends StandardScheme<user_createRawColumnDataset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_createRawColumnDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E_R
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eR = new DatasetAlreadyExistException();
                struct.eR.read(iprot);
                struct.setERIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eI = new InvalidPathException();
                struct.eI.read(iprot);
                struct.setEIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_createRawColumnDataset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.eR != null) {
          oprot.writeFieldBegin(E_R_FIELD_DESC);
          struct.eR.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eI != null) {
          oprot.writeFieldBegin(E_I_FIELD_DESC);
          struct.eI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_createRawColumnDataset_resultTupleSchemeFactory implements SchemeFactory {
      public user_createRawColumnDataset_resultTupleScheme getScheme() {
        return new user_createRawColumnDataset_resultTupleScheme();
      }
    }

    private static class user_createRawColumnDataset_resultTupleScheme extends TupleScheme<user_createRawColumnDataset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_createRawColumnDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetER()) {
          optionals.set(1);
        }
        if (struct.isSetEI()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetER()) {
          struct.eR.write(oprot);
        }
        if (struct.isSetEI()) {
          struct.eI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_createRawColumnDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eR = new DatasetAlreadyExistException();
          struct.eR.read(iprot);
          struct.setERIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eI = new InvalidPathException();
          struct.eI.read(iprot);
          struct.setEIIsSet(true);
        }
      }
    }

  }

  public static class user_createDataset_args implements org.apache.thrift.TBase<user_createDataset_args, user_createDataset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_createDataset_args");

    private static final org.apache.thrift.protocol.TField DATASET_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_createDataset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_createDataset_argsTupleSchemeFactory());
    }

    public String datasetPath; // required
    public int partitions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_PATH((short)1, "datasetPath"),
      PARTITIONS((short)2, "partitions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_PATH
            return DATASET_PATH;
          case 2: // PARTITIONS
            return PARTITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARTITIONS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_PATH, new org.apache.thrift.meta_data.FieldMetaData("datasetPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_createDataset_args.class, metaDataMap);
    }

    public user_createDataset_args() {
    }

    public user_createDataset_args(
      String datasetPath,
      int partitions)
    {
      this();
      this.datasetPath = datasetPath;
      this.partitions = partitions;
      setPartitionsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_createDataset_args(user_createDataset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDatasetPath()) {
        this.datasetPath = other.datasetPath;
      }
      this.partitions = other.partitions;
    }

    public user_createDataset_args deepCopy() {
      return new user_createDataset_args(this);
    }

    @Override
    public void clear() {
      this.datasetPath = null;
      setPartitionsIsSet(false);
      this.partitions = 0;
    }

    public String getDatasetPath() {
      return this.datasetPath;
    }

    public user_createDataset_args setDatasetPath(String datasetPath) {
      this.datasetPath = datasetPath;
      return this;
    }

    public void unsetDatasetPath() {
      this.datasetPath = null;
    }

    /** Returns true if field datasetPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetPath() {
      return this.datasetPath != null;
    }

    public void setDatasetPathIsSet(boolean value) {
      if (!value) {
        this.datasetPath = null;
      }
    }

    public int getPartitions() {
      return this.partitions;
    }

    public user_createDataset_args setPartitions(int partitions) {
      this.partitions = partitions;
      setPartitionsIsSet(true);
      return this;
    }

    public void unsetPartitions() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
    }

    /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitions() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
    }

    public void setPartitionsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_PATH:
        if (value == null) {
          unsetDatasetPath();
        } else {
          setDatasetPath((String)value);
        }
        break;

      case PARTITIONS:
        if (value == null) {
          unsetPartitions();
        } else {
          setPartitions((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_PATH:
        return getDatasetPath();

      case PARTITIONS:
        return Integer.valueOf(getPartitions());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_PATH:
        return isSetDatasetPath();
      case PARTITIONS:
        return isSetPartitions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_createDataset_args)
        return this.equals((user_createDataset_args)that);
      return false;
    }

    public boolean equals(user_createDataset_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetPath = true && this.isSetDatasetPath();
      boolean that_present_datasetPath = true && that.isSetDatasetPath();
      if (this_present_datasetPath || that_present_datasetPath) {
        if (!(this_present_datasetPath && that_present_datasetPath))
          return false;
        if (!this.datasetPath.equals(that.datasetPath))
          return false;
      }

      boolean this_present_partitions = true;
      boolean that_present_partitions = true;
      if (this_present_partitions || that_present_partitions) {
        if (!(this_present_partitions && that_present_partitions))
          return false;
        if (this.partitions != that.partitions)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_createDataset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_createDataset_args typedOther = (user_createDataset_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetPath()).compareTo(typedOther.isSetDatasetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetPath, typedOther.datasetPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartitions()).compareTo(typedOther.isSetPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, typedOther.partitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_createDataset_args(");
      boolean first = true;

      sb.append("datasetPath:");
      if (this.datasetPath == null) {
        sb.append("null");
      } else {
        sb.append(this.datasetPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitions:");
      sb.append(this.partitions);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_createDataset_argsStandardSchemeFactory implements SchemeFactory {
      public user_createDataset_argsStandardScheme getScheme() {
        return new user_createDataset_argsStandardScheme();
      }
    }

    private static class user_createDataset_argsStandardScheme extends StandardScheme<user_createDataset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_createDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasetPath = iprot.readString();
                struct.setDatasetPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partitions = iprot.readI32();
                struct.setPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_createDataset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasetPath != null) {
          oprot.writeFieldBegin(DATASET_PATH_FIELD_DESC);
          oprot.writeString(struct.datasetPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
        oprot.writeI32(struct.partitions);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_createDataset_argsTupleSchemeFactory implements SchemeFactory {
      public user_createDataset_argsTupleScheme getScheme() {
        return new user_createDataset_argsTupleScheme();
      }
    }

    private static class user_createDataset_argsTupleScheme extends TupleScheme<user_createDataset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_createDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetPath()) {
          optionals.set(0);
        }
        if (struct.isSetPartitions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDatasetPath()) {
          oprot.writeString(struct.datasetPath);
        }
        if (struct.isSetPartitions()) {
          oprot.writeI32(struct.partitions);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_createDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.datasetPath = iprot.readString();
          struct.setDatasetPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partitions = iprot.readI32();
          struct.setPartitionsIsSet(true);
        }
      }
    }

  }

  public static class user_createDataset_result implements org.apache.thrift.TBase<user_createDataset_result, user_createDataset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_createDataset_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_R_FIELD_DESC = new org.apache.thrift.protocol.TField("eR", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_I_FIELD_DESC = new org.apache.thrift.protocol.TField("eI", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_createDataset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_createDataset_resultTupleSchemeFactory());
    }

    public int success; // required
    public DatasetAlreadyExistException eR; // required
    public InvalidPathException eI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E_R((short)1, "eR"),
      E_I((short)2, "eI");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E_R
            return E_R;
          case 2: // E_I
            return E_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E_R, new org.apache.thrift.meta_data.FieldMetaData("eR", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E_I, new org.apache.thrift.meta_data.FieldMetaData("eI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_createDataset_result.class, metaDataMap);
    }

    public user_createDataset_result() {
    }

    public user_createDataset_result(
      int success,
      DatasetAlreadyExistException eR,
      InvalidPathException eI)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.eR = eR;
      this.eI = eI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_createDataset_result(user_createDataset_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetER()) {
        this.eR = new DatasetAlreadyExistException(other.eR);
      }
      if (other.isSetEI()) {
        this.eI = new InvalidPathException(other.eI);
      }
    }

    public user_createDataset_result deepCopy() {
      return new user_createDataset_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.eR = null;
      this.eI = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public user_createDataset_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public DatasetAlreadyExistException getER() {
      return this.eR;
    }

    public user_createDataset_result setER(DatasetAlreadyExistException eR) {
      this.eR = eR;
      return this;
    }

    public void unsetER() {
      this.eR = null;
    }

    /** Returns true if field eR is set (has been assigned a value) and false otherwise */
    public boolean isSetER() {
      return this.eR != null;
    }

    public void setERIsSet(boolean value) {
      if (!value) {
        this.eR = null;
      }
    }

    public InvalidPathException getEI() {
      return this.eI;
    }

    public user_createDataset_result setEI(InvalidPathException eI) {
      this.eI = eI;
      return this;
    }

    public void unsetEI() {
      this.eI = null;
    }

    /** Returns true if field eI is set (has been assigned a value) and false otherwise */
    public boolean isSetEI() {
      return this.eI != null;
    }

    public void setEIIsSet(boolean value) {
      if (!value) {
        this.eI = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E_R:
        if (value == null) {
          unsetER();
        } else {
          setER((DatasetAlreadyExistException)value);
        }
        break;

      case E_I:
        if (value == null) {
          unsetEI();
        } else {
          setEI((InvalidPathException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E_R:
        return getER();

      case E_I:
        return getEI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E_R:
        return isSetER();
      case E_I:
        return isSetEI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_createDataset_result)
        return this.equals((user_createDataset_result)that);
      return false;
    }

    public boolean equals(user_createDataset_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_eR = true && this.isSetER();
      boolean that_present_eR = true && that.isSetER();
      if (this_present_eR || that_present_eR) {
        if (!(this_present_eR && that_present_eR))
          return false;
        if (!this.eR.equals(that.eR))
          return false;
      }

      boolean this_present_eI = true && this.isSetEI();
      boolean that_present_eI = true && that.isSetEI();
      if (this_present_eI || that_present_eI) {
        if (!(this_present_eI && that_present_eI))
          return false;
        if (!this.eI.equals(that.eI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_createDataset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_createDataset_result typedOther = (user_createDataset_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetER()).compareTo(typedOther.isSetER());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetER()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eR, typedOther.eR);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEI()).compareTo(typedOther.isSetEI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eI, typedOther.eI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_createDataset_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("eR:");
      if (this.eR == null) {
        sb.append("null");
      } else {
        sb.append(this.eR);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eI:");
      if (this.eI == null) {
        sb.append("null");
      } else {
        sb.append(this.eI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_createDataset_resultStandardSchemeFactory implements SchemeFactory {
      public user_createDataset_resultStandardScheme getScheme() {
        return new user_createDataset_resultStandardScheme();
      }
    }

    private static class user_createDataset_resultStandardScheme extends StandardScheme<user_createDataset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_createDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E_R
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eR = new DatasetAlreadyExistException();
                struct.eR.read(iprot);
                struct.setERIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eI = new InvalidPathException();
                struct.eI.read(iprot);
                struct.setEIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_createDataset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.eR != null) {
          oprot.writeFieldBegin(E_R_FIELD_DESC);
          struct.eR.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eI != null) {
          oprot.writeFieldBegin(E_I_FIELD_DESC);
          struct.eI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_createDataset_resultTupleSchemeFactory implements SchemeFactory {
      public user_createDataset_resultTupleScheme getScheme() {
        return new user_createDataset_resultTupleScheme();
      }
    }

    private static class user_createDataset_resultTupleScheme extends TupleScheme<user_createDataset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_createDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetER()) {
          optionals.set(1);
        }
        if (struct.isSetEI()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetER()) {
          struct.eR.write(oprot);
        }
        if (struct.isSetEI()) {
          struct.eI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_createDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eR = new DatasetAlreadyExistException();
          struct.eR.read(iprot);
          struct.setERIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eI = new InvalidPathException();
          struct.eI.read(iprot);
          struct.setEIIsSet(true);
        }
      }
    }

  }

  public static class user_getDatasetId_args implements org.apache.thrift.TBase<user_getDatasetId_args, user_getDatasetId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getDatasetId_args");

    private static final org.apache.thrift.protocol.TField DATASET_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetPath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getDatasetId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getDatasetId_argsTupleSchemeFactory());
    }

    public String datasetPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_PATH((short)1, "datasetPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_PATH
            return DATASET_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_PATH, new org.apache.thrift.meta_data.FieldMetaData("datasetPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getDatasetId_args.class, metaDataMap);
    }

    public user_getDatasetId_args() {
    }

    public user_getDatasetId_args(
      String datasetPath)
    {
      this();
      this.datasetPath = datasetPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getDatasetId_args(user_getDatasetId_args other) {
      if (other.isSetDatasetPath()) {
        this.datasetPath = other.datasetPath;
      }
    }

    public user_getDatasetId_args deepCopy() {
      return new user_getDatasetId_args(this);
    }

    @Override
    public void clear() {
      this.datasetPath = null;
    }

    public String getDatasetPath() {
      return this.datasetPath;
    }

    public user_getDatasetId_args setDatasetPath(String datasetPath) {
      this.datasetPath = datasetPath;
      return this;
    }

    public void unsetDatasetPath() {
      this.datasetPath = null;
    }

    /** Returns true if field datasetPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetPath() {
      return this.datasetPath != null;
    }

    public void setDatasetPathIsSet(boolean value) {
      if (!value) {
        this.datasetPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_PATH:
        if (value == null) {
          unsetDatasetPath();
        } else {
          setDatasetPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_PATH:
        return getDatasetPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_PATH:
        return isSetDatasetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getDatasetId_args)
        return this.equals((user_getDatasetId_args)that);
      return false;
    }

    public boolean equals(user_getDatasetId_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetPath = true && this.isSetDatasetPath();
      boolean that_present_datasetPath = true && that.isSetDatasetPath();
      if (this_present_datasetPath || that_present_datasetPath) {
        if (!(this_present_datasetPath && that_present_datasetPath))
          return false;
        if (!this.datasetPath.equals(that.datasetPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getDatasetId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getDatasetId_args typedOther = (user_getDatasetId_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetPath()).compareTo(typedOther.isSetDatasetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetPath, typedOther.datasetPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getDatasetId_args(");
      boolean first = true;

      sb.append("datasetPath:");
      if (this.datasetPath == null) {
        sb.append("null");
      } else {
        sb.append(this.datasetPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getDatasetId_argsStandardSchemeFactory implements SchemeFactory {
      public user_getDatasetId_argsStandardScheme getScheme() {
        return new user_getDatasetId_argsStandardScheme();
      }
    }

    private static class user_getDatasetId_argsStandardScheme extends StandardScheme<user_getDatasetId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getDatasetId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasetPath = iprot.readString();
                struct.setDatasetPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getDatasetId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasetPath != null) {
          oprot.writeFieldBegin(DATASET_PATH_FIELD_DESC);
          oprot.writeString(struct.datasetPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getDatasetId_argsTupleSchemeFactory implements SchemeFactory {
      public user_getDatasetId_argsTupleScheme getScheme() {
        return new user_getDatasetId_argsTupleScheme();
      }
    }

    private static class user_getDatasetId_argsTupleScheme extends TupleScheme<user_getDatasetId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getDatasetId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetPath()) {
          oprot.writeString(struct.datasetPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getDatasetId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetPath = iprot.readString();
          struct.setDatasetPathIsSet(true);
        }
      }
    }

  }

  public static class user_getDatasetId_result implements org.apache.thrift.TBase<user_getDatasetId_result, user_getDatasetId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getDatasetId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getDatasetId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getDatasetId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getDatasetId_result.class, metaDataMap);
    }

    public user_getDatasetId_result() {
    }

    public user_getDatasetId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getDatasetId_result(user_getDatasetId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public user_getDatasetId_result deepCopy() {
      return new user_getDatasetId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public user_getDatasetId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getDatasetId_result)
        return this.equals((user_getDatasetId_result)that);
      return false;
    }

    public boolean equals(user_getDatasetId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getDatasetId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getDatasetId_result typedOther = (user_getDatasetId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getDatasetId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getDatasetId_resultStandardSchemeFactory implements SchemeFactory {
      public user_getDatasetId_resultStandardScheme getScheme() {
        return new user_getDatasetId_resultStandardScheme();
      }
    }

    private static class user_getDatasetId_resultStandardScheme extends StandardScheme<user_getDatasetId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getDatasetId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getDatasetId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getDatasetId_resultTupleSchemeFactory implements SchemeFactory {
      public user_getDatasetId_resultTupleScheme getScheme() {
        return new user_getDatasetId_resultTupleScheme();
      }
    }

    private static class user_getDatasetId_resultTupleScheme extends TupleScheme<user_getDatasetId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getDatasetId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getDatasetId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_getLocalWorker_args implements org.apache.thrift.TBase<user_getLocalWorker_args, user_getLocalWorker_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getLocalWorker_args");

    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getLocalWorker_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getLocalWorker_argsTupleSchemeFactory());
    }

    public String host; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST((short)1, "host");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST
            return HOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getLocalWorker_args.class, metaDataMap);
    }

    public user_getLocalWorker_args() {
    }

    public user_getLocalWorker_args(
      String host)
    {
      this();
      this.host = host;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getLocalWorker_args(user_getLocalWorker_args other) {
      if (other.isSetHost()) {
        this.host = other.host;
      }
    }

    public user_getLocalWorker_args deepCopy() {
      return new user_getLocalWorker_args(this);
    }

    @Override
    public void clear() {
      this.host = null;
    }

    public String getHost() {
      return this.host;
    }

    public user_getLocalWorker_args setHost(String host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST:
        return getHost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST:
        return isSetHost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getLocalWorker_args)
        return this.equals((user_getLocalWorker_args)that);
      return false;
    }

    public boolean equals(user_getLocalWorker_args that) {
      if (that == null)
        return false;

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getLocalWorker_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getLocalWorker_args typedOther = (user_getLocalWorker_args)other;

      lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getLocalWorker_args(");
      boolean first = true;

      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getLocalWorker_argsStandardSchemeFactory implements SchemeFactory {
      public user_getLocalWorker_argsStandardScheme getScheme() {
        return new user_getLocalWorker_argsStandardScheme();
      }
    }

    private static class user_getLocalWorker_argsStandardScheme extends StandardScheme<user_getLocalWorker_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getLocalWorker_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getLocalWorker_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getLocalWorker_argsTupleSchemeFactory implements SchemeFactory {
      public user_getLocalWorker_argsTupleScheme getScheme() {
        return new user_getLocalWorker_argsTupleScheme();
      }
    }

    private static class user_getLocalWorker_argsTupleScheme extends TupleScheme<user_getLocalWorker_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getLocalWorker_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHost()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHost()) {
          oprot.writeString(struct.host);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getLocalWorker_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.host = iprot.readString();
          struct.setHostIsSet(true);
        }
      }
    }

  }

  public static class user_getLocalWorker_result implements org.apache.thrift.TBase<user_getLocalWorker_result, user_getLocalWorker_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getLocalWorker_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getLocalWorker_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getLocalWorker_resultTupleSchemeFactory());
    }

    public NetAddress success; // required
    public NoLocalWorkerException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getLocalWorker_result.class, metaDataMap);
    }

    public user_getLocalWorker_result() {
    }

    public user_getLocalWorker_result(
      NetAddress success,
      NoLocalWorkerException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getLocalWorker_result(user_getLocalWorker_result other) {
      if (other.isSetSuccess()) {
        this.success = new NetAddress(other.success);
      }
      if (other.isSetE()) {
        this.e = new NoLocalWorkerException(other.e);
      }
    }

    public user_getLocalWorker_result deepCopy() {
      return new user_getLocalWorker_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public NetAddress getSuccess() {
      return this.success;
    }

    public user_getLocalWorker_result setSuccess(NetAddress success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NoLocalWorkerException getE() {
      return this.e;
    }

    public user_getLocalWorker_result setE(NoLocalWorkerException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NetAddress)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((NoLocalWorkerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getLocalWorker_result)
        return this.equals((user_getLocalWorker_result)that);
      return false;
    }

    public boolean equals(user_getLocalWorker_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getLocalWorker_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getLocalWorker_result typedOther = (user_getLocalWorker_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getLocalWorker_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getLocalWorker_resultStandardSchemeFactory implements SchemeFactory {
      public user_getLocalWorker_resultStandardScheme getScheme() {
        return new user_getLocalWorker_resultStandardScheme();
      }
    }

    private static class user_getLocalWorker_resultStandardScheme extends StandardScheme<user_getLocalWorker_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getLocalWorker_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NetAddress();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new NoLocalWorkerException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getLocalWorker_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getLocalWorker_resultTupleSchemeFactory implements SchemeFactory {
      public user_getLocalWorker_resultTupleScheme getScheme() {
        return new user_getLocalWorker_resultTupleScheme();
      }
    }

    private static class user_getLocalWorker_resultTupleScheme extends TupleScheme<user_getLocalWorker_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getLocalWorker_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getLocalWorker_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new NetAddress();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new NoLocalWorkerException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_getPartitionInfo_args implements org.apache.thrift.TBase<user_getPartitionInfo_args, user_getPartitionInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getPartitionInfo_args");

    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getPartitionInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getPartitionInfo_argsTupleSchemeFactory());
    }

    public int datasetId; // required
    public int partitionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_ID((short)1, "datasetId"),
      PARTITION_ID((short)2, "partitionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_ID
            return DATASET_ID;
          case 2: // PARTITION_ID
            return PARTITION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASETID_ISSET_ID = 0;
    private static final int __PARTITIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partitionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getPartitionInfo_args.class, metaDataMap);
    }

    public user_getPartitionInfo_args() {
    }

    public user_getPartitionInfo_args(
      int datasetId,
      int partitionId)
    {
      this();
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      this.partitionId = partitionId;
      setPartitionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getPartitionInfo_args(user_getPartitionInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.datasetId = other.datasetId;
      this.partitionId = other.partitionId;
    }

    public user_getPartitionInfo_args deepCopy() {
      return new user_getPartitionInfo_args(this);
    }

    @Override
    public void clear() {
      setDatasetIdIsSet(false);
      this.datasetId = 0;
      setPartitionIdIsSet(false);
      this.partitionId = 0;
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public user_getPartitionInfo_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASETID_ISSET_ID, value);
    }

    public int getPartitionId() {
      return this.partitionId;
    }

    public user_getPartitionInfo_args setPartitionId(int partitionId) {
      this.partitionId = partitionId;
      setPartitionIdIsSet(true);
      return this;
    }

    public void unsetPartitionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
    }

    /** Returns true if field partitionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitionId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTITIONID_ISSET_ID);
    }

    public void setPartitionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      case PARTITION_ID:
        if (value == null) {
          unsetPartitionId();
        } else {
          setPartitionId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      case PARTITION_ID:
        return Integer.valueOf(getPartitionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_ID:
        return isSetDatasetId();
      case PARTITION_ID:
        return isSetPartitionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getPartitionInfo_args)
        return this.equals((user_getPartitionInfo_args)that);
      return false;
    }

    public boolean equals(user_getPartitionInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      boolean this_present_partitionId = true;
      boolean that_present_partitionId = true;
      if (this_present_partitionId || that_present_partitionId) {
        if (!(this_present_partitionId && that_present_partitionId))
          return false;
        if (this.partitionId != that.partitionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getPartitionInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getPartitionInfo_args typedOther = (user_getPartitionInfo_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartitionId()).compareTo(typedOther.isSetPartitionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionId, typedOther.partitionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getPartitionInfo_args(");
      boolean first = true;

      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitionId:");
      sb.append(this.partitionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getPartitionInfo_argsStandardSchemeFactory implements SchemeFactory {
      public user_getPartitionInfo_argsStandardScheme getScheme() {
        return new user_getPartitionInfo_argsStandardScheme();
      }
    }

    private static class user_getPartitionInfo_argsStandardScheme extends StandardScheme<user_getPartitionInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getPartitionInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partitionId = iprot.readI32();
                struct.setPartitionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getPartitionInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI32(struct.partitionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getPartitionInfo_argsTupleSchemeFactory implements SchemeFactory {
      public user_getPartitionInfo_argsTupleScheme getScheme() {
        return new user_getPartitionInfo_argsTupleScheme();
      }
    }

    private static class user_getPartitionInfo_argsTupleScheme extends TupleScheme<user_getPartitionInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getPartitionInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetId()) {
          optionals.set(0);
        }
        if (struct.isSetPartitionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
        if (struct.isSetPartitionId()) {
          oprot.writeI32(struct.partitionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getPartitionInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partitionId = iprot.readI32();
          struct.setPartitionIdIsSet(true);
        }
      }
    }

  }

  public static class user_getPartitionInfo_result implements org.apache.thrift.TBase<user_getPartitionInfo_result, user_getPartitionInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getPartitionInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getPartitionInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getPartitionInfo_resultTupleSchemeFactory());
    }

    public PartitionInfo success; // required
    public PartitionDoesNotExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartitionInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getPartitionInfo_result.class, metaDataMap);
    }

    public user_getPartitionInfo_result() {
    }

    public user_getPartitionInfo_result(
      PartitionInfo success,
      PartitionDoesNotExistException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getPartitionInfo_result(user_getPartitionInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new PartitionInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new PartitionDoesNotExistException(other.e);
      }
    }

    public user_getPartitionInfo_result deepCopy() {
      return new user_getPartitionInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PartitionInfo getSuccess() {
      return this.success;
    }

    public user_getPartitionInfo_result setSuccess(PartitionInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public PartitionDoesNotExistException getE() {
      return this.e;
    }

    public user_getPartitionInfo_result setE(PartitionDoesNotExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PartitionInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((PartitionDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getPartitionInfo_result)
        return this.equals((user_getPartitionInfo_result)that);
      return false;
    }

    public boolean equals(user_getPartitionInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getPartitionInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getPartitionInfo_result typedOther = (user_getPartitionInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getPartitionInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getPartitionInfo_resultStandardSchemeFactory implements SchemeFactory {
      public user_getPartitionInfo_resultStandardScheme getScheme() {
        return new user_getPartitionInfo_resultStandardScheme();
      }
    }

    private static class user_getPartitionInfo_resultStandardScheme extends StandardScheme<user_getPartitionInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getPartitionInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PartitionInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new PartitionDoesNotExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getPartitionInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getPartitionInfo_resultTupleSchemeFactory implements SchemeFactory {
      public user_getPartitionInfo_resultTupleScheme getScheme() {
        return new user_getPartitionInfo_resultTupleScheme();
      }
    }

    private static class user_getPartitionInfo_resultTupleScheme extends TupleScheme<user_getPartitionInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getPartitionInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getPartitionInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PartitionInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new PartitionDoesNotExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_getDatasetById_args implements org.apache.thrift.TBase<user_getDatasetById_args, user_getDatasetById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getDatasetById_args");

    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getDatasetById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getDatasetById_argsTupleSchemeFactory());
    }

    public int datasetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_ID((short)1, "datasetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_ID
            return DATASET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getDatasetById_args.class, metaDataMap);
    }

    public user_getDatasetById_args() {
    }

    public user_getDatasetById_args(
      int datasetId)
    {
      this();
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getDatasetById_args(user_getDatasetById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.datasetId = other.datasetId;
    }

    public user_getDatasetById_args deepCopy() {
      return new user_getDatasetById_args(this);
    }

    @Override
    public void clear() {
      setDatasetIdIsSet(false);
      this.datasetId = 0;
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public user_getDatasetById_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_ID:
        return isSetDatasetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getDatasetById_args)
        return this.equals((user_getDatasetById_args)that);
      return false;
    }

    public boolean equals(user_getDatasetById_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getDatasetById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getDatasetById_args typedOther = (user_getDatasetById_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getDatasetById_args(");
      boolean first = true;

      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getDatasetById_argsStandardSchemeFactory implements SchemeFactory {
      public user_getDatasetById_argsStandardScheme getScheme() {
        return new user_getDatasetById_argsStandardScheme();
      }
    }

    private static class user_getDatasetById_argsStandardScheme extends StandardScheme<user_getDatasetById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getDatasetById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getDatasetById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getDatasetById_argsTupleSchemeFactory implements SchemeFactory {
      public user_getDatasetById_argsTupleScheme getScheme() {
        return new user_getDatasetById_argsTupleScheme();
      }
    }

    private static class user_getDatasetById_argsTupleScheme extends TupleScheme<user_getDatasetById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getDatasetById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getDatasetById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
      }
    }

  }

  public static class user_getDatasetById_result implements org.apache.thrift.TBase<user_getDatasetById_result, user_getDatasetById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getDatasetById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getDatasetById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getDatasetById_resultTupleSchemeFactory());
    }

    public DatasetInfo success; // required
    public DatasetDoesNotExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DatasetInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getDatasetById_result.class, metaDataMap);
    }

    public user_getDatasetById_result() {
    }

    public user_getDatasetById_result(
      DatasetInfo success,
      DatasetDoesNotExistException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getDatasetById_result(user_getDatasetById_result other) {
      if (other.isSetSuccess()) {
        this.success = new DatasetInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new DatasetDoesNotExistException(other.e);
      }
    }

    public user_getDatasetById_result deepCopy() {
      return new user_getDatasetById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public DatasetInfo getSuccess() {
      return this.success;
    }

    public user_getDatasetById_result setSuccess(DatasetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DatasetDoesNotExistException getE() {
      return this.e;
    }

    public user_getDatasetById_result setE(DatasetDoesNotExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DatasetInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DatasetDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getDatasetById_result)
        return this.equals((user_getDatasetById_result)that);
      return false;
    }

    public boolean equals(user_getDatasetById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getDatasetById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getDatasetById_result typedOther = (user_getDatasetById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getDatasetById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getDatasetById_resultStandardSchemeFactory implements SchemeFactory {
      public user_getDatasetById_resultStandardScheme getScheme() {
        return new user_getDatasetById_resultStandardScheme();
      }
    }

    private static class user_getDatasetById_resultStandardScheme extends StandardScheme<user_getDatasetById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getDatasetById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DatasetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DatasetDoesNotExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getDatasetById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getDatasetById_resultTupleSchemeFactory implements SchemeFactory {
      public user_getDatasetById_resultTupleScheme getScheme() {
        return new user_getDatasetById_resultTupleScheme();
      }
    }

    private static class user_getDatasetById_resultTupleScheme extends TupleScheme<user_getDatasetById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getDatasetById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getDatasetById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DatasetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DatasetDoesNotExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_getDatasetByPath_args implements org.apache.thrift.TBase<user_getDatasetByPath_args, user_getDatasetByPath_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getDatasetByPath_args");

    private static final org.apache.thrift.protocol.TField DATASET_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetPath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getDatasetByPath_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getDatasetByPath_argsTupleSchemeFactory());
    }

    public String datasetPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_PATH((short)1, "datasetPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_PATH
            return DATASET_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_PATH, new org.apache.thrift.meta_data.FieldMetaData("datasetPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getDatasetByPath_args.class, metaDataMap);
    }

    public user_getDatasetByPath_args() {
    }

    public user_getDatasetByPath_args(
      String datasetPath)
    {
      this();
      this.datasetPath = datasetPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getDatasetByPath_args(user_getDatasetByPath_args other) {
      if (other.isSetDatasetPath()) {
        this.datasetPath = other.datasetPath;
      }
    }

    public user_getDatasetByPath_args deepCopy() {
      return new user_getDatasetByPath_args(this);
    }

    @Override
    public void clear() {
      this.datasetPath = null;
    }

    public String getDatasetPath() {
      return this.datasetPath;
    }

    public user_getDatasetByPath_args setDatasetPath(String datasetPath) {
      this.datasetPath = datasetPath;
      return this;
    }

    public void unsetDatasetPath() {
      this.datasetPath = null;
    }

    /** Returns true if field datasetPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetPath() {
      return this.datasetPath != null;
    }

    public void setDatasetPathIsSet(boolean value) {
      if (!value) {
        this.datasetPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_PATH:
        if (value == null) {
          unsetDatasetPath();
        } else {
          setDatasetPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_PATH:
        return getDatasetPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_PATH:
        return isSetDatasetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getDatasetByPath_args)
        return this.equals((user_getDatasetByPath_args)that);
      return false;
    }

    public boolean equals(user_getDatasetByPath_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetPath = true && this.isSetDatasetPath();
      boolean that_present_datasetPath = true && that.isSetDatasetPath();
      if (this_present_datasetPath || that_present_datasetPath) {
        if (!(this_present_datasetPath && that_present_datasetPath))
          return false;
        if (!this.datasetPath.equals(that.datasetPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getDatasetByPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getDatasetByPath_args typedOther = (user_getDatasetByPath_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetPath()).compareTo(typedOther.isSetDatasetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetPath, typedOther.datasetPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getDatasetByPath_args(");
      boolean first = true;

      sb.append("datasetPath:");
      if (this.datasetPath == null) {
        sb.append("null");
      } else {
        sb.append(this.datasetPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getDatasetByPath_argsStandardSchemeFactory implements SchemeFactory {
      public user_getDatasetByPath_argsStandardScheme getScheme() {
        return new user_getDatasetByPath_argsStandardScheme();
      }
    }

    private static class user_getDatasetByPath_argsStandardScheme extends StandardScheme<user_getDatasetByPath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getDatasetByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasetPath = iprot.readString();
                struct.setDatasetPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getDatasetByPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasetPath != null) {
          oprot.writeFieldBegin(DATASET_PATH_FIELD_DESC);
          oprot.writeString(struct.datasetPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getDatasetByPath_argsTupleSchemeFactory implements SchemeFactory {
      public user_getDatasetByPath_argsTupleScheme getScheme() {
        return new user_getDatasetByPath_argsTupleScheme();
      }
    }

    private static class user_getDatasetByPath_argsTupleScheme extends TupleScheme<user_getDatasetByPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getDatasetByPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetPath()) {
          oprot.writeString(struct.datasetPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getDatasetByPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetPath = iprot.readString();
          struct.setDatasetPathIsSet(true);
        }
      }
    }

  }

  public static class user_getDatasetByPath_result implements org.apache.thrift.TBase<user_getDatasetByPath_result, user_getDatasetByPath_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getDatasetByPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getDatasetByPath_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getDatasetByPath_resultTupleSchemeFactory());
    }

    public DatasetInfo success; // required
    public DatasetDoesNotExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DatasetInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getDatasetByPath_result.class, metaDataMap);
    }

    public user_getDatasetByPath_result() {
    }

    public user_getDatasetByPath_result(
      DatasetInfo success,
      DatasetDoesNotExistException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getDatasetByPath_result(user_getDatasetByPath_result other) {
      if (other.isSetSuccess()) {
        this.success = new DatasetInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new DatasetDoesNotExistException(other.e);
      }
    }

    public user_getDatasetByPath_result deepCopy() {
      return new user_getDatasetByPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public DatasetInfo getSuccess() {
      return this.success;
    }

    public user_getDatasetByPath_result setSuccess(DatasetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DatasetDoesNotExistException getE() {
      return this.e;
    }

    public user_getDatasetByPath_result setE(DatasetDoesNotExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DatasetInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DatasetDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getDatasetByPath_result)
        return this.equals((user_getDatasetByPath_result)that);
      return false;
    }

    public boolean equals(user_getDatasetByPath_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getDatasetByPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getDatasetByPath_result typedOther = (user_getDatasetByPath_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getDatasetByPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getDatasetByPath_resultStandardSchemeFactory implements SchemeFactory {
      public user_getDatasetByPath_resultStandardScheme getScheme() {
        return new user_getDatasetByPath_resultStandardScheme();
      }
    }

    private static class user_getDatasetByPath_resultStandardScheme extends StandardScheme<user_getDatasetByPath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getDatasetByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DatasetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DatasetDoesNotExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getDatasetByPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getDatasetByPath_resultTupleSchemeFactory implements SchemeFactory {
      public user_getDatasetByPath_resultTupleScheme getScheme() {
        return new user_getDatasetByPath_resultTupleScheme();
      }
    }

    private static class user_getDatasetByPath_resultTupleScheme extends TupleScheme<user_getDatasetByPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getDatasetByPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getDatasetByPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DatasetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DatasetDoesNotExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_getRawColumnDatasetById_args implements org.apache.thrift.TBase<user_getRawColumnDatasetById_args, user_getRawColumnDatasetById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getRawColumnDatasetById_args");

    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getRawColumnDatasetById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getRawColumnDatasetById_argsTupleSchemeFactory());
    }

    public int datasetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_ID((short)1, "datasetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_ID
            return DATASET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getRawColumnDatasetById_args.class, metaDataMap);
    }

    public user_getRawColumnDatasetById_args() {
    }

    public user_getRawColumnDatasetById_args(
      int datasetId)
    {
      this();
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getRawColumnDatasetById_args(user_getRawColumnDatasetById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.datasetId = other.datasetId;
    }

    public user_getRawColumnDatasetById_args deepCopy() {
      return new user_getRawColumnDatasetById_args(this);
    }

    @Override
    public void clear() {
      setDatasetIdIsSet(false);
      this.datasetId = 0;
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public user_getRawColumnDatasetById_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_ID:
        return isSetDatasetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getRawColumnDatasetById_args)
        return this.equals((user_getRawColumnDatasetById_args)that);
      return false;
    }

    public boolean equals(user_getRawColumnDatasetById_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getRawColumnDatasetById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getRawColumnDatasetById_args typedOther = (user_getRawColumnDatasetById_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getRawColumnDatasetById_args(");
      boolean first = true;

      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getRawColumnDatasetById_argsStandardSchemeFactory implements SchemeFactory {
      public user_getRawColumnDatasetById_argsStandardScheme getScheme() {
        return new user_getRawColumnDatasetById_argsStandardScheme();
      }
    }

    private static class user_getRawColumnDatasetById_argsStandardScheme extends StandardScheme<user_getRawColumnDatasetById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getRawColumnDatasetById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getRawColumnDatasetById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getRawColumnDatasetById_argsTupleSchemeFactory implements SchemeFactory {
      public user_getRawColumnDatasetById_argsTupleScheme getScheme() {
        return new user_getRawColumnDatasetById_argsTupleScheme();
      }
    }

    private static class user_getRawColumnDatasetById_argsTupleScheme extends TupleScheme<user_getRawColumnDatasetById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getRawColumnDatasetById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getRawColumnDatasetById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
      }
    }

  }

  public static class user_getRawColumnDatasetById_result implements org.apache.thrift.TBase<user_getRawColumnDatasetById_result, user_getRawColumnDatasetById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getRawColumnDatasetById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getRawColumnDatasetById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getRawColumnDatasetById_resultTupleSchemeFactory());
    }

    public RawColumnDatasetInfo success; // required
    public DatasetDoesNotExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RawColumnDatasetInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getRawColumnDatasetById_result.class, metaDataMap);
    }

    public user_getRawColumnDatasetById_result() {
    }

    public user_getRawColumnDatasetById_result(
      RawColumnDatasetInfo success,
      DatasetDoesNotExistException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getRawColumnDatasetById_result(user_getRawColumnDatasetById_result other) {
      if (other.isSetSuccess()) {
        this.success = new RawColumnDatasetInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new DatasetDoesNotExistException(other.e);
      }
    }

    public user_getRawColumnDatasetById_result deepCopy() {
      return new user_getRawColumnDatasetById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RawColumnDatasetInfo getSuccess() {
      return this.success;
    }

    public user_getRawColumnDatasetById_result setSuccess(RawColumnDatasetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DatasetDoesNotExistException getE() {
      return this.e;
    }

    public user_getRawColumnDatasetById_result setE(DatasetDoesNotExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RawColumnDatasetInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DatasetDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getRawColumnDatasetById_result)
        return this.equals((user_getRawColumnDatasetById_result)that);
      return false;
    }

    public boolean equals(user_getRawColumnDatasetById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getRawColumnDatasetById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getRawColumnDatasetById_result typedOther = (user_getRawColumnDatasetById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getRawColumnDatasetById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getRawColumnDatasetById_resultStandardSchemeFactory implements SchemeFactory {
      public user_getRawColumnDatasetById_resultStandardScheme getScheme() {
        return new user_getRawColumnDatasetById_resultStandardScheme();
      }
    }

    private static class user_getRawColumnDatasetById_resultStandardScheme extends StandardScheme<user_getRawColumnDatasetById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getRawColumnDatasetById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RawColumnDatasetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DatasetDoesNotExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getRawColumnDatasetById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getRawColumnDatasetById_resultTupleSchemeFactory implements SchemeFactory {
      public user_getRawColumnDatasetById_resultTupleScheme getScheme() {
        return new user_getRawColumnDatasetById_resultTupleScheme();
      }
    }

    private static class user_getRawColumnDatasetById_resultTupleScheme extends TupleScheme<user_getRawColumnDatasetById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getRawColumnDatasetById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getRawColumnDatasetById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RawColumnDatasetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DatasetDoesNotExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_getRawColumnDatasetByPath_args implements org.apache.thrift.TBase<user_getRawColumnDatasetByPath_args, user_getRawColumnDatasetByPath_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getRawColumnDatasetByPath_args");

    private static final org.apache.thrift.protocol.TField DATASET_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetPath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getRawColumnDatasetByPath_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getRawColumnDatasetByPath_argsTupleSchemeFactory());
    }

    public String datasetPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_PATH((short)1, "datasetPath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_PATH
            return DATASET_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_PATH, new org.apache.thrift.meta_data.FieldMetaData("datasetPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getRawColumnDatasetByPath_args.class, metaDataMap);
    }

    public user_getRawColumnDatasetByPath_args() {
    }

    public user_getRawColumnDatasetByPath_args(
      String datasetPath)
    {
      this();
      this.datasetPath = datasetPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getRawColumnDatasetByPath_args(user_getRawColumnDatasetByPath_args other) {
      if (other.isSetDatasetPath()) {
        this.datasetPath = other.datasetPath;
      }
    }

    public user_getRawColumnDatasetByPath_args deepCopy() {
      return new user_getRawColumnDatasetByPath_args(this);
    }

    @Override
    public void clear() {
      this.datasetPath = null;
    }

    public String getDatasetPath() {
      return this.datasetPath;
    }

    public user_getRawColumnDatasetByPath_args setDatasetPath(String datasetPath) {
      this.datasetPath = datasetPath;
      return this;
    }

    public void unsetDatasetPath() {
      this.datasetPath = null;
    }

    /** Returns true if field datasetPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetPath() {
      return this.datasetPath != null;
    }

    public void setDatasetPathIsSet(boolean value) {
      if (!value) {
        this.datasetPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_PATH:
        if (value == null) {
          unsetDatasetPath();
        } else {
          setDatasetPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_PATH:
        return getDatasetPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_PATH:
        return isSetDatasetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getRawColumnDatasetByPath_args)
        return this.equals((user_getRawColumnDatasetByPath_args)that);
      return false;
    }

    public boolean equals(user_getRawColumnDatasetByPath_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetPath = true && this.isSetDatasetPath();
      boolean that_present_datasetPath = true && that.isSetDatasetPath();
      if (this_present_datasetPath || that_present_datasetPath) {
        if (!(this_present_datasetPath && that_present_datasetPath))
          return false;
        if (!this.datasetPath.equals(that.datasetPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getRawColumnDatasetByPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getRawColumnDatasetByPath_args typedOther = (user_getRawColumnDatasetByPath_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetPath()).compareTo(typedOther.isSetDatasetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetPath, typedOther.datasetPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getRawColumnDatasetByPath_args(");
      boolean first = true;

      sb.append("datasetPath:");
      if (this.datasetPath == null) {
        sb.append("null");
      } else {
        sb.append(this.datasetPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getRawColumnDatasetByPath_argsStandardSchemeFactory implements SchemeFactory {
      public user_getRawColumnDatasetByPath_argsStandardScheme getScheme() {
        return new user_getRawColumnDatasetByPath_argsStandardScheme();
      }
    }

    private static class user_getRawColumnDatasetByPath_argsStandardScheme extends StandardScheme<user_getRawColumnDatasetByPath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getRawColumnDatasetByPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datasetPath = iprot.readString();
                struct.setDatasetPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getRawColumnDatasetByPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datasetPath != null) {
          oprot.writeFieldBegin(DATASET_PATH_FIELD_DESC);
          oprot.writeString(struct.datasetPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getRawColumnDatasetByPath_argsTupleSchemeFactory implements SchemeFactory {
      public user_getRawColumnDatasetByPath_argsTupleScheme getScheme() {
        return new user_getRawColumnDatasetByPath_argsTupleScheme();
      }
    }

    private static class user_getRawColumnDatasetByPath_argsTupleScheme extends TupleScheme<user_getRawColumnDatasetByPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getRawColumnDatasetByPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetPath()) {
          oprot.writeString(struct.datasetPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getRawColumnDatasetByPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetPath = iprot.readString();
          struct.setDatasetPathIsSet(true);
        }
      }
    }

  }

  public static class user_getRawColumnDatasetByPath_result implements org.apache.thrift.TBase<user_getRawColumnDatasetByPath_result, user_getRawColumnDatasetByPath_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_getRawColumnDatasetByPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_getRawColumnDatasetByPath_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_getRawColumnDatasetByPath_resultTupleSchemeFactory());
    }

    public RawColumnDatasetInfo success; // required
    public DatasetDoesNotExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RawColumnDatasetInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_getRawColumnDatasetByPath_result.class, metaDataMap);
    }

    public user_getRawColumnDatasetByPath_result() {
    }

    public user_getRawColumnDatasetByPath_result(
      RawColumnDatasetInfo success,
      DatasetDoesNotExistException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_getRawColumnDatasetByPath_result(user_getRawColumnDatasetByPath_result other) {
      if (other.isSetSuccess()) {
        this.success = new RawColumnDatasetInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new DatasetDoesNotExistException(other.e);
      }
    }

    public user_getRawColumnDatasetByPath_result deepCopy() {
      return new user_getRawColumnDatasetByPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RawColumnDatasetInfo getSuccess() {
      return this.success;
    }

    public user_getRawColumnDatasetByPath_result setSuccess(RawColumnDatasetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DatasetDoesNotExistException getE() {
      return this.e;
    }

    public user_getRawColumnDatasetByPath_result setE(DatasetDoesNotExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RawColumnDatasetInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DatasetDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_getRawColumnDatasetByPath_result)
        return this.equals((user_getRawColumnDatasetByPath_result)that);
      return false;
    }

    public boolean equals(user_getRawColumnDatasetByPath_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_getRawColumnDatasetByPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_getRawColumnDatasetByPath_result typedOther = (user_getRawColumnDatasetByPath_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_getRawColumnDatasetByPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_getRawColumnDatasetByPath_resultStandardSchemeFactory implements SchemeFactory {
      public user_getRawColumnDatasetByPath_resultStandardScheme getScheme() {
        return new user_getRawColumnDatasetByPath_resultStandardScheme();
      }
    }

    private static class user_getRawColumnDatasetByPath_resultStandardScheme extends StandardScheme<user_getRawColumnDatasetByPath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_getRawColumnDatasetByPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RawColumnDatasetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DatasetDoesNotExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_getRawColumnDatasetByPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_getRawColumnDatasetByPath_resultTupleSchemeFactory implements SchemeFactory {
      public user_getRawColumnDatasetByPath_resultTupleScheme getScheme() {
        return new user_getRawColumnDatasetByPath_resultTupleScheme();
      }
    }

    private static class user_getRawColumnDatasetByPath_resultTupleScheme extends TupleScheme<user_getRawColumnDatasetByPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_getRawColumnDatasetByPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_getRawColumnDatasetByPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RawColumnDatasetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DatasetDoesNotExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_deleteDataset_args implements org.apache.thrift.TBase<user_deleteDataset_args, user_deleteDataset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_deleteDataset_args");

    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_deleteDataset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_deleteDataset_argsTupleSchemeFactory());
    }

    public int datasetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_ID((short)1, "datasetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_ID
            return DATASET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_deleteDataset_args.class, metaDataMap);
    }

    public user_deleteDataset_args() {
    }

    public user_deleteDataset_args(
      int datasetId)
    {
      this();
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_deleteDataset_args(user_deleteDataset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.datasetId = other.datasetId;
    }

    public user_deleteDataset_args deepCopy() {
      return new user_deleteDataset_args(this);
    }

    @Override
    public void clear() {
      setDatasetIdIsSet(false);
      this.datasetId = 0;
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public user_deleteDataset_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_ID:
        return isSetDatasetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_deleteDataset_args)
        return this.equals((user_deleteDataset_args)that);
      return false;
    }

    public boolean equals(user_deleteDataset_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_deleteDataset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_deleteDataset_args typedOther = (user_deleteDataset_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_deleteDataset_args(");
      boolean first = true;

      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_deleteDataset_argsStandardSchemeFactory implements SchemeFactory {
      public user_deleteDataset_argsStandardScheme getScheme() {
        return new user_deleteDataset_argsStandardScheme();
      }
    }

    private static class user_deleteDataset_argsStandardScheme extends StandardScheme<user_deleteDataset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_deleteDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_deleteDataset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_deleteDataset_argsTupleSchemeFactory implements SchemeFactory {
      public user_deleteDataset_argsTupleScheme getScheme() {
        return new user_deleteDataset_argsTupleScheme();
      }
    }

    private static class user_deleteDataset_argsTupleScheme extends TupleScheme<user_deleteDataset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_deleteDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_deleteDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
      }
    }

  }

  public static class user_deleteDataset_result implements org.apache.thrift.TBase<user_deleteDataset_result, user_deleteDataset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_deleteDataset_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_deleteDataset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_deleteDataset_resultTupleSchemeFactory());
    }

    public DatasetDoesNotExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_deleteDataset_result.class, metaDataMap);
    }

    public user_deleteDataset_result() {
    }

    public user_deleteDataset_result(
      DatasetDoesNotExistException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_deleteDataset_result(user_deleteDataset_result other) {
      if (other.isSetE()) {
        this.e = new DatasetDoesNotExistException(other.e);
      }
    }

    public user_deleteDataset_result deepCopy() {
      return new user_deleteDataset_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DatasetDoesNotExistException getE() {
      return this.e;
    }

    public user_deleteDataset_result setE(DatasetDoesNotExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DatasetDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_deleteDataset_result)
        return this.equals((user_deleteDataset_result)that);
      return false;
    }

    public boolean equals(user_deleteDataset_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_deleteDataset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_deleteDataset_result typedOther = (user_deleteDataset_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_deleteDataset_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_deleteDataset_resultStandardSchemeFactory implements SchemeFactory {
      public user_deleteDataset_resultStandardScheme getScheme() {
        return new user_deleteDataset_resultStandardScheme();
      }
    }

    private static class user_deleteDataset_resultStandardScheme extends StandardScheme<user_deleteDataset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_deleteDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DatasetDoesNotExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_deleteDataset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_deleteDataset_resultTupleSchemeFactory implements SchemeFactory {
      public user_deleteDataset_resultTupleScheme getScheme() {
        return new user_deleteDataset_resultTupleScheme();
      }
    }

    private static class user_deleteDataset_resultTupleScheme extends TupleScheme<user_deleteDataset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_deleteDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_deleteDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DatasetDoesNotExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_unpinDataset_args implements org.apache.thrift.TBase<user_unpinDataset_args, user_unpinDataset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_unpinDataset_args");

    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_unpinDataset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_unpinDataset_argsTupleSchemeFactory());
    }

    public int datasetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_ID((short)1, "datasetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_ID
            return DATASET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_unpinDataset_args.class, metaDataMap);
    }

    public user_unpinDataset_args() {
    }

    public user_unpinDataset_args(
      int datasetId)
    {
      this();
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_unpinDataset_args(user_unpinDataset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.datasetId = other.datasetId;
    }

    public user_unpinDataset_args deepCopy() {
      return new user_unpinDataset_args(this);
    }

    @Override
    public void clear() {
      setDatasetIdIsSet(false);
      this.datasetId = 0;
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public user_unpinDataset_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_ID:
        return isSetDatasetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_unpinDataset_args)
        return this.equals((user_unpinDataset_args)that);
      return false;
    }

    public boolean equals(user_unpinDataset_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_unpinDataset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_unpinDataset_args typedOther = (user_unpinDataset_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_unpinDataset_args(");
      boolean first = true;

      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_unpinDataset_argsStandardSchemeFactory implements SchemeFactory {
      public user_unpinDataset_argsStandardScheme getScheme() {
        return new user_unpinDataset_argsStandardScheme();
      }
    }

    private static class user_unpinDataset_argsStandardScheme extends StandardScheme<user_unpinDataset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_unpinDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_unpinDataset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_unpinDataset_argsTupleSchemeFactory implements SchemeFactory {
      public user_unpinDataset_argsTupleScheme getScheme() {
        return new user_unpinDataset_argsTupleScheme();
      }
    }

    private static class user_unpinDataset_argsTupleScheme extends TupleScheme<user_unpinDataset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_unpinDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_unpinDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
      }
    }

  }

  public static class user_unpinDataset_result implements org.apache.thrift.TBase<user_unpinDataset_result, user_unpinDataset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_unpinDataset_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_unpinDataset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_unpinDataset_resultTupleSchemeFactory());
    }

    public DatasetDoesNotExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_unpinDataset_result.class, metaDataMap);
    }

    public user_unpinDataset_result() {
    }

    public user_unpinDataset_result(
      DatasetDoesNotExistException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_unpinDataset_result(user_unpinDataset_result other) {
      if (other.isSetE()) {
        this.e = new DatasetDoesNotExistException(other.e);
      }
    }

    public user_unpinDataset_result deepCopy() {
      return new user_unpinDataset_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DatasetDoesNotExistException getE() {
      return this.e;
    }

    public user_unpinDataset_result setE(DatasetDoesNotExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DatasetDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_unpinDataset_result)
        return this.equals((user_unpinDataset_result)that);
      return false;
    }

    public boolean equals(user_unpinDataset_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_unpinDataset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_unpinDataset_result typedOther = (user_unpinDataset_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_unpinDataset_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_unpinDataset_resultStandardSchemeFactory implements SchemeFactory {
      public user_unpinDataset_resultStandardScheme getScheme() {
        return new user_unpinDataset_resultStandardScheme();
      }
    }

    private static class user_unpinDataset_resultStandardScheme extends StandardScheme<user_unpinDataset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_unpinDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DatasetDoesNotExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_unpinDataset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_unpinDataset_resultTupleSchemeFactory implements SchemeFactory {
      public user_unpinDataset_resultTupleScheme getScheme() {
        return new user_unpinDataset_resultTupleScheme();
      }
    }

    private static class user_unpinDataset_resultTupleScheme extends TupleScheme<user_unpinDataset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_unpinDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_unpinDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DatasetDoesNotExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_renameDataset_args implements org.apache.thrift.TBase<user_renameDataset_args, user_renameDataset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_renameDataset_args");

    private static final org.apache.thrift.protocol.TField SRC_DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDataset", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DST_DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDataset", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_renameDataset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_renameDataset_argsTupleSchemeFactory());
    }

    public String srcDataset; // required
    public String dstDataset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC_DATASET((short)1, "srcDataset"),
      DST_DATASET((short)2, "dstDataset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC_DATASET
            return SRC_DATASET;
          case 2: // DST_DATASET
            return DST_DATASET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC_DATASET, new org.apache.thrift.meta_data.FieldMetaData("srcDataset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DATASET, new org.apache.thrift.meta_data.FieldMetaData("dstDataset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_renameDataset_args.class, metaDataMap);
    }

    public user_renameDataset_args() {
    }

    public user_renameDataset_args(
      String srcDataset,
      String dstDataset)
    {
      this();
      this.srcDataset = srcDataset;
      this.dstDataset = dstDataset;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_renameDataset_args(user_renameDataset_args other) {
      if (other.isSetSrcDataset()) {
        this.srcDataset = other.srcDataset;
      }
      if (other.isSetDstDataset()) {
        this.dstDataset = other.dstDataset;
      }
    }

    public user_renameDataset_args deepCopy() {
      return new user_renameDataset_args(this);
    }

    @Override
    public void clear() {
      this.srcDataset = null;
      this.dstDataset = null;
    }

    public String getSrcDataset() {
      return this.srcDataset;
    }

    public user_renameDataset_args setSrcDataset(String srcDataset) {
      this.srcDataset = srcDataset;
      return this;
    }

    public void unsetSrcDataset() {
      this.srcDataset = null;
    }

    /** Returns true if field srcDataset is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDataset() {
      return this.srcDataset != null;
    }

    public void setSrcDatasetIsSet(boolean value) {
      if (!value) {
        this.srcDataset = null;
      }
    }

    public String getDstDataset() {
      return this.dstDataset;
    }

    public user_renameDataset_args setDstDataset(String dstDataset) {
      this.dstDataset = dstDataset;
      return this;
    }

    public void unsetDstDataset() {
      this.dstDataset = null;
    }

    /** Returns true if field dstDataset is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDataset() {
      return this.dstDataset != null;
    }

    public void setDstDatasetIsSet(boolean value) {
      if (!value) {
        this.dstDataset = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC_DATASET:
        if (value == null) {
          unsetSrcDataset();
        } else {
          setSrcDataset((String)value);
        }
        break;

      case DST_DATASET:
        if (value == null) {
          unsetDstDataset();
        } else {
          setDstDataset((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC_DATASET:
        return getSrcDataset();

      case DST_DATASET:
        return getDstDataset();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC_DATASET:
        return isSetSrcDataset();
      case DST_DATASET:
        return isSetDstDataset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_renameDataset_args)
        return this.equals((user_renameDataset_args)that);
      return false;
    }

    public boolean equals(user_renameDataset_args that) {
      if (that == null)
        return false;

      boolean this_present_srcDataset = true && this.isSetSrcDataset();
      boolean that_present_srcDataset = true && that.isSetSrcDataset();
      if (this_present_srcDataset || that_present_srcDataset) {
        if (!(this_present_srcDataset && that_present_srcDataset))
          return false;
        if (!this.srcDataset.equals(that.srcDataset))
          return false;
      }

      boolean this_present_dstDataset = true && this.isSetDstDataset();
      boolean that_present_dstDataset = true && that.isSetDstDataset();
      if (this_present_dstDataset || that_present_dstDataset) {
        if (!(this_present_dstDataset && that_present_dstDataset))
          return false;
        if (!this.dstDataset.equals(that.dstDataset))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_renameDataset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_renameDataset_args typedOther = (user_renameDataset_args)other;

      lastComparison = Boolean.valueOf(isSetSrcDataset()).compareTo(typedOther.isSetSrcDataset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDataset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDataset, typedOther.srcDataset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDataset()).compareTo(typedOther.isSetDstDataset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDataset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDataset, typedOther.dstDataset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_renameDataset_args(");
      boolean first = true;

      sb.append("srcDataset:");
      if (this.srcDataset == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDataset);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDataset:");
      if (this.dstDataset == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDataset);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_renameDataset_argsStandardSchemeFactory implements SchemeFactory {
      public user_renameDataset_argsStandardScheme getScheme() {
        return new user_renameDataset_argsStandardScheme();
      }
    }

    private static class user_renameDataset_argsStandardScheme extends StandardScheme<user_renameDataset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_renameDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC_DATASET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDataset = iprot.readString();
                struct.setSrcDatasetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DST_DATASET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDataset = iprot.readString();
                struct.setDstDatasetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_renameDataset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.srcDataset != null) {
          oprot.writeFieldBegin(SRC_DATASET_FIELD_DESC);
          oprot.writeString(struct.srcDataset);
          oprot.writeFieldEnd();
        }
        if (struct.dstDataset != null) {
          oprot.writeFieldBegin(DST_DATASET_FIELD_DESC);
          oprot.writeString(struct.dstDataset);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_renameDataset_argsTupleSchemeFactory implements SchemeFactory {
      public user_renameDataset_argsTupleScheme getScheme() {
        return new user_renameDataset_argsTupleScheme();
      }
    }

    private static class user_renameDataset_argsTupleScheme extends TupleScheme<user_renameDataset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_renameDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrcDataset()) {
          optionals.set(0);
        }
        if (struct.isSetDstDataset()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSrcDataset()) {
          oprot.writeString(struct.srcDataset);
        }
        if (struct.isSetDstDataset()) {
          oprot.writeString(struct.dstDataset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_renameDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.srcDataset = iprot.readString();
          struct.setSrcDatasetIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dstDataset = iprot.readString();
          struct.setDstDatasetIsSet(true);
        }
      }
    }

  }

  public static class user_renameDataset_result implements org.apache.thrift.TBase<user_renameDataset_result, user_renameDataset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_renameDataset_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_renameDataset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_renameDataset_resultTupleSchemeFactory());
    }

    public DatasetDoesNotExistException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_renameDataset_result.class, metaDataMap);
    }

    public user_renameDataset_result() {
    }

    public user_renameDataset_result(
      DatasetDoesNotExistException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_renameDataset_result(user_renameDataset_result other) {
      if (other.isSetE()) {
        this.e = new DatasetDoesNotExistException(other.e);
      }
    }

    public user_renameDataset_result deepCopy() {
      return new user_renameDataset_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DatasetDoesNotExistException getE() {
      return this.e;
    }

    public user_renameDataset_result setE(DatasetDoesNotExistException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DatasetDoesNotExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_renameDataset_result)
        return this.equals((user_renameDataset_result)that);
      return false;
    }

    public boolean equals(user_renameDataset_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_renameDataset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_renameDataset_result typedOther = (user_renameDataset_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_renameDataset_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_renameDataset_resultStandardSchemeFactory implements SchemeFactory {
      public user_renameDataset_resultStandardScheme getScheme() {
        return new user_renameDataset_resultStandardScheme();
      }
    }

    private static class user_renameDataset_resultStandardScheme extends StandardScheme<user_renameDataset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_renameDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DatasetDoesNotExistException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_renameDataset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_renameDataset_resultTupleSchemeFactory implements SchemeFactory {
      public user_renameDataset_resultTupleScheme getScheme() {
        return new user_renameDataset_resultTupleScheme();
      }
    }

    private static class user_renameDataset_resultTupleScheme extends TupleScheme<user_renameDataset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_renameDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_renameDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DatasetDoesNotExistException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class user_outOfMemoryForPinDataset_args implements org.apache.thrift.TBase<user_outOfMemoryForPinDataset_args, user_outOfMemoryForPinDataset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_outOfMemoryForPinDataset_args");

    private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("datasetId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_outOfMemoryForPinDataset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_outOfMemoryForPinDataset_argsTupleSchemeFactory());
    }

    public int datasetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASET_ID((short)1, "datasetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASET_ID
            return DATASET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("datasetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_outOfMemoryForPinDataset_args.class, metaDataMap);
    }

    public user_outOfMemoryForPinDataset_args() {
    }

    public user_outOfMemoryForPinDataset_args(
      int datasetId)
    {
      this();
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_outOfMemoryForPinDataset_args(user_outOfMemoryForPinDataset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.datasetId = other.datasetId;
    }

    public user_outOfMemoryForPinDataset_args deepCopy() {
      return new user_outOfMemoryForPinDataset_args(this);
    }

    @Override
    public void clear() {
      setDatasetIdIsSet(false);
      this.datasetId = 0;
    }

    public int getDatasetId() {
      return this.datasetId;
    }

    public user_outOfMemoryForPinDataset_args setDatasetId(int datasetId) {
      this.datasetId = datasetId;
      setDatasetIdIsSet(true);
      return this;
    }

    public void unsetDatasetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    /** Returns true if field datasetId is set (has been assigned a value) and false otherwise */
    public boolean isSetDatasetId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASETID_ISSET_ID);
    }

    public void setDatasetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASET_ID:
        if (value == null) {
          unsetDatasetId();
        } else {
          setDatasetId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASET_ID:
        return Integer.valueOf(getDatasetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASET_ID:
        return isSetDatasetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_outOfMemoryForPinDataset_args)
        return this.equals((user_outOfMemoryForPinDataset_args)that);
      return false;
    }

    public boolean equals(user_outOfMemoryForPinDataset_args that) {
      if (that == null)
        return false;

      boolean this_present_datasetId = true;
      boolean that_present_datasetId = true;
      if (this_present_datasetId || that_present_datasetId) {
        if (!(this_present_datasetId && that_present_datasetId))
          return false;
        if (this.datasetId != that.datasetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_outOfMemoryForPinDataset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_outOfMemoryForPinDataset_args typedOther = (user_outOfMemoryForPinDataset_args)other;

      lastComparison = Boolean.valueOf(isSetDatasetId()).compareTo(typedOther.isSetDatasetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatasetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datasetId, typedOther.datasetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_outOfMemoryForPinDataset_args(");
      boolean first = true;

      sb.append("datasetId:");
      sb.append(this.datasetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_outOfMemoryForPinDataset_argsStandardSchemeFactory implements SchemeFactory {
      public user_outOfMemoryForPinDataset_argsStandardScheme getScheme() {
        return new user_outOfMemoryForPinDataset_argsStandardScheme();
      }
    }

    private static class user_outOfMemoryForPinDataset_argsStandardScheme extends StandardScheme<user_outOfMemoryForPinDataset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_outOfMemoryForPinDataset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.datasetId = iprot.readI32();
                struct.setDatasetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_outOfMemoryForPinDataset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
        oprot.writeI32(struct.datasetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_outOfMemoryForPinDataset_argsTupleSchemeFactory implements SchemeFactory {
      public user_outOfMemoryForPinDataset_argsTupleScheme getScheme() {
        return new user_outOfMemoryForPinDataset_argsTupleScheme();
      }
    }

    private static class user_outOfMemoryForPinDataset_argsTupleScheme extends TupleScheme<user_outOfMemoryForPinDataset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_outOfMemoryForPinDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatasetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDatasetId()) {
          oprot.writeI32(struct.datasetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_outOfMemoryForPinDataset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.datasetId = iprot.readI32();
          struct.setDatasetIdIsSet(true);
        }
      }
    }

  }

  public static class user_outOfMemoryForPinDataset_result implements org.apache.thrift.TBase<user_outOfMemoryForPinDataset_result, user_outOfMemoryForPinDataset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_outOfMemoryForPinDataset_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_outOfMemoryForPinDataset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_outOfMemoryForPinDataset_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_outOfMemoryForPinDataset_result.class, metaDataMap);
    }

    public user_outOfMemoryForPinDataset_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_outOfMemoryForPinDataset_result(user_outOfMemoryForPinDataset_result other) {
    }

    public user_outOfMemoryForPinDataset_result deepCopy() {
      return new user_outOfMemoryForPinDataset_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_outOfMemoryForPinDataset_result)
        return this.equals((user_outOfMemoryForPinDataset_result)that);
      return false;
    }

    public boolean equals(user_outOfMemoryForPinDataset_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_outOfMemoryForPinDataset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_outOfMemoryForPinDataset_result typedOther = (user_outOfMemoryForPinDataset_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_outOfMemoryForPinDataset_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_outOfMemoryForPinDataset_resultStandardSchemeFactory implements SchemeFactory {
      public user_outOfMemoryForPinDataset_resultStandardScheme getScheme() {
        return new user_outOfMemoryForPinDataset_resultStandardScheme();
      }
    }

    private static class user_outOfMemoryForPinDataset_resultStandardScheme extends StandardScheme<user_outOfMemoryForPinDataset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_outOfMemoryForPinDataset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_outOfMemoryForPinDataset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_outOfMemoryForPinDataset_resultTupleSchemeFactory implements SchemeFactory {
      public user_outOfMemoryForPinDataset_resultTupleScheme getScheme() {
        return new user_outOfMemoryForPinDataset_resultTupleScheme();
      }
    }

    private static class user_outOfMemoryForPinDataset_resultTupleScheme extends TupleScheme<user_outOfMemoryForPinDataset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_outOfMemoryForPinDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_outOfMemoryForPinDataset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class cmd_ls_args implements org.apache.thrift.TBase<cmd_ls_args, cmd_ls_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cmd_ls_args");

    private static final org.apache.thrift.protocol.TField FOLDER_FIELD_DESC = new org.apache.thrift.protocol.TField("folder", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cmd_ls_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cmd_ls_argsTupleSchemeFactory());
    }

    public String folder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOLDER((short)1, "folder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOLDER
            return FOLDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOLDER, new org.apache.thrift.meta_data.FieldMetaData("folder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cmd_ls_args.class, metaDataMap);
    }

    public cmd_ls_args() {
    }

    public cmd_ls_args(
      String folder)
    {
      this();
      this.folder = folder;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cmd_ls_args(cmd_ls_args other) {
      if (other.isSetFolder()) {
        this.folder = other.folder;
      }
    }

    public cmd_ls_args deepCopy() {
      return new cmd_ls_args(this);
    }

    @Override
    public void clear() {
      this.folder = null;
    }

    public String getFolder() {
      return this.folder;
    }

    public cmd_ls_args setFolder(String folder) {
      this.folder = folder;
      return this;
    }

    public void unsetFolder() {
      this.folder = null;
    }

    /** Returns true if field folder is set (has been assigned a value) and false otherwise */
    public boolean isSetFolder() {
      return this.folder != null;
    }

    public void setFolderIsSet(boolean value) {
      if (!value) {
        this.folder = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FOLDER:
        if (value == null) {
          unsetFolder();
        } else {
          setFolder((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOLDER:
        return getFolder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOLDER:
        return isSetFolder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cmd_ls_args)
        return this.equals((cmd_ls_args)that);
      return false;
    }

    public boolean equals(cmd_ls_args that) {
      if (that == null)
        return false;

      boolean this_present_folder = true && this.isSetFolder();
      boolean that_present_folder = true && that.isSetFolder();
      if (this_present_folder || that_present_folder) {
        if (!(this_present_folder && that_present_folder))
          return false;
        if (!this.folder.equals(that.folder))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cmd_ls_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cmd_ls_args typedOther = (cmd_ls_args)other;

      lastComparison = Boolean.valueOf(isSetFolder()).compareTo(typedOther.isSetFolder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFolder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folder, typedOther.folder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cmd_ls_args(");
      boolean first = true;

      sb.append("folder:");
      if (this.folder == null) {
        sb.append("null");
      } else {
        sb.append(this.folder);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cmd_ls_argsStandardSchemeFactory implements SchemeFactory {
      public cmd_ls_argsStandardScheme getScheme() {
        return new cmd_ls_argsStandardScheme();
      }
    }

    private static class cmd_ls_argsStandardScheme extends StandardScheme<cmd_ls_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cmd_ls_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOLDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.folder = iprot.readString();
                struct.setFolderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cmd_ls_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.folder != null) {
          oprot.writeFieldBegin(FOLDER_FIELD_DESC);
          oprot.writeString(struct.folder);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cmd_ls_argsTupleSchemeFactory implements SchemeFactory {
      public cmd_ls_argsTupleScheme getScheme() {
        return new cmd_ls_argsTupleScheme();
      }
    }

    private static class cmd_ls_argsTupleScheme extends TupleScheme<cmd_ls_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cmd_ls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFolder()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFolder()) {
          oprot.writeString(struct.folder);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cmd_ls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.folder = iprot.readString();
          struct.setFolderIsSet(true);
        }
      }
    }

  }

  public static class cmd_ls_result implements org.apache.thrift.TBase<cmd_ls_result, cmd_ls_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cmd_ls_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cmd_ls_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cmd_ls_resultTupleSchemeFactory());
    }

    public List<DatasetInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DatasetInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cmd_ls_result.class, metaDataMap);
    }

    public cmd_ls_result() {
    }

    public cmd_ls_result(
      List<DatasetInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cmd_ls_result(cmd_ls_result other) {
      if (other.isSetSuccess()) {
        List<DatasetInfo> __this__success = new ArrayList<DatasetInfo>();
        for (DatasetInfo other_element : other.success) {
          __this__success.add(new DatasetInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public cmd_ls_result deepCopy() {
      return new cmd_ls_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DatasetInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DatasetInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<DatasetInfo>();
      }
      this.success.add(elem);
    }

    public List<DatasetInfo> getSuccess() {
      return this.success;
    }

    public cmd_ls_result setSuccess(List<DatasetInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DatasetInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cmd_ls_result)
        return this.equals((cmd_ls_result)that);
      return false;
    }

    public boolean equals(cmd_ls_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cmd_ls_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cmd_ls_result typedOther = (cmd_ls_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cmd_ls_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cmd_ls_resultStandardSchemeFactory implements SchemeFactory {
      public cmd_ls_resultStandardScheme getScheme() {
        return new cmd_ls_resultStandardScheme();
      }
    }

    private static class cmd_ls_resultStandardScheme extends StandardScheme<cmd_ls_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cmd_ls_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<DatasetInfo>(_list58.size);
                  for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                  {
                    DatasetInfo _elem60; // required
                    _elem60 = new DatasetInfo();
                    _elem60.read(iprot);
                    struct.success.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cmd_ls_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DatasetInfo _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cmd_ls_resultTupleSchemeFactory implements SchemeFactory {
      public cmd_ls_resultTupleScheme getScheme() {
        return new cmd_ls_resultTupleScheme();
      }
    }

    private static class cmd_ls_resultTupleScheme extends TupleScheme<cmd_ls_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cmd_ls_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DatasetInfo _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cmd_ls_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DatasetInfo>(_list63.size);
            for (int _i64 = 0; _i64 < _list63.size; ++_i64)
            {
              DatasetInfo _elem65; // required
              _elem65 = new DatasetInfo();
              _elem65.read(iprot);
              struct.success.add(_elem65);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
