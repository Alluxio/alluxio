#!/usr/bin/env bash

# This file contains environment variables required to run Alluxio. Copy it as alluxio-env.sh and
# edit that to configure Alluxio for your site. At a minimum,
# the following variables should be set:
#
# - JAVA_HOME, to point to your JAVA installation
# - ALLUXIO_MASTER_ADDRESS, to bind the master to a different IP address or hostname
# - ALLUXIO_UNDERFS_ADDRESS, to set the under filesystem address.
# - ALLUXIO_WORKER_MEMORY_SIZE, to set how much memory to use (e.g. 1000mb, 2gb) per worker
# - ALLUXIO_RAM_FOLDER, to set where worker stores in memory data


# Support for Multihomed Networks.
# You can specify a hostname to bind each of services. If a wildcard
# is applied, you should select one of network interfaces and use its hostname to connect the service.
# If no hostname is defined, Alluxio will automatically select an externally visible localhost name.
# The various possibilities shown in the following table:
#
# +--------------------+------------------------+---------------------+
# | ALLUXIO_*_HOSTNAME |  ALLUXIO_*_BIND_HOST   | Actual Connect Host |
# +--------------------+------------------------+---------------------+
# | hostname           | hostname               | hostname            |
# | not defined        | hostname               | hostname            |
# | hostname           | 0.0.0.0 or not defined | hostname            |
# | not defined        | 0.0.0.0 or not defined | localhost           |
# +--------------------+------------------------+---------------------+
#
# Configuration Examples:
#
# Environment variables for service bind
# ALLUXIO_MASTER_BIND_HOST=${ALLUXIO_MASTER_BIND_HOST:-$(hostname -A | cut -d" " -f1)}
# ALLUXIO_MASTER_WEB_BIND_HOST=${ALLUXIO_MASTER_WEB_BIND_HOST:-0.0.0.0}
# ALLUXIO_WORKER_BIND_HOST=${ALLUXIO_WORKER_BIND_HOST:-$(hostname -A | cut -d" " -f1)}
# ALLUXIO_WORKER_DATA_BIND_HOST=${ALLUXIO_WORKER_DATA_BIND_HOST:-$(hostname -A | cut -d" " -f1)}
# ALLUXIO_WORKER_WEB_BIND_HOST=${ALLUXIO_WORKER_WEB_BIND_HOST:-0.0.0.0}
#
# Environment variables for service connection
# ALLUXIO_MASTER_HOSTNAME=${ALLUXIO_MASTER_HOSTNAME:-$(hostname -A | cut -d" " -f1)}
# ALLUXIO_MASTER_WEB_HOSTNAME=${ALLUXIO_MASTER_WEB_HOSTNAME:-$(hostname -A | cut -d" " -f1)}
# ALLUXIO_WORKER_HOSTNAME=${ALLUXIO_WORKER_HOSTNAME:-$(hostname -A | cut -d" " -f1)}
# ALLUXIO_WORKER_DATA_HOSTNAME=${ALLUXIO_WORKER_DATA_HOSTNAME:-$(hostname -A | cut -d" " -f1)}
# ALLUXIO_WORKER_WEB_HOSTNAME=${ALLUXIO_WORKER_WEB_HOSTNAME:-$(hostname -A | cut -d" " -f1)}

# The following gives an example:

# Uncomment this section to add a local installation of Hadoop to Alluxio's CLASSPATH.
# The hadoop command must be in the path to automatically populate the Hadoop classpath.
#
# if type "hadoop" > /dev/null 2>&1; then
#  export HADOOP_ALLUXIO_CLASSPATH=$(hadoop classpath)
# fi
# export ALLUXIO_CLASSPATH=${ALLUXIO_CLASSPATH:-${HADOOP_ALLUXIO_CLASSPATH}}

if [[ $(uname -s) == Darwin ]]; then
  # Assuming Mac OS X
  export JAVA_HOME=${JAVA_HOME:-$(/usr/libexec/java_home)}
  export ALLUXIO_RAM_FOLDER=/Volumes/ramdisk
  export ALLUXIO_JAVA_OPTS="-Djava.security.krb5.realm= -Djava.security.krb5.kdc="
else
  # Assuming Linux
  if [[ -z "${JAVA_HOME}" ]]; then
    if [ -d /usr/lib/jvm/java-7-oracle ]; then
      export JAVA_HOME=/usr/lib/jvm/java-7-oracle
    else
      # openjdk will set this
      if [[ -d /usr/lib/jvm/jre-1.7.0 ]]; then
        export JAVA_HOME=/usr/lib/jvm/jre-1.7.0
      fi
    fi
  fi
  export ALLUXIO_RAM_FOLDER="/mnt/ramdisk"
fi

if [[ -z "${JAVA_HOME}" ]]; then
  export JAVA_HOME="$(dirname $(which java))/.."
fi

export JAVA="${JAVA_HOME}/bin/java"
export ALLUXIO_MASTER_ADDRESS=${ALLUXIO_MASTER_ADDRESS:-localhost}
export ALLUXIO_UNDERFS_ADDRESS=${ALLUXIO_UNDERFS_ADDRESS:-swift://alluxiotestcont}
export ALLUXIO_WORKER_MEMORY_SIZE=${ALLUXIO_WORKER_MEMORY_SIZE:-1GB}

export ALLUXIO_SSH_FOREGROUND=${ALLUXIO_SSH_FOREGROUND:-"yes"}
export ALLUXIO_WORKER_SLEEP=${ALLUXIO_WORKER_SLEEP:-"0.02"}

# Prepend Alluxio classes before classes specified by ALLUXIO_CLASSPATH
# in the Java classpath.  May be necessary if there are jar conflicts
#export ALLUXIO_PREPEND_ALLUXIO_CLASSES=${ALLUXIO_PREPEND_ALLUXIO_CLASSES:-"yes"}

# Where log files are stored. $ALLUXIO_HOME/logs by default.
#export ALLUXIO_LOGS_DIR=${ALLUXIO_LOGS_DIR:-${ALLUXIO_HOME}/logs}

CONF_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export ALLUXIO_JAVA_OPTS+="
  -Dlog4j.configuration=file:${CONF_DIR}/log4j.properties
  -Dalluxio.worker.tieredstore.levels=1
  -Dalluxio.worker.tieredstore.level0.alias=MEM
  -Dalluxio.worker.tieredstore.level0.dirs.path=${ALLUXIO_RAM_FOLDER}
  -Dalluxio.worker.tieredstore.level0.dirs.quota=${ALLUXIO_WORKER_MEMORY_SIZE}
  -Dalluxio.underfs.address=${ALLUXIO_UNDERFS_ADDRESS}
  -Dalluxio.worker.memory.size=${ALLUXIO_WORKER_MEMORY_SIZE}
  -Dalluxio.master.hostname=${ALLUXIO_MASTER_ADDRESS}
  -Dorg.apache.jasper.compiler.disablejsr199=true
  -Djava.net.preferIPv4Stack=true
  -Dfs.swift.user=<swift-user>
  -Dfs.swift.tenant=<swift-tenant>
  -Dfs.swift.apikey=<swift-user-password>
  -Dfs.swift.auth.url=<swift-auth-url>
  -Dfs.swift.auth.port=<swift-auth-url-port>
  -Dfs.swift.use.public.url=<swift-use-public: true, false>
  -Dfs.swift.auth.method=<swift-auth-model: keystone, tempauth>
"

# Master specific parameters. Default to ALLUXIO_JAVA_OPTS.
export ALLUXIO_MASTER_JAVA_OPTS="${ALLUXIO_JAVA_OPTS}"

# Worker specific parameters that will be shared to all workers. Default to ALLUXIO_JAVA_OPTS.
export ALLUXIO_WORKER_JAVA_OPTS="${ALLUXIO_JAVA_OPTS}"
