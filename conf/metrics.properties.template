#  syntax: [instance].sink|source.[name].[options]=[value]

#  This file configures Alluxio's internal metrics system. The metrics system is
#  divided into instances which correspond to internal components.
#  Each instance can be configured to report its metrics to one or more sinks.
#  Accepted values for [instance] are "master" and "worker". A wild card "*" can
#  be used as an instance name, in which case all instances will inherit the
#  supplied property.
#
#  Within an instance, a "source" specifies a particular set of grouped metrics.
#  there are two kinds of sources:
#    1. Alluxio internal sources, like MasterSource, WorkerSource, etc, which will
#    collect a Alluxio component's internal state. Each instance is paired with a
#    Alluxio source that is added automatically.
#    2. Common sources, like JvmSource, which will collect low level state.
#    These can be added through configuration options and are then loaded
#    using reflection.
#
#  A "sink" specifies where metrics are delivered to. Each instance can be
#  assigned one or more sinks.
#
#  The sink|source field specifies whether the property relates to a sink or
#  source.
#
#  The [name] field specifies the name of source or sink.
#
#  The [options] field is the specific property of this source or sink. The
#  source or sink is responsible for parsing this property.
#
#  Notes:
#    1. To add a new sink, set the "class" option to a fully qualified class
#    name (see examples below).
#    2. Some sinks involve a polling period. The minimum allowed polling period
#    is 1 second.
#    3. Wild card properties can be overridden by more specific properties.
#    For example, master.sink.console.period takes precedence over
#    *.sink.console.period.
#    4. A metrics specific configuration
#    "alluxio.metrics.conf.file=${ALLUXIO_HOME}/conf/metrics.properties" should be
#    added to Java properties using -Dalluxio.metrics.conf.file=xxx if you want to
#    customize metrics system. You can also put the file in ${ALLUXIO_HOME}/conf
#    and it will be loaded automatically.
#    5. MetricsServlet is added by default as a sink, you can send http request
#    "/metrics/json" to get a snapshot of all the registered metrics in json format.
#

## List of available sinks and their properties.

# alluxio.metrics.sink.ConsoleSink
#   Name:   Default:   Description:
#   period  10         Poll period
#   unit    seconds    Units of poll period

# alluxio.metrics.sink.CsvSink
#   Name:     Default:   Description:
#   period    10         Poll period
#   unit      seconds    Units of poll period
#   directory /tmp       Where to store CSV files

# alluxio.metrics.sink.JmxSink

# alluxio.metrics.sink.MetricsServlet
#   Name:     Default:      Description:
#   path      /metrics/json Path prefix from the web server root

# alluxio.metrics.sink.GraphiteSink
#   Name:     Default:      Description:
#   host      NONE          Hostname of Graphite server
#   port      NONE          Port of Graphite server
#   period    10            Poll period
#   unit      seconds       Units of poll period
#   prefix    EMPTY STRING  Prefix to prepend to metric name

## Examples
# Enable JmxSink for all instances by class name
#*.sink.jmx.class=alluxio.metrics.sink.JmxSink

# Enable ConsoleSink for all instances by class name
#*.sink.console.class=alluxio.metrics.sink.ConsoleSink

# Polling period for ConsoleSink
#*.sink.console.period=10

#*.sink.console.unit=seconds

# Master instance overlap polling period
#master.sink.console.period=15

#master.sink.console.unit=seconds

# Enable CsvSink for all instances
#*.sink.csv.class=alluxio.metrics.sink.CsvSink

# Polling period for CsvSink
#*.sink.csv.period=1

#*.sink.csv.unit=minutes

# Polling directory for CsvSink
#*.sink.csv.directory=/tmp/

# Worker instance overlap polling period
#worker.sink.csv.period=10

#worker.sink.csv.unit=minutes

# Enable jvm source for instance master and worker
#master.source.jvm.class=alluxio.metrics.source.JvmSource

#worker.source.jvm.class=alluxio.metrics.source.JvmSource